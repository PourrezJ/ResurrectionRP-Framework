
interface Vector3 {
  x: number;
  y: number;
  z: number;
}

type MemoryBuffer = object;
type vectorPtr = Vector3;

declare module "natives" {
	export function appDataValid(): boolean;
	export function appGetInt(property: string): number;
	export function appGetFloat(property: string): number;
	export function appGetString(property: string): string;
	export function playPedRingtone(ringtoneName: string, ped: number, p2: boolean): void;
	export function isPedRingtonePlaying(ped: number): boolean;
	export function stopPedRingtone(ped: number): void;
	export function isMobilePhoneCallOngoing(): boolean;
	export function _0xC8B1B2425604CDD0(): boolean;
	export function createNewScriptedConversation(): void;
	export function addLineToConversation(index: number, p1: string, p2: string, p3: number, p4: number, p5: boolean, p6: boolean, p7: boolean, p8: boolean, p9: number, p10: boolean, p11: boolean, p12: boolean): void;
	export function addPedToConversation(index: number, ped: number, p2: string): void;
	export function _0x33E3C6C6F2F0B506(p0: number, p1: number, p2: number, p3: number): void;
	export function _0x892B6AB8F33606F5(p0: number, entity: number): void;
	export function setMicrophonePosition(p0: boolean, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, x3: number, y3: number, z3: number): void;
	export function _0x0B568201DD99F0EB(p0: boolean): void;
	export function _0x61631F5DF50D1C34(p0: boolean): void;
	export function startScriptPhoneConversation(p0: boolean, p1: boolean): void;
	export function preloadScriptPhoneConversation(p0: boolean, p1: boolean): void;
	export function startScriptConversation(p0: boolean, p1: boolean, p2: boolean, p3: boolean): void;
	export function preloadScriptConversation(p0: boolean, p1: boolean, p2: boolean, p3: boolean): void;
	export function startPreloadedConversation(): void;
	export function getIsPreloadedConversationReady(): boolean;
	export function isScriptedConversationOngoing(): boolean;
	export function isScriptedConversationLoaded(): boolean;
	export function getCurrentScriptedConversationLine(): number;
	export function pauseScriptedConversation(p0: boolean): void;
	export function restartScriptedConversation(): void;
	export function stopScriptedConversation(p0: boolean): number;
	export function skipToNextScriptedConversationLine(): void;
	export function interruptConversation(p0: number, p1: number, p2: number): [void, number, number];
	export function _0x8A694D7A68F8DC38(p0: number, p1: string, p2: string): void;
	export function _0xAA19F5572C38B564(p0: number): [number, number];
	export function _0xB542DE8C3D1CB210(p0: boolean): void;
	export function registerScriptWithAudio(p0: number): void;
	export function unregisterScriptWithAudio(): void;
	export function requestMissionAudioBank(p0: string, p1: boolean, p2: number): boolean;
	export function requestAmbientAudioBank(p0: string, p1: boolean, p2: number): boolean;
	export function requestScriptAudioBank(p0: string, p1: boolean, p2: number): boolean;
	export function _0x40763EA7B9B783E7(p0: number, p1: number, p2: number): number;
	export function hintAmbientAudioBank(p0: number, p1: number, p2: number): number;
	export function hintScriptAudioBank(p0: number, p1: number, p2: number): number;
	export function releaseMissionAudioBank(): void;
	export function releaseAmbientAudioBank(): void;
	export function releaseNamedScriptAudioBank(audioBank: string): void;
	export function releaseScriptAudioBank(): void;
	export function _0x19AF7ED9B9D23058(): void;
	export function _0x9AC92EED5E4793AB(): void;
	export function _0x11579D940949C49E(p0: number): void;
	export function getSoundId(): number;
	export function releaseSoundId(soundId: number): void;
	export function playSound(soundId: number, audioName: string, audioRef: string, p3: boolean, p4: number, p5: boolean): void;
	export function playSoundFrontend(soundId: number, audioName: string, audioRef: string, p3: boolean): void;
	export function playDeferredSoundFrontend(soundName: string, soundsetName: string): void;
	export function playSoundFromEntity(soundId: number, audioName: string, entity: number, audioRef: string, p4: boolean, p5: number): void;
	export function _0x5B9853296731E88D(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): void;
	export function playSoundFromCoord(soundId: number, audioName: string, x: number, y: number, z: number, audioRef: string, p6: boolean, range: number, p8: boolean): void;
	export function _0x7EC3C679D0E7E46B(p0: number, p1: number, p2: number, p3: number): void;
	export function stopSound(soundId: number): void;
	export function getNetworkIdFromSoundId(soundId: number): number;
	export function getSoundIdFromNetworkId(netId: number): number;
	export function setVariableOnSound(soundId: number, p1: number, p2: number): [void, number];
	export function setVariableOnStream(p0: string, p1: number): void;
	export function overrideUnderwaterStream(p0: number, p1: boolean): [void, number];
	export function setVariableOnUnderWaterStream(variableName: string, value: number): void;
	export function hasSoundFinished(soundId: number): boolean;
	export function playAmbientSpeech1(ped: number, speechName: string, speechParam: string, p3: number): void;
	export function playAmbientSpeech2(ped: number, speechName: string, speechParam: string, p3: number): void;
	export function playAmbientSpeechWithVoice(p0: number, speechName: string, voiceName: string, speechParam: string, p4: boolean): void;
	export function playAmbientSpeechAtCoords(p0: string, p1: string, p2: number, p3: number, p4: number, p5: string): void;
	export function overrideTrevorRage(p0: string): void;
	export function resetTrevorRage(): void;
	export function setPlayerAngry(ped: number, toggle: boolean): void;
	export function playPain(ped: number, painID: number, p1: number, p3: number): void;
	export function releaseWeaponAudio(): void;
	export function _0xD01005D2BA2EB778(p0: string): void;
	export function _0xDDC635D5B3262C56(p0: string): void;
	export function setAmbientVoiceName(ped: number, name: string): void;
	export function setAmbientVoiceNameHash(ped: number, hash: number): void;
	export function getAmbientVoiceNameHash(ped: number): number;
	export function setPedScream(ped: number): void;
	export function _0x1B7ABE26CBCBF8C7(ped: number, p1: number, p2: number): void;
	export function setPedVoiceGroup(ped: number, voiceGroupHash: number): void;
	export function _0xA5342D390CDA41D6(ped: number, p1: boolean): void;
	export function stopCurrentPlayingSpeech(ped: number): void;
	export function stopCurrentPlayingAmbientSpeech(ped: number): void;
	export function isAmbientSpeechPlaying(ped: number): boolean;
	export function isScriptedSpeechPlaying(p0: number): boolean;
	export function isAnySpeechPlaying(ped: number): boolean;
	export function canPedSpeak(ped: number, speechName: string, unk: boolean): boolean;
	export function isPedInCurrentConversation(ped: number): boolean;
	export function setPedIsDrunk(ped: number, toggle: boolean): void;
	export function _0xEE066C7006C49C0A(p0: number, p1: number, p2: number): [void, number];
	export function _0xC265DF9FB44A9FBD(p0: number): boolean;
	export function setAnimalMood(animal: number, mood: number): void;
	export function isMobilePhoneRadioActive(): boolean;
	export function setMobilePhoneRadioState(state: boolean): void;
	export function getPlayerRadioStationIndex(): number;
	export function getPlayerRadioStationName(): string;
	export function getRadioStationName(radioStation: number): string;
	export function getPlayerRadioStationGenre(): number;
	export function isRadioRetuning(): boolean;
	export function isRadioFadedOut(): boolean;
	export function _0xFF266D1D0EB1195D(): void;
	export function _0xDD6BCF9E94425DF9(): void;
	export function setRadioToStationName(stationName: string): void;
	export function setVehRadioStation(vehicle: number, radioStation: string): void;
	export function _0x0BE4BE946463F917(vehicle: number): boolean;
	export function _0xC1805D05E6D4FE10(vehicle: number): void;
	export function setEmitterRadioStation(emitterName: string, radioStation: string): void;
	export function setStaticEmitterEnabled(emitterName: string, toggle: boolean): void;
	export function linkStaticEmitterToEntity(emitterName: string, entity: number): void;
	export function setRadioToStationIndex(radioStation: number): void;
	export function setFrontendRadioActive(active: boolean): void;
	export function unlockMissionNewsStory(newsStory: number): void;
	export function isMissionNewsStoryUnlocked(newsStory: number): boolean;
	export function getAudibleMusicTrackTextId(): number;
	export function playEndCreditsMusic(play: boolean): void;
	export function skipRadioForward(): void;
	export function freezeRadioStation(radioStation: string): void;
	export function unfreezeRadioStation(radioStation: string): void;
	export function setRadioAutoUnfreeze(toggle: boolean): void;
	export function setInitialPlayerStation(radioStation: string): void;
	export function setUserRadioControlEnabled(toggle: boolean): void;
	export function setRadioTrack(radioStation: string, radioTrack: string): void;
	export function setRadioTrackMix(radioStationName: string, mixName: string, p2: number): void;
	export function setVehicleRadioLoud(vehicle: number, toggle: boolean): void;
	export function isVehicleRadioLoud(vehicle: number): boolean;
	export function setMobileRadioEnabledDuringGameplay(toggle: boolean): void;
	export function _0x109697E2FFBAC8A1(): boolean;
	export function isPlayerVehicleRadioEnabled(): boolean;
	export function setVehicleRadioEnabled(vehicle: number, toggle: boolean): void;
	export function _0xDA07819E452FFE8F(p0: number): void;
	export function _0x4E404A9361F75BB2(radioStation: string, p1: string, p2: boolean): void;
	export function _0x1654F24A88A8E3FE(radioStation: string): void;
	export function getNumUnlockedRadioStations(): number;
	export function findRadioStationIndex(station: number): number;
	export function _0x774BD811F656A122(radioStation: string, p1: boolean): void;
	export function _0x2C96CDB04FCA358E(p0: number): void;
	export function unlockRadioStationTrackList(radioStation: string, trackListName: string): void;
	export function updateLsur(enableMixes: boolean): void;
	export function lockRadioStation(radioStationName: string, toggle: boolean): void;
	export function _0xC64A06D939F826F5(p0: number, p1: number, p2: number): [boolean, number, number, number];
	export function _0x3E65CDE5215832C1(radioStationName: string): number;
	export function _0x34D66BC058019CE0(radioStationName: string): number;
	export function _0xF3365489E0DD50F9(vehicle: number, toggle: boolean): void;
	export function setAmbientZoneState(zoneName: string, p1: boolean, p2: boolean): void;
	export function clearAmbientZoneState(zoneName: string, p1: boolean): void;
	export function setAmbientZoneListState(p0: number, p1: boolean, p2: boolean): [void, number];
	export function clearAmbientZoneListState(p0: number, p1: boolean): [void, number];
	export function setAmbientZoneStatePersistent(ambientZone: string, p1: boolean, p2: boolean): void;
	export function setAmbientZoneListStatePersistent(ambientZone: string, p1: boolean, p2: boolean): void;
	export function isAmbientZoneEnabled(ambientZone: string): boolean;
	export function _0x5D2BFAAB8D956E0E(): void;
	export function setCutsceneAudioOverride(name: string): void;
	export function setVariableOnCutsceneAudio(variableName: string, value: number): void;
	export function playPoliceReport(name: string, p1: number): number;
	export function cancelCurrentPoliceReport(): void;
	export function blipSiren(vehicle: number): void;
	export function overrideVehHorn(vehicle: number, mute: boolean, p2: number): void;
	export function isHornActive(vehicle: number): boolean;
	export function setAggressiveHorns(toggle: boolean): void;
	export function _0x02E93C796ABD3A97(p0: boolean): void;
	export function _0x58BB377BEC7CD5F4(p0: boolean, p1: boolean): void;
	export function _0x9BD7BD55E4533183(p0: number, p1: number, p2: number): void;
	export function isStreamPlaying(): boolean;
	export function getStreamPlayTime(): number;
	export function loadStream(streamName: string, soundSet: string): boolean;
	export function loadStreamWithStartOffset(streamName: string, startOffset: number, soundSet: string): boolean;
	export function playStreamFromPed(ped: number): void;
	export function playStreamFromVehicle(vehicle: number): void;
	export function playStreamFromObject(object: number): void;
	export function playStreamFrontend(): void;
	export function playStreamFromPosition(x: number, y: number, z: number): void;
	export function stopStream(): void;
	export function stopPedSpeaking(ped: number, shaking: boolean): void;
	export function disablePedPainAudio(ped: number, toggle: boolean): void;
	export function isAmbientSpeechDisabled(ped: number): boolean;
	export function _0xA8A7D434AFB4B97B(p0: string, p1: number): void;
	export function _0x2ACABED337622DF2(p0: string): void;
	export function setSirenWithNoDriver(vehicle: number, toggle: boolean): void;
	export function _0x66C3FB05206041BA(p0: number): void;
	export function soundVehicleHornThisFrame(vehicle: number): void;
	export function setHornEnabled(vehicle: number, toggle: boolean): void;
	export function setAudioVehiclePriority(vehicle: number, p1: number): void;
	export function _0x9D3AF56E94C9AE98(vehicle: number, p1: number): void;
	export function useSirenAsHorn(vehicle: number, toggle: boolean): void;
	export function forceVehicleEngineAudio(vehicle: number, audioName: string): void;
	export function _0xCA4CEA6AE0000A7E(p0: number): void;
	export function _0xF1F8157B8C3F171C(vehicle: number, p1: string, p2: string): void;
	export function _0xD2DCCD8E16E20997(p0: number): void;
	export function _0x5DB8010EE71FDEF2(vehicle: number): boolean;
	export function setVehicleAudioEngineDamageFactor(vehicle: number, damageFactor: number): void;
	export function _0x01BB4D577D38BD9E(vehicle: number, p1: number): void;
	export function _0x1C073274E065C6D2(vehicle: number, toggle: boolean): void;
	export function enableVehicleExhaustPops(vehicle: number, toggle: boolean): void;
	export function setVehicleBoostActive(vehicle: number, toggle: boolean): void;
	export function _0x6FDDAD856E36988A(vehicle: number, toggle: boolean): void;
	export function setScriptUpdateDoorAudio(doorHash: number, toggle: boolean): void;
	export function playVehicleDoorOpenSound(vehicle: number, doorIndex: number): void;
	export function playVehicleDoorCloseSound(vehicle: number, doorIndex: number): void;
	export function _0xC15907D667F7CFB2(vehicle: number, toggle: boolean): void;
	export function isGameInControlOfMusic(): boolean;
	export function setGpsActive(active: boolean): void;
	export function playMissionCompleteAudio(audioName: string): void;
	export function isMissionCompletePlaying(): boolean;
	export function isMissionCompleteReadyForUi(): boolean;
	export function _0xF154B8D1775B2DEC(toggle: boolean): void;
	export function startAudioScene(scene: string): boolean;
	export function stopAudioScene(scene: string): void;
	export function stopAudioScenes(): void;
	export function isAudioSceneActive(scene: string): boolean;
	export function setAudioSceneVariable(scene: string, variable: string, value: number): void;
	export function _0xA5F377B175A699C5(p0: number): void;
	export function addEntityToAudioMixGroup(entity: number, groupName: string, p2: number): void;
	export function _0x18EB48CFC41F2EA0(p0: number, p1: number): void;
	export function audioIsScriptedMusicPlaying(): boolean;
	export function _0x2DD39BF3E2F9C47F(): number;
	export function prepareMusicEvent(eventName: string): boolean;
	export function cancelMusicEvent(eventName: string): boolean;
	export function triggerMusicEvent(eventName: string): boolean;
	export function isMusicOneshotPlaying(): boolean;
	export function getMusicPlaytime(): number;
	export function _0x159B7318403A1CD8(p0: number): void;
	export function recordBrokenGlass(x: number, y: number, z: number, radius: number): void;
	export function clearAllBrokenGlass(): void;
	export function _0x70B8EC8FC108A634(p0: boolean, p1: number): void;
	export function _0x149AEE66F0CB3A99(p0: number, p1: number): void;
	export function _0x8BF907833BE275DE(p0: number, p1: number): void;
	export function _0x062D5EAD4DA2FA6A(): void;
	export function prepareAlarm(alarmName: string): boolean;
	export function startAlarm(alarmName: string, p2: boolean): void;
	export function stopAlarm(alarmName: string, toggle: boolean): void;
	export function stopAllAlarms(stop: boolean): void;
	export function isAlarmPlaying(alarmName: string): boolean;
	export function getVehicleDefaultHorn(vehicle: number): number;
	export function getVehicleHornHash(vehicle: number): number;
	export function resetPedAudioFlags(ped: number): void;
	export function _0x0653B735BFBDFE87(ped: number, toggle: boolean): void;
	export function _0x29DA3CA8D8B2692D(ped: number, toggle: boolean): void;
	export function overridePlayerGroundMaterial(hash: number, toggle: boolean): void;
	export function _0xBF4DC1784BE94DFA(ped: number, p1: boolean, hash: number): void;
	export function overrideMicrophoneSettings(hash: number, toggle: boolean): void;
	export function freezeMicrophone(): void;
	export function forceAmbientSiren(value: boolean): void;
	export function _0x43FA0DFC5DF87815(vehicle: number, p1: boolean): void;
	export function _0xB81CF134AEB56FFB(): void;
	export function setAudioFlag(flagName: string, toggle: boolean): void;
	export function prepareSynchronizedAudioEvent(p0: string, p1: number): number;
	export function prepareSynchronizedAudioEventForScene(p0: number, p1: number): [boolean, number];
	export function playSynchronizedAudioEvent(p0: number): boolean;
	export function stopSynchronizedAudioEvent(p0: number): boolean;
	export function _0xC8EDE9BDBCCBA6D4(p0: number, p1: number, p2: number, p3: number): [void, number];
	export function setSynchronizedAudioEventPositionThisFrame(p0: string, p1: number): void;
	export function setAudioSpecialEffectMode(mode: number): void;
	export function setPortalSettingsOverride(p0: string, p1: string): void;
	export function removePortalSettingsOverride(p0: string): void;
	export function _0xE4E6DD5566D28C82(): void;
	export function _0x3A48AB4445D499BE(): number;
	export function setPedTalk(ped: number): void;
	export function _0x0150B6FF25A9E2E5(): void;
	export function _0xBEF34B1D9624D5DD(p0: boolean): void;
	export function stopCutsceneAudio(): void;
	export function hasMultiplayerAudioDataLoaded(): boolean;
	export function hasMultiplayerAudioDataUnloaded(): boolean;
	export function _0xD53F3A29BCE2580E(vehicle: number): number;
	export function _0x0350E7E17BA767D0(vehicle: number, value: number): void;
	export function addScriptToRandomPed(name: string, model: number, p2: number, p3: number): void;
	export function registerObjectScriptBrain(scriptName: string, modelHash: number, p2: number, activationRange: number, p4: number, p5: number): void;
	export function isObjectWithinBrainActivationRange(object: number): boolean;
	export function registerWorldPointScriptBrain(scriptName: string, activationRange: number, p2: number): void;
	export function isWorldPointWithinBrainActivationRange(): boolean;
	export function enableScriptBrainSet(brainSet: number): void;
	export function disableScriptBrainSet(brainSet: number): void;
	export function _0x0B40ED49D7D6FF84(): void;
	export function _0x4D953DF78EBF8158(): void;
	export function _0x6D6840CEE8845831(action: string): void;
	export function _0x6E91B04E08773030(action: string): void;
	export function renderScriptCams(render: boolean, ease: boolean, easeTime: number, p3: boolean, p4: boolean, p5: number): void;
	export function renderFirstPersonCam(render: boolean, p1: number, p2: number, p3: number): void;
	export function createCam(camName: string, p1: boolean): number;
	export function createCamWithParams(camName: string, posX: number, posY: number, posZ: number, rotX: number, rotY: number, rotZ: number, fov: number, p8: boolean, p9: number): number;
	export function createCamera(camHash: number, p1: boolean): number;
	export function createCameraWithParams(camHash: number, posX: number, posY: number, posZ: number, rotX: number, rotY: number, rotZ: number, fov: number, p8: boolean, p9: number): number;
	export function destroyCam(cam: number, thisScriptCheck: boolean): void;
	export function destroyAllCams(thisScriptCheck: boolean): void;
	export function doesCamExist(cam: number): boolean;
	export function setCamActive(cam: number, active: boolean): void;
	export function isCamActive(cam: number): boolean;
	export function isCamRendering(cam: number): boolean;
	export function getRenderingCam(): number;
	export function getCamCoord(cam: number): Vector3;
	export function getCamRot(cam: number, rotationOrder: number): Vector3;
	export function getCamFov(cam: number): number;
	export function getCamNearClip(cam: number): number;
	export function getCamFarClip(cam: number): number;
	export function getCamFarDof(cam: number): number;
	export function setCamParams(cam: number, posX: number, posY: number, posZ: number, rotX: number, rotY: number, rotZ: number, fieldOfView: number, p8: number, p9: number, p10: number, p11: number): void;
	export function setCamCoord(cam: number, posX: number, posY: number, posZ: number): void;
	export function setCamRot(cam: number, rotX: number, rotY: number, rotZ: number, rotationOrder: number): void;
	export function setCamFov(cam: number, fieldOfView: number): void;
	export function setCamNearClip(cam: number, nearClip: number): void;
	export function setCamFarClip(cam: number, farClip: number): void;
	export function setCamMotionBlurStrength(cam: number, strength: number): void;
	export function setCamNearDof(cam: number, nearDOF: number): void;
	export function setCamFarDof(cam: number, farDOF: number): void;
	export function setCamDofStrength(cam: number, dofStrength: number): void;
	export function setCamDofPlanes(cam: number, p1: number, p2: number, p3: number, p4: number): void;
	export function setCamUseShallowDofMode(cam: number, toggle: boolean): void;
	export function setUseHiDof(): void;
	export function _0xF55E4046F6F831DC(p0: number, p1: number): void;
	export function _0xE111A7C0D200CBC5(p0: number, p1: number): void;
	export function setCamDofFnumberOfLens(camera: number, p1: number): void;
	export function _0x47B595D60664CFFA(p0: number, p1: number): void;
	export function setCamDofFocusDistanceBias(camera: number, p1: number): void;
	export function setCamDofMaxNearInFocusDistance(camera: number, p1: number): void;
	export function setCamDofMaxNearInFocusDistanceBlendLevel(camera: number, p1: number): void;
	export function attachCamToEntity(cam: number, entity: number, xOffset: number, yOffset: number, zOffset: number, isRelative: boolean): void;
	export function attachCamToPedBone(cam: number, ped: number, boneIndex: number, x: number, y: number, z: number, heading: boolean): void;
	export function attachCamToPedBone2(cam: number, ped: number, boneIndex: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: boolean): void;
	export function attachCamToVehicleBone(cam: number, vehicle: number, boneIndex: number, p3: boolean, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, p10: boolean): void;
	export function detachCam(cam: number): void;
	export function setCamInheritRollVehicle(cam: number, p1: boolean): void;
	export function pointCamAtCoord(cam: number, x: number, y: number, z: number): void;
	export function pointCamAtEntity(cam: number, entity: number, p2: number, p3: number, p4: number, p5: boolean): void;
	export function pointCamAtPedBone(cam: number, ped: number, boneIndex: number, x: number, y: number, z: number, p6: boolean): void;
	export function stopCamPointing(cam: number): void;
	export function setCamAffectsAiming(cam: number, toggle: boolean): void;
	export function _0x661B5C8654ADD825(cam: number, p1: boolean): void;
	export function _0xA2767257A320FC82(p0: number, p1: boolean): void;
	export function _0x271017B9BA825366(p0: number, p1: boolean): void;
	export function setCamDebugName(camera: number, name: string): void;
	export function addCamSplineNode(camera: number, x: number, y: number, z: number, xRot: number, yRot: number, zRot: number, length: number, p8: number, p9: number): void;
	export function addCamSplineNodeUsingCameraFrame(cam: number, cam2: number, p2: number, p3: number): void;
	export function addCamSplineNodeUsingCamera(cam: number, cam2: number, p2: number, p3: number): void;
	export function addCamSplineNodeUsingGameplayFrame(cam: number, p1: number, p2: number): void;
	export function setCamSplinePhase(cam: number, p1: number): void;
	export function getCamSplinePhase(cam: number): number;
	export function getCamSplineNodePhase(cam: number): number;
	export function setCamSplineDuration(cam: number, timeDuration: number): void;
	export function setCamSplineSmoothingStyle(cam: number, smoothingStyle: number): void;
	export function getCamSplineNodeIndex(cam: number): number;
	export function setCamSplineNodeEase(cam: number, p1: number, p2: number, p3: number): void;
	export function setCamSplineNodeVelocityScale(cam: number, p1: number, scale: number): void;
	export function overrideCamSplineVelocity(cam: number, p1: number, p2: number, p3: number): void;
	export function overrideCamSplineMotionBlur(cam: number, p1: number, p2: number, p3: number): void;
	export function setCamSplineNodeExtraFlags(cam: number, p1: number, flags: number): void;
	export function isCamSplinePaused(p0: number): boolean;
	export function setCamActiveWithInterp(camTo: number, camFrom: number, duration: number, easeLocation: number, easeRotation: number): void;
	export function isCamInterpolating(cam: number): boolean;
	export function shakeCam(cam: number, type: string, amplitude: number): void;
	export function animatedShakeCam(cam: number, p1: string, p2: string, p3: string, amplitude: number): void;
	export function isCamShaking(cam: number): boolean;
	export function setCamShakeAmplitude(cam: number, amplitude: number): void;
	export function stopCamShaking(cam: number, p1: boolean): void;
	export function shakeScriptGlobal(p0: string, p1: number): void;
	export function animatedShakeScriptGlobal(p0: string, p1: string, p2: string, p3: number): void;
	export function isScriptGlobalShaking(): boolean;
	export function stopScriptGlobalShaking(p0: boolean): void;
	export function playCamAnim(cam: number, animName: string, animDictionary: string, x: number, y: number, z: number, xRot: number, yRot: number, zRot: number, p9: boolean, p10: number): boolean;
	export function isCamPlayingAnim(cam: number, animName: string, animDictionary: string): boolean;
	export function setCamAnimCurrentPhase(cam: number, phase: number): void;
	export function getCamAnimCurrentPhase(cam: number): number;
	export function playSynchronizedCamAnim(p0: number, p1: number, animName: string, animDictionary: string): boolean;
	export function setFlyCamHorizontalResponse(cam: number, p1: number, p2: number, p3: number): void;
	export function _0xE827B9382CFB41BA(cam: number, p1: number, p2: number, p3: number): void;
	export function setFlyCamMaxHeight(cam: number, height: number): void;
	export function setFlyCamCoordAndConstrain(cam: number, x: number, y: number, z: number): void;
	export function _0xC8B5C4A79CC18B94(cam: number): void;
	export function _0x5C48A1D6E3B33179(cam: number): boolean;
	export function isScreenFadedOut(): boolean;
	export function isScreenFadedIn(): boolean;
	export function isScreenFadingOut(): boolean;
	export function isScreenFadingIn(): boolean;
	export function doScreenFadeIn(duration: number): void;
	export function doScreenFadeOut(duration: number): void;
	export function setWidescreenBorders(p0: boolean, p1: number): void;
	export function _0x4879E4FE39074CDF(): boolean;
	export function getGameplayCamCoord(): Vector3;
	export function getGameplayCamRot(rotationOrder: number): Vector3;
	export function getGameplayCamFov(): number;
	export function _0x487A82C650EB7799(p0: number): void;
	export function _0x0225778816FDC28C(p0: number): void;
	export function getGameplayCamRelativeHeading(): number;
	export function setGameplayCamRelativeHeading(heading: number): void;
	export function getGameplayCamRelativePitch(): number;
	export function setGameplayCamRelativePitch(x: number, Value2: number): void;
	export function _0x48608C3464F58AB4(p0: number, p1: number, p2: number): void;
	export function setGameplayCamRawYaw(yaw: number, p1: number): void;
	export function setGameplayCamRawPitch(pitch: number): void;
	export function _0x469F2ECDEC046337(p0: boolean): void;
	export function shakeGameplayCam(shakeName: string, intensity: number): void;
	export function isGameplayCamShaking(): boolean;
	export function setGameplayCamShakeAmplitude(amplitude: number): void;
	export function stopGameplayCamShaking(p0: boolean): void;
	export function _0x8BBACBF51DA047A8(p0: number): void;
	export function isGameplayCamRendering(): boolean;
	export function _0x3044240D2E0FA842(): boolean;
	export function _0x705A276EBFF3133D(): boolean;
	export function _0xDB90C6CCA48940F1(p0: boolean): void;
	export function enableCrosshairThisFrame(): void;
	export function isGameplayCamLookingBehind(): boolean;
	export function _0x2AED6301F67007D5(entity: number): void;
	export function _0x49482F9FCD825AAA(entity: number): void;
	export function _0xFD3151CD37EA2245(entity: number): void;
	export function _0xB1381B97F70C7B30(): void;
	export function _0xDD79DF9F4D26E1C9(): void;
	export function isSphereVisible(x: number, y: number, z: number, radius: number): boolean;
	export function isFollowPedCamActive(): boolean;
	export function setFollowPedCamThisUpdate(camName: string, p1: number): boolean;
	export function _0x271401846BD26E92(p0: boolean, p1: boolean): void;
	export function _0xC8391C309684595A(): void;
	export function clampGameplayCamYaw(minimum: number, maximum: number): void;
	export function clampGameplayCamPitch(minimum: number, maximum: number): void;
	export function animateGameplayCamZoom(p0: number, distance: number): void;
	export function _0xE9EA16D6E54CDCA4(p0: number, p1: number): void;
	export function disableFirstPersonCamThisFrame(): void;
	export function _0x59424BD75174C9B1(): void;
	export function getFollowPedCamZoomLevel(): number;
	export function getFollowPedCamViewMode(): number;
	export function setFollowPedCamViewMode(viewMode: number): void;
	export function isFollowVehicleCamActive(): boolean;
	export function _0x91EF6EE6419E5B97(p0: boolean): void;
	export function _0x9DFE13ECDC1EC196(p0: boolean, p1: boolean): void;
	export function getFollowVehicleCamZoomLevel(): number;
	export function setFollowVehicleCamZoomLevel(zoomLevel: number): void;
	export function getFollowVehicleCamViewMode(): number;
	export function setFollowVehicleCamViewMode(viewMode: number): void;
	export function _0xEE778F8C7E1142E2(p0: number): number;
	export function _0x2A2173E46DAECD12(p0: number, p1: number): void;
	export function _0x19CAFA3C87F7C2FF(): number;
	export function _0x6493CF69859B116A(): void;
	export function _0x425A920FDB9A0DDA(camName: string): void;
	export function _0x0AA27680A0BD43FA(): void;
	export function _0x5C90CAB09951A12F(p0: number): void;
	export function isAimCamActive(): boolean;
	export function isAimCamThirdPersonActive(): boolean;
	export function isFirstPersonAimCamActive(): boolean;
	export function disableAimCamThisUpdate(): void;
	export function getGameplayCamZoom(): number;
	export function _0x70894BD0915C5BCA(p0: number): void;
	export function _0xCED08CBE8EBB97C7(p0: number, p1: number): void;
	export function _0x2F7F2B26DD3F18EE(p0: number, p1: number): void;
	export function setFirstPersonCamPitchRange(p0: number, p1: number): void;
	export function setFirstPersonCamNearClip(p0: number): void;
	export function setThirdPersonAimCamNearClip(p0: number): void;
	export function _0x4008EDF7D6E48175(p0: boolean): void;
	export function _0x380B4968D1E09E55(): void;
	export function getGameplayCamCoords(): Vector3;
	export function getGameplayCamRot(rotationOrder: number): Vector3;
	export function _0x26903D9CD1175F2C(p0: number, p1: number): Vector3;
	export function _0x80EC114669DAEFF4(): number;
	export function _0x5F35F6732C3FBBA0(p0: number): number;
	export function getGameplayCamNearClip(): number;
	export function getGameplayCamFarClip(): number;
	export function getGameplayCamNearDof(): number;
	export function getGameplayCamFarDof(): number;
	export function getGameplayCamFarClip2(): number;
	export function setGameplayCoordHint(x: number, y: number, z: number, duration: number, blendOutDuration: number, blendInDuration: number, unk: number): void;
	export function setGameplayPedHint(p0: number, x1: number, y1: number, z1: number, p4: boolean, p5: number, p6: number, p7: number): void;
	export function setGameplayVehicleHint(p0: number, p1: number, p2: number, p3: number, p4: boolean, p5: number, p6: number, p7: number): void;
	export function setGameplayObjectHint(p0: number, p1: number, p2: number, p3: number, p4: boolean, p5: number, p6: number, p7: number): void;
	export function setGameplayEntityHint(entity: number, xOffset: number, yOffset: number, zOffset: number, p4: boolean, p5: number, p6: number, p7: number, p8: number): void;
	export function isGameplayHintActive(): boolean;
	export function stopGameplayHint(p0: boolean): void;
	export function _0xCCD078C2665D2973(p0: boolean): void;
	export function _0x247ACBC4ABBC9D1C(p0: boolean): void;
	export function _0xBF72910D0F26F025(): number;
	export function setGameplayHintFov(FOV: number): void;
	export function _0xF8BDBF3D573049A1(p0: number): void;
	export function _0xD1F8363DFAD03848(p0: number): void;
	export function _0x5D7B620DAE436138(p0: number): void;
	export function _0xC92717EF615B6704(p0: number): void;
	export function _0xE3433EADAAF7EE40(p0: boolean): void;
	export function setCinematicButtonActive(p0: boolean): void;
	export function isCinematicCamRendering(): boolean;
	export function shakeCinematicCam(p0: string, p1: number): void;
	export function isCinematicCamShaking(): boolean;
	export function setCinematicCamShakeAmplitude(p0: number): void;
	export function stopCinematicCamShaking(p0: boolean): void;
	export function disableVehicleFirstPersonCamThisFrame(): void;
	export function _0x62ECFCFDEE7885D6(): void;
	export function _0x9E4CFFF989258472(): void;
	export function invalidateIdleCam(): void;
	export function _0xCA9D2AA3E326D720(): boolean;
	export function isInVehicleCamDisabled(): boolean;
	export function createCinematicShot(p0: number, p1: number, p2: number, entity: number): void;
	export function isCinematicShotActive(p0: number): boolean;
	export function stopCinematicShot(p0: number): void;
	export function _0xA41BCD7213805AAC(p0: boolean): void;
	export function _0xDC9DA9E8789F5246(): void;
	export function setCinematicModeActive(p0: boolean): void;
	export function _0x1F2300CB7FA7B7F6(): number;
	export function _0x17FCA7199A530203(): number;
	export function _0xD7360051C885628B(): number;
	export function _0xF5F1E89A970B7796(): boolean;
	export function _0x7B8A361C1813FBEF(): void;
	export function stopCutsceneCamShaking(): void;
	export function _0x324C5AA411DA7737(p0: number): void;
	export function _0x12DED8CA53D47EA5(p0: number): void;
	export function getFocusPedOnScreen(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number): number;
	export function _0x5A43C76F7FC7BA5F(): void;
	export function setCamEffect(p0: number): void;
	export function _0x5C41E6BABC9E2112(p0: number): void;
	export function _0x21E253A7F8DA5DFB(vehicleName: string): void;
	export function _0x11FA5D3479C7DD47(p0: number): void;
	export function _0xEAF0FA793D05C592(): number;
	export function _0x62374889A4D59F72(): void;
	export function replayFreeCamGetMaxRange(): number;
	export function setClockTime(hour: number, minute: number, second: number): void;
	export function pauseClock(toggle: boolean): void;
	export function advanceClockTimeTo(hour: number, minute: number, second: number): void;
	export function addToClockTime(hours: number, minutes: number, seconds: number): void;
	export function getClockHours(): number;
	export function getClockMinutes(): number;
	export function getClockSeconds(): number;
	export function setClockDate(day: number, month: number, year: number): void;
	export function getClockDayOfWeek(): number;
	export function getClockDayOfMonth(): number;
	export function getClockMonth(): number;
	export function getClockYear(): number;
	export function getMillisecondsPerGameMinute(): number;
	export function getPosixTime(year: number, month: number, day: number, hour: number, minute: number, second: number): [void, number, number, number, number, number, number];
	export function getUtcTime(year: number, month: number, day: number, hour: number, minute: number, second: number): [void, number, number, number, number, number, number];
	export function getLocalTime(year: number, month: number, day: number, hour: number, minute: number, second: number): [void, number, number, number, number, number, number];
	export function requestCutscene(cutsceneName: string, flags: number): void;
	export function requestCutsceneWithPlaybackList(cutsceneName: string, playbackFlags: number, flags: number): void;
	export function removeCutscene(): void;
	export function hasCutsceneLoaded(): boolean;
	export function hasThisCutsceneLoaded(cutsceneName: string): boolean;
	export function _0x8D9DF6ECA8768583(threadId: number): void;
	export function canRequestAssetsForCutsceneEntity(): boolean;
	export function isCutscenePlaybackFlagSet(flag: number): boolean;
	export function setCutsceneEntityStreamingFlags(cutsceneEntName: string, p1: number, p2: number): void;
	export function requestCutFile(cutsceneName: string): void;
	export function hasCutFileLoaded(cutsceneName: string): boolean;
	export function removeCutFile(cutsceneName: string): void;
	export function getCutFileNumSections(cutsceneName: string): number;
	export function startCutscene(flags: number): void;
	export function startCutsceneAtCoords(x: number, y: number, z: number, flags: number): void;
	export function stopCutscene(p0: boolean): void;
	export function stopCutsceneImmediately(): void;
	export function setCutsceneOrigin(x: number, y: number, z: number, p3: number, p4: number): void;
	export function _0x011883F41211432A(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p6: number): void;
	export function getCutsceneTime(): number;
	export function getCutsceneTotalDuration(): number;
	export function wasCutsceneSkipped(): boolean;
	export function hasCutsceneFinished(): boolean;
	export function isCutsceneActive(): boolean;
	export function isCutscenePlaying(): boolean;
	export function getCutsceneSectionPlaying(): number;
	export function getEntityIndexOfCutsceneEntity(cutsceneEntName: string, modelHash: number): number;
	export function _0x583DF8E3D4AFBD98(): number;
	export function _0x4CEBC1ED31E8925E(cutsceneName: string): boolean;
	export function _0x4FCD976DA686580C(p0: number): number;
	export function registerEntityForCutscene(cutscenePed: number, cutsceneEntName: string, p2: number, modelHash: number, p4: number): void;
	export function getEntityIndexOfRegisteredEntity(cutsceneEntName: string, modelHash: number): number;
	export function _0x7F96F23FA9B73327(modelHash: number): void;
	export function setCutsceneTriggerArea(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): void;
	export function canSetEnterStateForRegisteredEntity(cutsceneEntName: string, modelHash: number): boolean;
	export function canSetExitStateForRegisteredEntity(cutsceneEntName: string, modelHash: number): boolean;
	export function canSetExitStateForCamera(p0: boolean): boolean;
	export function _0xC61B86C9F61EB404(toggle: boolean): void;
	export function setCutsceneFadeValues(p0: boolean, p1: boolean, p2: boolean, p3: boolean): void;
	export function _0x20746F7B1032A3C7(p0: boolean, p1: boolean, p2: boolean, p3: boolean): void;
	export function _0x06EE9048FD080382(p0: boolean): void;
	export function _0xA0FE76168A189DDB(): number;
	export function _0x2F137B508DE238F2(p0: boolean): void;
	export function _0xE36A98D8AB3D3C66(p0: boolean): void;
	export function _0x5EDEF0CF8C1DAB3C(): number;
	export function _0x41FAA8FB2ECE8720(p0: boolean): void;
	export function registerSynchronisedScriptSpeech(): void;
	export function setCutscenePedComponentVariation(cutsceneEntName: string, p1: number, p2: number, p3: number, modelHash: number): void;
	export function setCutscenePedComponentVariationFromPed(cutsceneEntName: string, ped: number, modelHash: number): void;
	export function doesCutsceneEntityExist(cutsceneEntName: string, modelHash: number): boolean;
	export function setCutscenePedPropVariation(cutsceneEntName: string, p1: number, p2: number, p3: number, modelHash: number): void;
	export function _0x708BDD8CD795B043(): boolean;
	export function datafileWatchRequestId(id: number): void;
	export function datafileClearWatchList(): void;
	export function _0xFCCAE5B92A830878(index: number): boolean;
	export function _0x15FF52B809DB2353(p0: number): boolean;
	export function _0xF8CC1EBE0B62E29F(p0: number): boolean;
	export function _0x22DA66936E0FFF37(p0: number): boolean;
	export function _0x8F5EA1C01D65A100(p0: number): boolean;
	export function ugcCreateContent(data: number, dataCount: number, contentName: string, description: string, tagsCsv: string, contentTypeName: string, publish: boolean): [boolean, number];
	export function ugcCreateMission(contentName: string, description: string, tagsCsv: string, contentTypeName: string, publish: boolean): boolean;
	export function ugcUpdateContent(contentId: string, data: number, dataCount: number, contentName: string, description: string, tagsCsv: string, contentTypeName: string): [boolean, number];
	export function ugcUpdateMission(contentId: string, contentName: string, description: string, tagsCsv: string, contentTypeName: string): boolean;
	export function ugcSetPlayerData(contentId: string, rating: number, contentTypeName: string): boolean;
	export function _0xA69AC4ADE82B57A4(p0: number): boolean;
	export function _0x9CB0BFA7A9342C3D(p0: number, p1: boolean): boolean;
	export function _0x52818819057F2B40(p0: number): boolean;
	export function _0x01095C95CD46B624(p0: number): boolean;
	export function loadUgcFile(filename: string): boolean;
	export function datafileCreate(): void;
	export function datafileDelete(): void;
	export function _0x2ED61456317B8178(): void;
	export function _0xC55854C7D7274882(): void;
	export function datafileGetFileDict(): string;
	export function datafileStartSaveToCloud(filename: string): boolean;
	export function _0x4DFDD9EB705F8140(p0: boolean): [boolean, boolean];
	export function datafileIsSavePending(): boolean;
	export function objectValueAddBoolean(objectData: number, key: string, value: boolean): [void, number];
	export function objectValueAddInteger(objectData: number, key: string, value: number): [void, number];
	export function objectValueAddFloat(objectData: number, key: string, value: number): [void, number];
	export function objectValueAddString(objectData: number, key: string, value: string): [void, number];
	export function objectValueAddVector3(objectData: number, key: string, valueX: number, valueY: number, valueZ: number): [void, number];
	export function objectValueAddObject(objectData: number, key: string): [number, number];
	export function objectValueAddArray(objectData: number, key: string): [number, number];
	export function objectValueGetBoolean(objectData: number, key: string): [boolean, number];
	export function objectValueGetInteger(objectData: number, key: string): [number, number];
	export function objectValueGetFloat(objectData: number, key: string): [number, number];
	export function objectValueGetString(objectData: number, key: string): [string, number];
	export function objectValueGetVector3(objectData: number, key: string): [Vector3, number];
	export function objectValueGetObject(objectData: number, key: string): [number, number];
	export function objectValueGetArray(objectData: number, key: string): [number, number];
	export function objectValueGetType(objectData: number, key: string): [number, number];
	export function arrayValueAddBoolean(arrayData: number, value: boolean): [void, number];
	export function arrayValueAddInteger(arrayData: number, value: number): [void, number];
	export function arrayValueAddFloat(arrayData: number, value: number): [void, number];
	export function arrayValueAddString(arrayData: number, value: string): [void, number];
	export function arrayValueAddVector3(arrayData: number, valueX: number, valueY: number, valueZ: number): [void, number];
	export function arrayValueAddObject(arrayData: number): [number, number];
	export function arrayValueGetBoolean(arrayData: number, arrayIndex: number): [boolean, number];
	export function arrayValueGetInteger(arrayData: number, arrayIndex: number): [number, number];
	export function arrayValueGetFloat(arrayData: number, arrayIndex: number): [number, number];
	export function arrayValueGetString(arrayData: number, arrayIndex: number): [string, number];
	export function arrayValueGetVector3(arrayData: number, arrayIndex: number): [Vector3, number];
	export function arrayValueGetObject(arrayData: number, arrayIndex: number): [number, number];
	export function arrayValueGetSize(arrayData: number): [number, number];
	export function arrayValueGetType(arrayData: number, arrayIndex: number): [number, number];
	export function decorSetTime(entity: number, propertyName: string, timestamp: number): boolean;
	export function decorSetBool(entity: number, propertyName: string, value: boolean): boolean;
	export function decorSetFloat(entity: number, propertyName: string, value: number): boolean;
	export function decorSetInt(entity: number, propertyName: string, value: number): boolean;
	export function decorGetBool(entity: number, propertyName: string): boolean;
	export function decorGetFloat(entity: number, propertyName: string): number;
	export function decorGetInt(entity: number, propertyName: string): number;
	export function decorExistOn(entity: number, propertyName: string): boolean;
	export function decorRemove(entity: number, propertyName: string): boolean;
	export function decorRegister(propertyName: string, type: number): void;
	export function decorIsRegisteredAsType(propertyName: string, type: number): boolean;
	export function decorRegisterLock(): void;
	export function _0x241FCA5B1AA14F75(): boolean;
	export function isDlcPresent(dlcHash: number): boolean;
	export function _0xF2E07819EF1A5289(): boolean;
	export function _0x9489659372A81585(): boolean;
	export function _0xA213B11DFF526300(): boolean;
	export function getExtraContentPackHasBeenInstalled(): boolean;
	export function getIsLoadingScreenActive(): boolean;
	export function hasCloudRequestsFinished(p0: boolean, unused: number): [boolean, boolean];
	export function loadSpDlcMaps(): void;
	export function loadMpDlcMaps(): void;
	export function doesEntityExist(entity: number): boolean;
	export function doesEntityBelongToThisScript(entity: number, p1: boolean): boolean;
	export function doesEntityHaveDrawable(entity: number): boolean;
	export function doesEntityHavePhysics(entity: number): boolean;
	export function hasEntityAnimFinished(entity: number, animDict: string, animName: string, p3: number): boolean;
	export function hasEntityBeenDamagedByAnyObject(entity: number): boolean;
	export function hasEntityBeenDamagedByAnyPed(entity: number): boolean;
	export function hasEntityBeenDamagedByAnyVehicle(entity: number): boolean;
	export function hasEntityBeenDamagedByEntity(entity1: number, entity2: number, p2: boolean): boolean;
	export function hasEntityClearLosToEntity(entity1: number, entity2: number, traceType: number): boolean;
	export function hasEntityClearLosToEntityInFront(entity1: number, entity2: number): boolean;
	export function hasEntityCollidedWithAnything(entity: number): boolean;
	export function getLastMaterialHitByEntity(entity: number): number;
	export function getCollisionNormalOfLastHitForEntity(entity: number): Vector3;
	export function forceEntityAiAndAnimationUpdate(entity: number): void;
	export function getEntityAnimCurrentTime(entity: number, animDict: string, animName: string): number;
	export function getEntityAnimTotalTime(entity: number, animDict: string, animName: string): number;
	export function getAnimDuration(animDict: string, animName: string): number;
	export function getEntityAttachedTo(entity: number): number;
	export function getEntityCoords(entity: number, alive: boolean): Vector3;
	export function getEntityForwardVector(entity: number): Vector3;
	export function getEntityForwardX(entity: number): number;
	export function getEntityForwardY(entity: number): number;
	export function getEntityHeading(entity: number): number;
	export function getEntityPhysicsHeading(entity: number): number;
	export function getEntityHealth(entity: number): number;
	export function getEntityMaxHealth(entity: number): number;
	export function setEntityMaxHealth(entity: number, value: number): void;
	export function getEntityHeight(entity: number, X: number, Y: number, Z: number, atTop: boolean, inWorldCoords: boolean): number;
	export function getEntityHeightAboveGround(entity: number): number;
	export function getEntityMatrix(entity: number, rightVector: vectorPtr, forwardVector: vectorPtr, upVector: vectorPtr, position: vectorPtr): [void, vectorPtr, vectorPtr, vectorPtr, vectorPtr];
	export function getEntityModel(entity: number): number;
	export function getOffsetFromEntityGivenWorldCoords(entity: number, posX: number, posY: number, posZ: number): Vector3;
	export function getOffsetFromEntityInWorldCoords(entity: number, offsetX: number, offsetY: number, offsetZ: number): Vector3;
	export function getEntityPitch(entity: number): number;
	export function getEntityQuaternion(entity: number, x: number, y: number, z: number, w: number): [void, number, number, number, number];
	export function getEntityRoll(entity: number): number;
	export function getEntityRotation(entity: number, rotationOrder: number): Vector3;
	export function getEntityRotationVelocity(entity: number): Vector3;
	export function getEntityScript(entity: number, script: number): [string, number];
	export function getEntitySpeed(entity: number): number;
	export function getEntitySpeedVector(entity: number, relative: boolean): Vector3;
	export function getEntityUprightValue(entity: number): number;
	export function getEntityVelocity(entity: number): Vector3;
	export function getObjectIndexFromEntityIndex(entity: number): number;
	export function getPedIndexFromEntityIndex(entity: number): number;
	export function getVehicleIndexFromEntityIndex(entity: number): number;
	export function getWorldPositionOfEntityBone(entity: number, boneIndex: number): Vector3;
	export function getNearestPlayerToEntity(entity: number): number;
	export function getNearestPlayerToEntityOnTeam(entity: number, team: number): number;
	export function getEntityType(entity: number): number;
	export function getEntityPopulationType(entity: number): number;
	export function isAnEntity(handle: number): boolean;
	export function isEntityAPed(entity: number): boolean;
	export function isEntityAMissionEntity(entity: number): boolean;
	export function isEntityAVehicle(entity: number): boolean;
	export function isEntityAnObject(entity: number): boolean;
	export function isEntityAtCoord(entity: number, xPos: number, yPos: number, zPos: number, xSize: number, ySize: number, zSize: number, p7: boolean, p8: boolean, p9: number): boolean;
	export function isEntityAtEntity(entity1: number, entity2: number, xSize: number, ySize: number, zSize: number, p5: boolean, p6: boolean, p7: number): boolean;
	export function isEntityAttached(entity: number): boolean;
	export function isEntityAttachedToAnyObject(entity: number): boolean;
	export function isEntityAttachedToAnyPed(entity: number): boolean;
	export function isEntityAttachedToAnyVehicle(entity: number): boolean;
	export function isEntityAttachedToEntity(from: number, to: number): boolean;
	export function isEntityDead(entity: number, p1: boolean): boolean;
	export function isEntityInAir(entity: number): boolean;
	export function isEntityInAngledArea(entity: number, originX: number, originY: number, originZ: number, edgeX: number, edgeY: number, edgeZ: number, angle: number, p8: boolean, p9: boolean, p10: number): boolean;
	export function isEntityInArea(entity: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p7: boolean, p8: boolean, p9: number): boolean;
	export function isEntityInZone(entity: number, zone: string): boolean;
	export function isEntityInWater(entity: number): boolean;
	export function getEntitySubmergedLevel(entity: number): number;
	export function _0x694E00132F2823ED(entity: number, toggle: boolean): void;
	export function isEntityOnScreen(entity: number): boolean;
	export function isEntityPlayingAnim(entity: number, animDict: string, animName: string, taskFlag: number): boolean;
	export function isEntityStatic(entity: number): boolean;
	export function isEntityTouchingEntity(entity: number, targetEntity: number): boolean;
	export function isEntityTouchingModel(entity: number, modelHash: number): boolean;
	export function isEntityUpright(entity: number, angle: number): boolean;
	export function isEntityUpsidedown(entity: number): boolean;
	export function isEntityVisible(entity: number): boolean;
	export function isEntityVisibleToScript(entity: number): boolean;
	export function isEntityOccluded(entity: number): boolean;
	export function wouldEntityBeOccluded(entityModelHash: number, x: number, y: number, z: number, p4: boolean): boolean;
	export function isEntityWaitingForWorldCollision(entity: number): boolean;
	export function applyForceToEntityCenterOfMass(entity: number, forceType: number, x: number, y: number, z: number, p5: boolean, isDirectionRel: boolean, isForceRel: boolean, p8: boolean): void;
	export function applyForceToEntity(entity: number, forceFlags: number, x: number, y: number, z: number, offX: number, offY: number, offZ: number, boneIndex: number, isDirectionRel: boolean, ignoreUpVec: boolean, isForceRel: boolean, p12: boolean, p13: boolean): void;
	export function attachEntityToEntity(entity1: number, entity2: number, boneIndex: number, xPos: number, yPos: number, zPos: number, xRot: number, yRot: number, zRot: number, p9: boolean, useSoftPinning: boolean, collision: boolean, isPed: boolean, vertexIndex: number, fixedRot: boolean): void;
	export function _0x5C48B75732C8456C(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): void;
	export function _0xFD1695C5D3B05439(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): void;
	export function attachEntityToEntityPhysically(entity1: number, entity2: number, boneIndex1: number, boneIndex2: number, xPos1: number, yPos1: number, zPos1: number, xPos2: number, yPos2: number, zPos2: number, xRot: number, yRot: number, zRot: number, breakForce: number, fixedRot: boolean, p15: boolean, collision: boolean, p17: boolean, p18: number): void;
	export function processEntityAttachments(entity: number): void;
	export function getEntityBoneIndexByName(entity: number, boneName: string): number;
	export function clearEntityLastDamageEntity(entity: number): void;
	export function deleteEntity(entity: number): [void, number];
	export function detachEntity(entity: number, p1: boolean, collision: boolean): void;
	export function freezeEntityPosition(entity: number, toggle: boolean): void;
	export function setEntitySomething(entity: number, toggle: boolean): void;
	export function playEntityAnim(entity: number, animName: string, animDict: string, p3: number, loop: boolean, stayInAnim: boolean, p6: boolean, delta: number, bitset: number): boolean;
	export function playSynchronizedEntityAnim(entity: number, syncedScene: number, animation: string, propName: string, p4: number, p5: number, p6: number, p7: number): boolean;
	export function playSynchronizedMapEntityAnim(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, p10: number, p11: number): [boolean, number, number];
	export function stopSynchronizedMapEntityAnim(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): boolean;
	export function stopEntityAnim(entity: number, animation: string, animGroup: string, p3: number): number;
	export function stopSynchronizedEntityAnim(entity: number, p1: number, p2: boolean): boolean;
	export function hasAnimEventFired(entity: number, actionHash: number): boolean;
	export function findAnimEventPhase(animDictionary: string, animName: string, p2: string, p3: number, p4: number): [boolean, number, number];
	export function setEntityAnimCurrentTime(entity: number, animDictionary: string, animName: string, time: number): void;
	export function setEntityAnimSpeed(entity: number, animDictionary: string, animName: string, speedMultiplier: number): void;
	export function setEntityAsMissionEntity(entity: number, p1: boolean, p2: boolean): void;
	export function setEntityAsNoLongerNeeded(entity: number): [void, number];
	export function setPedAsNoLongerNeeded(ped: number): [void, number];
	export function setVehicleAsNoLongerNeeded(vehicle: number): [void, number];
	export function setObjectAsNoLongerNeeded(object: number): [void, number];
	export function setEntityCanBeDamaged(entity: number, toggle: boolean): void;
	export function getEntityCanBeDamaged(entity: number): boolean;
	export function setEntityCanBeDamagedByRelationshipGroup(entity: number, bCanBeDamaged: boolean, relGroup: number): void;
	export function _0x352E2B5CF420BF3B(p0: number, p1: number): void;
	export function setEntityCanBeTargetedWithoutLos(entity: number, toggle: boolean): void;
	export function setEntityCollision(entity: number, toggle: boolean, keepPhysics: boolean): void;
	export function getEntityCollisionDisabled(entity: number): boolean;
	export function setEntityCompletelyDisableCollision(entity: number, p1: boolean, p2: boolean): void;
	export function setEntityCoords(entity: number, xPos: number, yPos: number, zPos: number, xAxis: boolean, yAxis: boolean, zAxis: boolean, clearArea: boolean): void;
	export function setEntityCoords2(entity: number, xPos: number, yPos: number, zPos: number, xAxis: boolean, yAxis: boolean, zAxis: boolean, clearArea: boolean): void;
	export function setEntityCoordsNoOffset(entity: number, xPos: number, yPos: number, zPos: number, xAxis: boolean, yAxis: boolean, zAxis: boolean): void;
	export function setEntityDynamic(entity: number, toggle: boolean): void;
	export function setEntityHeading(entity: number, heading: number): void;
	export function setEntityHealth(entity: number, health: number, p2: number): void;
	export function setEntityInvincible(entity: number, toggle: boolean): void;
	export function setEntityIsTargetPriority(entity: number, p1: boolean, p2: number): void;
	export function setEntityLights(entity: number, toggle: boolean): void;
	export function setEntityLoadCollisionFlag(entity: number, toggle: boolean, p2: number): void;
	export function hasCollisionLoadedAroundEntity(entity: number): boolean;
	export function setEntityMaxSpeed(entity: number, speed: number): void;
	export function setEntityOnlyDamagedByPlayer(entity: number, toggle: boolean): void;
	export function setEntityOnlyDamagedByRelationshipGroup(entity: number, p1: boolean, p2: number): void;
	export function setEntityProofs(entity: number, bulletProof: boolean, fireProof: boolean, explosionProof: boolean, collisionProof: boolean, meleeProof: boolean, p6: boolean, p7: boolean, drownProof: boolean): void;
	export function getEntityProofs(entity: number, bulletProof: boolean, fireProof: boolean, explosionProof: boolean, collisionProof: boolean, meleeProof: boolean, p6: boolean, p7: boolean, drownProof: boolean): [boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean];
	export function setEntityQuaternion(entity: number, x: number, y: number, z: number, w: number): void;
	export function setEntityRecordsCollisions(entity: number, toggle: boolean): void;
	export function setEntityRotation(entity: number, pitch: number, roll: number, yaw: number, rotationOrder: number, p5: boolean): void;
	export function setEntityVisible(entity: number, toggle: boolean, unk: boolean): void;
	export function _0xC34BC448DA29F5E9(entity: number, toggle: boolean): void;
	export function setEntityVelocity(entity: number, x: number, y: number, z: number): void;
	export function setEntityHasGravity(entity: number, toggle: boolean): void;
	export function setEntityLodDist(entity: number, value: number): void;
	export function getEntityLodDist(entity: number): number;
	export function setEntityAlpha(entity: number, alphaLevel: number, skin: boolean): void;
	export function getEntityAlpha(entity: number): number;
	export function resetEntityAlpha(entity: number): void;
	export function _0x490861B88F4FD846(p0: number): void;
	export function _0xCEA7C8E1B48FF68C(p0: number, p1: number): void;
	export function _0x5C3B791D580E0BC2(entity: number, p1: number): void;
	export function setEntityAlwaysPrerender(entity: number, toggle: boolean): void;
	export function setEntityRenderScorched(entity: number, toggle: boolean): void;
	export function setEntityTrafficlightOverride(entity: number, state: number): void;
	export function _0x78E8E3A640178255(entity: number): void;
	export function createModelSwap(x: number, y: number, z: number, radius: number, originalModel: number, newModel: number, p6: boolean): void;
	export function removeModelSwap(x: number, y: number, z: number, radius: number, originalModel: number, newModel: number, p6: boolean): void;
	export function createModelHide(x: number, y: number, z: number, radius: number, model: number, p5: boolean): void;
	export function createModelHideExcludingScriptObjects(x: number, y: number, z: number, radius: number, model: number, p5: boolean): void;
	export function removeModelHide(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): void;
	export function createForcedObject(x: number, y: number, z: number, p3: number, modelHash: number, p5: boolean): void;
	export function removeForcedObject(p0: number, p1: number, p2: number, p3: number, p4: number): void;
	export function setEntityNoCollisionEntity(entity1: number, entity2: number, thisFrameOnly: boolean): void;
	export function setEntityMotionBlur(entity: number, toggle: boolean): void;
	export function _0xE12ABE5E3A389A6C(entity: number, p1: boolean): void;
	export function _0xA80AE305E0A3044F(entity: number, p1: boolean): void;
	export function _0xDC6F8601FAF2E893(entity: number, toggle: boolean): void;
	export function _0x2C2E3DC128F44309(entity: number, p1: boolean): void;
	export function _0x1A092BB0C3808B96(entity: number, p1: boolean): void;
	export function _0xCE6294A232D03786(p0: number, p1: number): number;
	export function _0x46F8696933A63C9B(p0: number, p1: number): number;
	export function _0xB328DCC3A3AA401B(p0: number): number;
	export function enableEntityUnk(entity: number): void;
	export function _0xB17BC6453F6CF5AC(p0: number, p1: number): void;
	export function _0x68B562E124CC0AEF(p0: number, p1: number): void;
	export function _0x36F32DE87082343E(p0: number, p1: number): void;
	export function getEntityPickup(entity: number, modelHash: number): number;
	export function _0xD7B80E7C3BEFC396(p0: number, p1: number): void;
	export function setDecisionMaker(ped: number, name: number): void;
	export function clearDecisionMakerEventResponse(name: number, type: number): void;
	export function blockDecisionMakerEvent(name: number, type: number): void;
	export function unblockDecisionMakerEvent(name: number, type: number): void;
	export function addShockingEventAtPosition(type: number, x: number, y: number, z: number, duration: number): number;
	export function addShockingEventForEntity(type: number, entity: number, duration: number): number;
	export function isShockingEventInSphere(type: number, x: number, y: number, z: number, radius: number): boolean;
	export function removeShockingEvent(event: number): boolean;
	export function removeAllShockingEvents(p0: boolean): void;
	export function removeShockingEventSpawnBlockingAreas(): void;
	export function suppressShockingEventsNextFrame(): void;
	export function suppressShockingEventTypeNextFrame(type: number): void;
	export function suppressAgitationEventsNextFrame(): void;
	export function getNumDecorations(character: number): number;
	export function getTattooCollectionData(character: number, index: number, outComponent: number): [boolean, number];
	export function initShopPedComponent(outComponent: number): [void, number];
	export function initShopPedProp(outProp: number): [void, number];
	export function _0x50F457823CE6EB5F(p0: number, p1: number, p2: number, p3: number): number;
	export function getNumPropsFromOutfit(character: number, p1: number, p2: number, p3: boolean, p4: number, componentId: number): number;
	export function getShopPedQueryComponent(componentId: number, outComponent: number): [void, number];
	export function getShopPedComponent(componentHash: number, outComponent: number): [void, number];
	export function getShopPedQueryProp(p0: number, p1: number): [void, number];
	export function getShopPedProp(componentHash: number, outProp: number): [void, number];
	export function getHashNameForComponent(entity: number, componentId: number, drawableVariant: number, textureVariant: number): number;
	export function getHashNameForProp(entity: number, componentId: number, propIndex: number, propTextureIndex: number): number;
	export function getItemVariantsCount(componentHash: number): number;
	export function getNumDlcPedPropsUnk(propHash: number): number;
	export function getVariantComponent(componentHash: number, componentId: number, p2: number, p3: number, p4: number): [void, number, number, number];
	export function _0xD81B7F27BC773E66(p0: number, p1: number, p2: number, p3: number, p4: number): void;
	export function getNumForcedComponents(componentHash: number): number;
	export function _0x017568A8182D98A6(p0: number): number;
	export function getForcedComponent(componentHash: number, componentId: number, nameHash: number, enumValue: number, componentType: number): [void, number, number, number];
	export function _0xE1CA84EBF72E691D(p0: number, p1: number, p2: number, p3: number, p4: number): [void, number, number, number];
	export function isTagRestricted(componentHash: number, drawableSlotHash: number, componentId: number): boolean;
	export function _0xF3FBE2D50A6A8C28(character: number, p1: boolean): number;
	export function getShopPedQueryOutfit(p0: number, outfit: number): [void, number];
	export function getShopPedOutfit(p0: number, p1: number): [void, number];
	export function getShopPedOutfitLocate(p0: number): number;
	export function getShopPedOutfitPropVariant(outfit: number, slot: number, item: number): [boolean, number];
	export function getShopPedOutfitComponentVariant(outfit: number, slot: number, item: number): [boolean, number];
	export function getNumDlcVehicles(): number;
	export function getDlcVehicleModel(dlcVehicleIndex: number): number;
	export function getDlcVehicleData(dlcVehicleIndex: number, outData: number): [boolean, number];
	export function getDlcVehicleFlags(dlcVehicleIndex: number): number;
	export function getNumDlcWeapons(): number;
	export function getDlcWeaponData(dlcWeaponIndex: number, outData: number): [boolean, number];
	export function getNumDlcWeaponComponents(dlcWeaponIndex: number): number;
	export function getDlcWeaponComponentData(dlcWeaponIndex: number, dlcWeapCompIndex: number, ComponentDataPtr: number): [boolean, number];
	export function isContentItemLocked(itemHash: number): boolean;
	export function isDlcVehicleMod(hash: number): boolean;
	export function getDlcVehicleModLockHash(hash: number): number;
	export function loadContentChangeSetGroup(hash: number): void;
	export function unloadContentChangeSetGroup(hash: number): void;
	export function startScriptFire(X: number, Y: number, Z: number, maxChildren: number, isGasFire: boolean): number;
	export function removeScriptFire(fireHandle: number): void;
	export function startEntityFire(entity: number): number;
	export function stopEntityFire(entity: number): void;
	export function isEntityOnFire(entity: number): boolean;
	export function getNumberOfFiresInRange(x: number, y: number, z: number, radius: number): number;
	export function stopFireInRange(x: number, y: number, z: number, radius: number): void;
	export function getClosestFirePos(outPosition: vectorPtr, x: number, y: number, z: number): [boolean, vectorPtr];
	export function addExplosion(x: number, y: number, z: number, explosionType: number, damageScale: number, isAudible: boolean, isInvisible: boolean, cameraShake: number, noDamage: boolean): void;
	export function addOwnedExplosion(ped: number, x: number, y: number, z: number, explosionType: number, damageScale: number, isAudible: boolean, isInvisible: boolean, cameraShake: number): void;
	export function addExplosionWithUserVfx(x: number, y: number, z: number, explosionType: number, explosionFx: number, damageScale: number, isAudible: boolean, isInvisible: boolean, cameraShake: number): void;
	export function isExplosionInArea(explosionType: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): boolean;
	export function _0x6070104B699B2EF4(explosionType: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): boolean;
	export function isExplosionInSphere(explosionType: number, x: number, y: number, z: number, radius: number): boolean;
	export function getEntityInsideExplosionSphere(explosionType: number, x: number, y: number, z: number, radius: number): number;
	export function isExplosionInAngledArea(explosionType: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, angle: number): boolean;
	export function getEntityInsideExplosionArea(explosionType: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, radius: number): number;
	export function setDebugLinesAndSpheresDrawingActive(enabled: boolean): void;
	export function drawDebugLine(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number): void;
	export function drawDebugLineWithTwoColours(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, r1: number, g1: number, b1: number, r2: number, g2: number, b2: number, alpha1: number, alpha2: number): void;
	export function drawDebugSphere(x: number, y: number, z: number, radius: number, red: number, green: number, blue: number, alpha: number): void;
	export function drawDebugBox(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number): void;
	export function drawDebugCross(x: number, y: number, z: number, size: number, red: number, green: number, blue: number, alpha: number): void;
	export function drawDebugText(text: string, x: number, y: number, z: number, red: number, green: number, blue: number, alpha: number): void;
	export function drawDebugText2d(text: string, x: number, y: number, z: number, red: number, green: number, blue: number, alpha: number): void;
	export function drawLine(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, red: number, green: number, blue: number, alpha: number): void;
	export function drawPoly(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, x3: number, y3: number, z3: number, red: number, green: number, blue: number, alpha: number): void;
	export function _0x29280002282F1928(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, p10: number, p11: number, p12: number, p13: number, p14: number, p15: number, p16: number, p17: number, p18: number, p19: number, p20: number, p21: number, p22: number, p23: number): void;
	export function _0x736D7AA1B750856B(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, p10: number, p11: number, p12: number, p13: number, p14: number, p15: number, p16: number, p17: number, p18: number, p19: number, p20: number, p21: number, p22: number, p23: number, p24: number, p25: number, p26: number, p27: number, p28: number, p29: number, p30: number, p31: number): void;
	export function drawBox(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, red: number, green: number, blue: number, alpha: number): void;
	export function _0x23BA6B0C2AD7B0D3(p0: boolean): void;
	export function _0xC5C8F970D4EDFF71(p0: number): void;
	export function _0x1DD2139A9A20DCE8(): number;
	export function _0x90A78ECAA4E78453(): number;
	export function _0x0A46AF8A78DC5E0A(): void;
	export function _0x4862437A486F91B0(p0: number, p1: number, p2: number, p3: number): [boolean, number];
	export function _0x1670F8D05056F257(p0: number): [number, number];
	export function _0x7FA5D82B8F58EC06(): number;
	export function _0x5B0316762AFD4A64(): number;
	export function _0x346EF3ECAAAB149E(): void;
	export function _0xA67C35C56EB1BD9D(): number;
	export function _0x0D6CA79EEEBD8CA3(): number;
	export function _0xD801CC02177FA3F1(): void;
	export function _0x1BBC135A4D25EDDE(p0: boolean): void;
	export function _0xF3F776ADA161E47D(p0: number, p1: number): void;
	export function _0x3DEC726C25A11BAC(p0: number): number;
	export function _0x0C0C4E81E1AC60A0(): number;
	export function _0x759650634F07B6B4(p0: number): boolean;
	export function _0xCB82A0BF0E3E3265(p0: number): number;
	export function _0x6A12D88881435DCA(): void;
	export function _0x1072F115DAB0717E(p0: boolean, p1: boolean): void;
	export function getMaximumNumberOfPhotos(): number;
	export function getMaximumNumberOfCloudPhotos(): number;
	export function getCurrentNumberOfPhotos(): number;
	export function _0x2A893980E96B659A(p0: number): number;
	export function _0xF5BED327CEA362B1(p0: number): number;
	export function _0x4AF92ACD3141D96C(): void;
	export function _0xE791DF1F73ED2C8B(p0: number): number;
	export function _0xEC72C258667BE5EA(p0: number): number;
	export function returnTwo(p0: number): number;
	export function drawLightWithRangeAndShadow(x: number, y: number, z: number, r: number, g: number, b: number, range: number, intensity: number, shadow: number): void;
	export function drawLightWithRange(posX: number, posY: number, posZ: number, colorR: number, colorG: number, colorB: number, range: number, intensity: number): void;
	export function drawSpotLight(posX: number, posY: number, posZ: number, dirX: number, dirY: number, dirZ: number, colorR: number, colorG: number, colorB: number, distance: number, brightness: number, hardness: number, radius: number, falloff: number): void;
	export function drawSpotLightWithShadow(posX: number, posY: number, posZ: number, dirX: number, dirY: number, dirZ: number, colorR: number, colorG: number, colorB: number, distance: number, brightness: number, roundness: number, radius: number, falloff: number, shadowId: number): void;
	export function _0xC9B18B4619F48F7B(p0: number): void;
	export function updateEntityShitOrSomething(object: number): void;
	export function _0x9641588DAB93B4B5(p0: number): void;
	export function _0x393BD2275CEB7793(): number;
	export function drawMarker(type: number, posX: number, posY: number, posZ: number, dirX: number, dirY: number, dirZ: number, rotX: number, rotY: number, rotZ: number, scaleX: number, scaleY: number, scaleZ: number, red: number, green: number, blue: number, alpha: number, bobUpAndDown: boolean, faceCamera: boolean, p19: number, rotate: boolean, textureDict: string, textureName: string, drawOnEnts: boolean): void;
	export function _0xE82728F0DE75D13A(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, p10: number, p11: number, p12: number, p13: number, p14: number, p15: number, p16: number, p17: number, p18: number, p19: number, p20: number, p21: number, p22: number, p23: number, p24: number, p25: number): void;
	export function _0x799017F9E3B10112(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number): void;
	export function createCheckpoint(type: number, posX1: number, posY1: number, posZ1: number, posX2: number, posY2: number, posZ2: number, radius: number, red: number, green: number, blue: number, alpha: number, reserved: number): number;
	export function setCheckpointScale(checkpoint: number, p0: number): void;
	export function _0x44621483FF966526(p0: number, p1: number): void;
	export function setCheckpointCylinderHeight(checkpoint: number, nearHeight: number, farHeight: number, radius: number): void;
	export function setCheckpointRgba(checkpoint: number, red: number, green: number, blue: number, alpha: number): void;
	export function setCheckpointIconRgba(checkpoint: number, red: number, green: number, blue: number, alpha: number): void;
	export function _0xF51D36185993515D(checkpoint: number, posX: number, posY: number, posZ: number, unkX: number, unkY: number, unkZ: number): void;
	export function _0x615D3925E87A3B26(checkpoint: number): void;
	export function _0xDB1EA9411C8911EC(p0: number): void;
	export function _0x3C788E7F6438754D(p0: number, p1: number, p2: number, p3: number): void;
	export function deleteCheckpoint(checkpoint: number): void;
	export function _0x22A249A53034450A(p0: boolean): void;
	export function _0xDC459CFA0CCE245B(toggle: boolean): void;
	export function requestStreamedTextureDict(textureDict: string, p1: boolean): void;
	export function hasStreamedTextureDictLoaded(textureDict: string): boolean;
	export function setStreamedTextureDictAsNoLongerNeeded(textureDict: string): void;
	export function drawRect(x: number, y: number, width: number, height: number, r: number, g: number, b: number, a: number, p8: boolean): void;
	export function setScriptGfxDrawBehindPausemenu(toggle: boolean): void;
	export function setScriptGfxDrawOrder(drawOrder: number): void;
	export function setScriptGfxAlign(x: number, y: number): void;
	export function resetScriptGfxAlign(): void;
	export function setScriptGfxAlignParams(x: number, y: number, p2: number, p3: number): void;
	export function getScriptGfxPosition(p0: number, p1: number, p2: number, p3: number): [void, number, number];
	export function getSafeZoneSize(): number;
	export function drawSprite(textureDict: string, textureName: string, screenX: number, screenY: number, width: number, height: number, heading: number, red: number, green: number, blue: number, alpha: number, p11: boolean): void;
	export function _0x2D3B147AFAD49DE0(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, p10: number, p11: number): void;
	export function drawInteractiveSprite(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, p10: number): void;
	export function addEntityIcon(entity: number, icon: string): number;
	export function setEntityIconVisibility(entity: number, toggle: boolean): void;
	export function setEntityIconColor(entity: number, red: number, green: number, blue: number, alpha: number): void;
	export function setDrawOrigin(x: number, y: number, z: number, p3: number): void;
	export function clearDrawOrigin(): void;
	export function setBinkMovieRequested(name: string): number;
	export function playBinkMovie(binkMovie: number): void;
	export function stopBinkMovie(binkMovie: number): void;
	export function releaseBinkMovie(binkMovie: number): void;
	export function drawBinkMovie(binkMovie: number, p1: number, p2: number, p3: number, p4: number, p5: number, r: number, g: number, b: number, a: number): void;
	export function setBinkMovieProgress(binkMovie: number, progress: number): void;
	export function setBinkMovieUnk(binkMovie: number, value: number): void;
	export function attachTvAudioToEntity(entity: number): void;
	export function setTvAudioFrontend(toggle: boolean): void;
	export function _0x6805D58CAA427B72(p0: number, p1: number): void;
	export function loadMovieMeshSet(movieMeshSetName: string): number;
	export function releaseMovieMeshSet(movieMeshSet: number): void;
	export function _0x9B6E70C5CEEF4EEB(p0: number): number;
	export function getScreenResolution(x: number, y: number): [void, number, number];
	export function getActiveScreenResolution(x: number, y: number): [void, number, number];
	export function getAspectRatio(b: boolean): number;
	export function _0xB2EBE8CBC58B90E9(): number;
	export function getIsWidescreen(): boolean;
	export function getIsHidef(): boolean;
	export function _0xEFABC7722293DA7C(): void;
	export function setNightvision(toggle: boolean): void;
	export function getRequestingnightvision(): boolean;
	export function getUsingnightvision(): boolean;
	export function _0xEF398BEEE4EF45F9(p0: boolean): void;
	export function _0x814AF7DCAACC597B(p0: number): void;
	export function _0x43FA7CBE20DAB219(p0: number): void;
	export function setNoiseoveride(toggle: boolean): void;
	export function setNoisinessoveride(value: number): void;
	export function getScreenCoordFromWorldCoord(worldX: number, worldY: number, worldZ: number, screenX: number, screenY: number): [boolean, number, number];
	export function getTextureResolution(textureDict: string, textureName: string): Vector3;
	export function _0x95EB5E34F821BABE(p0: number, p1: number, p2: number): number;
	export function _0xE2892E7E55D7073A(p0: number): void;
	export function setFlash(p0: number, p1: number, fadeIn: number, duration: number, fadeOut: number): void;
	export function disableOcclusionThisFrame(): void;
	export function setArtificialLightsState(state: boolean): void;
	export function _0xC35A6D07C93802B2(): void;
	export function createTrackedPoint(): number;
	export function setTrackedPointInfo(point: number, x: number, y: number, z: number, radius: number): void;
	export function isTrackedPointVisible(point: number): boolean;
	export function destroyTrackedPoint(point: number): void;
	export function _0xBE197EAA669238F4(p0: number, p1: number, p2: number, p3: number): number;
	export function _0x61F95E5BB3E0A8C6(p0: number): void;
	export function _0xAE51BC858F32BA66(p0: number, p1: number, p2: number, p3: number, p4: number): void;
	export function _0x649C97D52332341A(p0: number): void;
	export function _0x2C42340F916C5930(p0: number): number;
	export function _0x14FC5833464340A8(): void;
	export function _0x0218BA067D249DEA(): void;
	export function _0x1612C45F9E3E0D44(): void;
	export function _0x5DEBD9C4DC995692(): void;
	export function _0xAAE9BE70EC7C69AB(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number): void;
	export function _0x6D955F6A9E0295B1(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): void;
	export function _0x302C91AB2D477F7E(): void;
	export function _0x03FC694AE06C5A20(): void;
	export function _0xD2936CAB8B58FCBD(p0: number, p1: boolean, p2: number, p3: number, p4: number, p5: number, p6: boolean, p7: number): void;
	export function _0x5F0F3F56635809EF(p0: number): void;
	export function _0x5E9DAF5A20F15908(p0: number): void;
	export function _0x36F6626459D91457(p0: number): void;
	export function _0x259BA6D4E6F808F1(p0: number): void;
	export function setFarShadowsSuppressed(toggle: boolean): void;
	export function _0x25FC3E33A31AD0C9(p0: boolean): void;
	export function cascadeshadowsSetType(type: string): void;
	export function cascadeshadowsResetType(): void;
	export function _0x6DDBF9DFFC4AC080(p0: boolean): void;
	export function _0xD39D13C9FEBF0511(p0: boolean): void;
	export function _0x02AC28F3A01FA04A(p0: number): void;
	export function _0x0AE73D8DF3A762B2(p0: boolean): void;
	export function _0xCA465D9CC0D231BA(p0: number): void;
	export function golfTrailSetEnabled(toggle: boolean): void;
	export function golfTrailSetPath(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: boolean): void;
	export function golfTrailSetRadius(p0: number, p1: number, p2: number): void;
	export function golfTrailSetColour(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, p10: number, p11: number): void;
	export function golfTrailSetTessellation(p0: number, p1: number): void;
	export function _0xC0416B061F2B7E5E(p0: boolean): void;
	export function _0xB1BB03742917A5D6(type: number, xPos: number, yPos: number, zPos: number, p4: number, red: number, green: number, blue: number, alpha: number): void;
	export function golfTrailSetShaderParams(p0: number, p1: number, p2: number, p3: number, p4: number): void;
	export function golfTrailSetFacing(p0: boolean): void;
	export function _0xA4819F5E23E2FFAD(): number;
	export function _0xA4664972A9B8F8BA(p0: number): Vector3;
	export function setSeethrough(toggle: boolean): void;
	export function getUsingseethrough(): boolean;
	export function seethroughReset(): void;
	export function seethroughSetFadeStartDistance(distance: number): void;
	export function seethroughSetFadeEndDistance(distance: number): void;
	export function seethroughGetMaxThickness(): number;
	export function seethroughSetMaxThickness(thickness: number): void;
	export function seethroughSetNoiseAmountMin(amount: number): void;
	export function seethroughSetNoiseAmountMax(amount: number): void;
	export function seethroughSetHiLightIntensity(intensity: number): void;
	export function seethroughSetHiLightNoise(noise: number): void;
	export function seethroughSetHeatscale(index: number, heatScale: number): void;
	export function seethroughSetColorNear(red: number, green: number, blue: number): void;
	export function _0xB3C641F3630BF6DA(p0: number): void;
	export function _0xE59343E9E96529E7(): number;
	export function _0x6A51F78772175A51(toggle: boolean): void;
	export function _0xE63D7C6EECECB66B(toggle: boolean): void;
	export function _0xE3E2C1B4C59DBC77(unk: number): void;
	export function transitionToBlurred(transitionTime: number): boolean;
	export function transitionFromBlurred(transitionTime: number): boolean;
	export function _0xDE81239437E8C5A8(): void;
	export function _0x5CCABFFCA31DDE33(): number;
	export function _0x7B226C785A52A0A9(): boolean;
	export function togglePausedRenderphases(toggle: boolean): void;
	export function getTogglePausedRenderphasesStatus(): boolean;
	export function _0xE1C8709406F2C41C(): void;
	export function _0x851CD923176EBA7C(): void;
	export function _0xBA3D65906822BED5(p0: boolean, p1: boolean, p2: number, p3: number, p4: number, p5: number): void;
	export function _0xB569F41F3E7E83A4(p0: number): void;
	export function _0x7AC24EAB6D74118D(p0: boolean): boolean;
	export function _0xBCEDB009461DA156(): number;
	export function _0x27FEB5254759CDE3(textureDict: string, p1: boolean): boolean;
	export function startParticleFxNonLoopedAtCoord(effectName: string, xPos: number, yPos: number, zPos: number, xRot: number, yRot: number, zRot: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean): number;
	export function startNetworkedParticleFxNonLoopedAtCoord(effectName: string, xPos: number, yPos: number, zPos: number, xRot: number, yRot: number, zRot: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean, p11: boolean): boolean;
	export function startParticleFxNonLoopedOnPedBone(effectName: string, ped: number, offsetX: number, offsetY: number, offsetZ: number, rotX: number, rotY: number, rotZ: number, boneIndex: number, scale: number, axisX: boolean, axisY: boolean, axisZ: boolean): boolean;
	export function startNetworkedParticleFxNonLoopedOnPedBone(effectName: string, ped: number, offsetX: number, offsetY: number, offsetZ: number, rotX: number, rotY: number, rotZ: number, boneIndex: number, scale: number, axisX: boolean, axisY: boolean, axisZ: boolean): boolean;
	export function startParticleFxNonLoopedOnEntity(effectName: string, entity: number, offsetX: number, offsetY: number, offsetZ: number, rotX: number, rotY: number, rotZ: number, scale: number, axisX: boolean, axisY: boolean, axisZ: boolean): boolean;
	export function startNetworkedParticleFxNonLoopedOnEntity(effectName: string, entity: number, offsetX: number, offsetY: number, offsetZ: number, rotX: number, rotY: number, rotZ: number, scale: number, axisX: boolean, axisY: boolean, axisZ: boolean): boolean;
	export function setParticleFxNonLoopedColour(r: number, g: number, b: number): void;
	export function setParticleFxNonLoopedAlpha(alpha: number): void;
	export function _0x8CDE909A0370BB3A(toggle: boolean): void;
	export function startParticleFxLoopedAtCoord(effectName: string, x: number, y: number, z: number, xRot: number, yRot: number, zRot: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean, p11: boolean): number;
	export function startParticleFxLoopedOnPedBone(effectName: string, ped: number, xOffset: number, yOffset: number, zOffset: number, xRot: number, yRot: number, zRot: number, boneIndex: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean): number;
	export function startParticleFxLoopedOnEntity(effectName: string, entity: number, xOffset: number, yOffset: number, zOffset: number, xRot: number, yRot: number, zRot: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean): number;
	export function startParticleFxLoopedOnEntityBone(effectName: string, entity: number, xOffset: number, yOffset: number, zOffset: number, xRot: number, yRot: number, zRot: number, boneIndex: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean): number;
	export function startNetworkedParticleFxLoopedOnEntity(effectName: string, entity: number, xOffset: number, yOffset: number, zOffset: number, xRot: number, yRot: number, zRot: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean, p12: number, p13: number, p14: number, p15: number): number;
	export function startNetworkedParticleFxLoopedOnEntityBone(effectName: string, entity: number, xOffset: number, yOffset: number, zOffset: number, xRot: number, yRot: number, zRot: number, boneIndex: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean, p13: number, p14: number, p15: number, p16: number): number;
	export function stopParticleFxLooped(ptfxHandle: number, p1: boolean): void;
	export function removeParticleFx(ptfxHandle: number, p1: boolean): void;
	export function removeParticleFxFromEntity(entity: number): void;
	export function removeParticleFxInRange(X: number, Y: number, Z: number, radius: number): void;
	export function _0xBA0127DA25FD54C9(p0: number, p1: number): void;
	export function doesParticleFxLoopedExist(ptfxHandle: number): boolean;
	export function setParticleFxLoopedOffsets(ptfxHandle: number, x: number, y: number, z: number, rotX: number, rotY: number, rotZ: number): void;
	export function setParticleFxLoopedEvolution(ptfxHandle: number, propertyName: string, amount: number, noNetwork: boolean): void;
	export function setParticleFxLoopedColour(ptfxHandle: number, r: number, g: number, b: number, p4: boolean): void;
	export function setParticleFxLoopedAlpha(ptfxHandle: number, alpha: number): void;
	export function setParticleFxLoopedScale(ptfxHandle: number, scale: number): void;
	export function setParticleFxLoopedFarClipDist(ptfxHandle: number, range: number): void;
	export function setParticleFxCamInsideVehicle(p0: boolean): void;
	export function setParticleFxCamInsideNonplayerVehicle(vehicle: number, p1: boolean): void;
	export function setParticleFxShootoutBoat(p0: number): void;
	export function _0x2A251AA48B2B46DB(): void;
	export function _0x908311265D42A820(p0: number): void;
	export function _0x5F6DF3D92271E8A1(toggle: boolean): void;
	export function _0x2B40A97646381508(p0: number): void;
	export function enableClownBloodVfx(toggle: boolean): void;
	export function enableAlienBloodVfx(toggle: boolean): void;
	export function _0x27E32866E9A5C416(p0: number): void;
	export function _0xBB90E12CAC1DAB25(p0: number): void;
	export function _0xCA4AE345A153D573(p0: boolean): void;
	export function _0x54E22EA2C1956A8D(p0: number): void;
	export function _0x949F397A288B28B3(p0: number): void;
	export function _0xBA3D194057C79A7B(p0: string): void;
	export function _0x5DBF05DB5926D089(p0: number): void;
	export function _0x9B079E5221D984D3(p0: boolean): void;
	export function useParticleFxAsset(name: string): void;
	export function setParticleFxOverride(oldAsset: string, newAsset: string): void;
	export function resetParticleFxOverride(name: string): void;
	export function _0xA46B73FAA3460AE1(p0: boolean): void;
	export function _0xF78B803082D4386F(p0: number): void;
	export function washDecalsInRange(p0: number, p1: number, p2: number, p3: number, p4: number): void;
	export function washDecalsFromVehicle(vehicle: number, p1: number): void;
	export function fadeDecalsInRange(p0: number, p1: number, p2: number, p3: number, p4: number): void;
	export function removeDecalsInRange(x: number, y: number, z: number, range: number): void;
	export function removeDecalsFromObject(obj: number): void;
	export function removeDecalsFromObjectFacing(obj: number, x: number, y: number, z: number): void;
	export function removeDecalsFromVehicle(vehicle: number): void;
	export function addDecal(decalType: number, posX: number, posY: number, posZ: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, width: number, height: number, rCoef: number, gCoef: number, bCoef: number, opacity: number, timeout: number, p17: boolean, p18: boolean, p19: boolean): number;
	export function addPetrolDecal(x: number, y: number, z: number, groundLvl: number, width: number, transparency: number): number;
	export function _0x99AC7F0D8B9C893D(p0: number): void;
	export function _0x967278682CB6967A(x: number, y: number, z: number, p3: number): void;
	export function _0x0A123435A26C36CD(): void;
	export function removeDecal(decal: number): void;
	export function isDecalAlive(decal: number): boolean;
	export function getDecalWashLevel(decal: number): number;
	export function _0xD9454B5752C857DC(): void;
	export function _0x27CFB1B1E078CB2D(): void;
	export function _0x4B5CFC83122DF602(): void;
	export function getIsPetrolDecalInRange(xCoord: number, yCoord: number, zCoord: number, radius: number): boolean;
	export function overrideDecalTexture(decalType: number, textureDict: string, textureName: string): void;
	export function undoDecalTextureOverride(decalType: number): void;
	export function moveVehicleDecals(p0: number, p1: number): void;
	export function addVehicleCrewEmblem(vehicle: number, ped: number, boneIndex: number, x1: number, x2: number, x3: number, y1: number, y2: number, y3: number, z1: number, z2: number, z3: number, scale: number, p13: number, alpha: number): boolean;
	export function _0x82ACC484FFA3B05F(p0: number): number;
	export function removeVehicleCrewEmblem(vehicle: number, p1: number): void;
	export function getVehicleCrewEmblemRequestState(vehicle: number, p1: number): number;
	export function doesVehicleHaveCrewEmblem(vehicle: number, p1: number): boolean;
	export function _0x0E4299C549F0D1F1(toggle: boolean): void;
	export function _0x02369D5C8A51FDCF(toggle: boolean): void;
	export function _0x46D1A61A21F566FC(p0: number): void;
	export function overrideInteriorSmokeName(name: string): void;
	export function overrideInteriorSmokeLevel(level: number): void;
	export function overrideInteriorSmokeEnd(): void;
	export function _0xA44FF770DFBC5DAE(): void;
	export function disableVehicleDistantlights(toggle: boolean): void;
	export function _0x03300B57FCAC6DDB(p0: boolean): void;
	export function _0x98EDF76A7271E4F2(): void;
	export function setForcePedFootstepsTracks(toggle: boolean): void;
	export function setForceVehicleTrails(toggle: boolean): void;
	export function _0xEFD97FF47B745B8D(p0: number): void;
	export function presetInteriorAmbientCache(timecycleModifierName: string): void;
	export function setTimecycleModifier(modifierName: string): void;
	export function setTimecycleModifierStrength(strength: number): void;
	export function setTransitionTimecycleModifier(modifierName: string, transition: number): void;
	export function _0x1CBA05AE7BD7EE05(p0: number): void;
	export function clearTimecycleModifier(): void;
	export function getTimecycleModifierIndex(): number;
	export function getTimecycleTransitionModifierIndex(): number;
	export function _0x98D18905BF723B99(): number;
	export function pushTimecycleModifier(): void;
	export function popTimecycleModifier(): void;
	export function setCurrentPlayerTcmodifier(modifierName: string): void;
	export function setPlayerTcmodifierTransition(value: number): void;
	export function setNextPlayerTcmodifier(modifierName: string): void;
	export function addTcmodifierOverride(modifierName1: string, modifierName2: string): void;
	export function _0x15E33297C3E8DC60(p0: string): void;
	export function setExtraTimecycleModifier(modifierName: string): void;
	export function clearExtraTimecycleModifier(): void;
	export function getExtraTimecycleModifierIndex(): number;
	export function setExtraTimecycleModifierStrength(strength: number): void;
	export function resetExtraTimecycleModifierStrength(): void;
	export function requestScaleformMovie(scaleformName: string): number;
	export function requestScaleformMovieInstance(scaleformName: string): number;
	export function requestScaleformMovieInteractive(scaleformName: string): number;
	export function hasScaleformMovieLoaded(scaleformHandle: number): boolean;
	export function _0x2FCB133CA50A49EB(p0: number): number;
	export function _0x86255B1FC929E33E(p0: number): number;
	export function hasScaleformMovieFilenameLoaded(scaleformName: string): boolean;
	export function hasScaleformContainerMovieLoadedIntoParent(scaleformHandle: number): boolean;
	export function setScaleformMovieAsNoLongerNeeded(scaleformHandle: number): [void, number];
	export function setScaleformMovieToUseSystemTime(scaleform: number, toggle: boolean): void;
	export function _0x32F34FF7F617643B(p0: number, p1: number): void;
	export function _0xE6A9F00D4240B519(p0: number, p1: number): void;
	export function drawScaleformMovie(scaleformHandle: number, x: number, y: number, width: number, height: number, red: number, green: number, blue: number, alpha: number, unk: number): void;
	export function drawScaleformMovieFullscreen(scaleform: number, red: number, green: number, blue: number, alpha: number, unk: number): void;
	export function drawScaleformMovieFullscreenMasked(scaleform1: number, scaleform2: number, red: number, green: number, blue: number, alpha: number): void;
	export function drawScaleformMovie3d(scaleform: number, posX: number, posY: number, posZ: number, rotX: number, rotY: number, rotZ: number, p7: number, p8: number, p9: number, scaleX: number, scaleY: number, scaleZ: number, p13: number): void;
	export function drawScaleformMovie3dSolid(scaleform: number, posX: number, posY: number, posZ: number, rotX: number, rotY: number, rotZ: number, p7: number, p8: number, p9: number, scaleX: number, scaleY: number, scaleZ: number, p13: number): void;
	export function callScaleformMovieMethod(scaleform: number, method: string): void;
	export function callScaleformMovieMethodWithNumber(scaleform: number, methodName: string, param1: number, param2: number, param3: number, param4: number, param5: number): void;
	export function callScaleformMovieMethodWithString(scaleform: number, methodName: string, param1: string, param2: string, param3: string, param4: string, param5: string): void;
	export function callScaleformMovieMethodWithNumberAndString(scaleform: number, methodName: string, floatParam1: number, floatParam2: number, floatParam3: number, floatParam4: number, floatParam5: number, stringParam1: string, stringParam2: string, stringParam3: string, stringParam4: string, stringParam5: string): void;
	export function beginScaleformScriptHudMovieMethod(hudComponent: number, methodName: string): boolean;
	export function beginScaleformMovieMethod(scaleform: number, methodName: string): boolean;
	export function beginScaleformMovieMethodOnFrontend(methodName: string): boolean;
	export function beginScaleformMovieMethodOnFrontendHeader(methodName: string): boolean;
	export function endScaleformMovieMethod(): void;
	export function endScaleformMovieMethodReturnValue(): number;
	export function isScaleformMovieMethodReturnValueReady(returnValueData: number): boolean;
	export function getScaleformMovieMethodReturnValueInt(returnValueData: number): number;
	export function getScaleformMovieMethodReturnValueBool(returnValueData: number): boolean;
	export function getScaleformMovieMethodReturnValueString(returnValueData: number): string;
	export function scaleformMovieMethodAddParamInt(value: number): void;
	export function scaleformMovieMethodAddParamFloat(value: number): void;
	export function scaleformMovieMethodAddParamBool(value: boolean): void;
	export function beginTextCommandScaleformString(componentType: string): void;
	export function endTextCommandScaleformString(): void;
	export function endTextCommandScaleformString2(): void;
	export function scaleformMovieMethodAddParamTextureNameString2(string: string): void;
	export function scaleformMovieMethodAddParamTextureNameString(string: string): void;
	export function scaleformMovieMethodAddParamPlayerNameString(string: string): void;
	export function _0x5E657EF1099EDD65(p0: number): boolean;
	export function scaleformMovieMethodAddParamIntString(value: number): void;
	export function requestScaleformScriptHudMovie(hudComponent: number): void;
	export function hasScaleformScriptHudMovieLoaded(hudComponent: number): boolean;
	export function removeScaleformScriptHudMovie(hudComponent: number): void;
	export function _0xD1C7CB175E012964(scaleformHandle: number): boolean;
	export function setTvChannel(channel: number): void;
	export function getTvChannel(): number;
	export function setTvVolume(volume: number): void;
	export function getTvVolume(): number;
	export function drawTvChannel(xPos: number, yPos: number, xScale: number, yScale: number, rotation: number, red: number, green: number, blue: number, alpha: number): void;
	export function setTvChannelPlaylist(tvChannel: number, playlistName: string, restart: boolean): void;
	export function setTvChannelPlaylistAtHour(tvChannel: number, playlistName: string, hour: number): void;
	export function clearTvChannelPlaylist(tvChannel: number): void;
	export function isPlaylistUnk(tvChannel: number, p1: number): boolean;
	export function isTvPlaylistItemPlaying(videoCliphash: number): boolean;
	export function enableMovieKeyframeWait(toggle: boolean): void;
	export function _0xD1C55B110E4DF534(p0: number): void;
	export function _0x30432A0118736E00(): number;
	export function enableMovieSubtitles(toggle: boolean): void;
	export function ui3dsceneIsAvailable(): boolean;
	export function ui3dscenePushPreset(presetName: string): boolean;
	export function _0x98C4FE6EC34154CA(presetName: string, ped: number, p2: number, posX: number, posY: number, posZ: number): boolean;
	export function _0x7A42B2E236E71415(): void;
	export function _0x108BE26959A9D9BB(toggle: boolean): void;
	export function terraingridActivate(toggle: boolean): void;
	export function terraingridSetParams(x: number, y: number, z: number, p3: number, rotation: number, p5: number, width: number, height: number, p8: number, scale: number, glowIntensity: number, normalHeight: number, heightDiff: number): void;
	export function terraingridSetColours(lowR: number, lowG: number, lowB: number, lowAlpha: number, r: number, g: number, b: number, alpha: number, highR: number, highG: number, highB: number, highAlpha: number): void;
	export function animpostfxPlay(effectName: string, duration: number, looped: boolean): void;
	export function animpostfxStop(effectName: string): void;
	export function animpostfxGetUnk(effectName: string): number;
	export function animpostfxIsRunning(effectName: string): boolean;
	export function animpostfxStopAll(): void;
	export function animpostfxStopAndDoUnk(effectName: string): void;
	export function beginTextCommandBusyspinnerOn(string: string): void;
	export function endTextCommandBusyspinnerOn(busySpinnerType: number): void;
	export function busyspinnerOff(): void;
	export function preloadBusyspinner(): void;
	export function busyspinnerIsOn(): boolean;
	export function busyspinnerIsDisplaying(): boolean;
	export function _0x9245E81072704B8A(p0: boolean): void;
	export function setMouseCursorActiveThisFrame(): void;
	export function setMouseCursorSprite(spriteId: number): void;
	export function _0x98215325A695E78A(p0: boolean): void;
	export function _0x3D9ACB1EB139E702(): number;
	export function _0x632B2940C67F4EA9(scaleformHandle: number, p1: number, p2: number, p3: number): [boolean, number, number, number];
	export function _0x6F1554B0CC2089FA(p0: boolean): void;
	export function clearNotificationsPos(pos: number): void;
	export function _0x32888337579A5970(): void;
	export function hideHudNotificationsThisFrame(): void;
	export function _0x15CFA549788D35EF(): void;
	export function _0xA8FDB297A8D25FBA(): void;
	export function removeNotification(notificationId: number): void;
	export function _0xA13C11E1B5C06BFC(): void;
	export function _0x583049884A2EEE3C(): void;
	export function _0xFDB423997FA30340(): void;
	export function _0xE1CD1E48E025E661(): void;
	export function _0xA9CBFD40B3FA3010(): number;
	export function _0xD4438C0564490E63(): void;
	export function _0xB695E2CD0A2DA9EE(): void;
	export function getCurrentNotification(): number;
	export function _0x56C8B608CFD49854(): void;
	export function _0xADED7F5748ACAFE6(): void;
	export function setNotificationBackgroundColor(hudColorIndex: number): void;
	export function setNotificationFlashColor(red: number, green: number, blue: number, alpha: number): void;
	export function _0x17AD8C9706BDD88A(p0: number): void;
	export function _0x4A0C7C9BB10ABB36(p0: boolean): void;
	export function _0xFDD85225B2DEA55E(): void;
	export function _0xFDEC055AB549E328(): void;
	export function _0x80FE4F3AB4E1B62A(): void;
	export function _0xBAE4F9B97CD43B30(p0: boolean): void;
	export function _0x317EBA71D7543F52(p0: number, p1: number, p2: number, p3: number): [void, number, number, number, number];
	export function setNotificationTextEntry(text: string): void;
	export function setNotificationMessage(picName1: string, picName2: string, flash: boolean, iconType: number, sender: string, subject: string, p6: string): number;
	export function setNotificationMessage2(picName1: string, picName2: string, flash: boolean, iconType: number, sender: string, subject: string): number;
	export function setNotificationMessage3(picName1: string, picName2: string, flash: boolean, iconType: number, sender: string, subject: string): number;
	export function setNotificationMessage4(picName1: string, picName2: string, flash: boolean, iconType: number, sender: string, subject: string, duration: number): number;
	export function setNotificationMessageClanTag(picName1: string, picName2: string, flash: boolean, iconType: number, sender: string, subject: string, duration: number, clanTag: string): number;
	export function setNotificationMessageClanTag2(picName1: string, picName2: string, flash: boolean, iconType1: number, sender: string, subject: string, duration: number, clanTag: string, iconType2: number, p9: number): number;
	export function drawNotification(blink: boolean, p1: boolean): number;
	export function drawNotification2(blink: boolean, p1: boolean): number;
	export function drawNotification3(blink: boolean, p1: boolean): number;
	export function drawNotificationAward(p0: string, p1: string, p2: number, p3: number, p4: string): number;
	export function drawNotificationApartmentInvite(p0: boolean, p1: boolean, p2: number, p3: number, isLeader: boolean, unk0: boolean, clanDesc: number, R: number, G: number, B: number): [number, number];
	export function drawNotificationClanInvite(p0: boolean, p1: boolean, p2: number, p3: number, isLeader: boolean, unk0: boolean, clanDesc: number, playerName: string, R: number, G: number, B: number): [number, number];
	export function _0x33EE12743CCD6343(p0: number, p1: number, p2: number): number;
	export function _0xC8F3AAF93D0600BF(p0: number, p1: number, p2: number, p3: number): number;
	export function _0x7AE0589093A2E088(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): number;
	export function drawNotification4(blink: boolean, p1: boolean): number;
	export function _0x8EFCCF6EC66D85E4(p0: number, p1: number, p2: number, p3: boolean, p4: boolean): [number, number, number, number];
	export function _0xB6871B0555B02996(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number): [number, number, number, number, number];
	export function drawNotificationWithIcon(type: number, image: number, text: string): number;
	export function drawNotificationWithButton(type: number, button: string, text: string): number;
	export function beginTextCommandPrint(GxtEntry: string): void;
	export function endTextCommandPrint(duration: number, drawImmediately: boolean): void;
	export function beginTextCommandIsMessageDisplayed(text: string): void;
	export function endTextCommandIsMessageDisplayed(): boolean;
	export function beginTextCommandDisplayText(text: string): void;
	export function endTextCommandDisplayText(x: number, y: number, p2: number): void;
	export function beginTextCommandGetWidth(text: string): void;
	export function endTextCommandGetWidth(p0: boolean): number;
	export function beginTextCommandLineCount(entry: string): void;
	export function endTextCommandLineCount(x: number, y: number): number;
	export function beginTextCommandDisplayHelp(inputType: string): void;
	export function endTextCommandDisplayHelp(p0: number, loop: boolean, beep: boolean, shape: number): void;
	export function beginTextCommandIsThisHelpMessageBeingDisplayed(labelName: string): void;
	export function endTextCommandIsThisHelpMessageBeingDisplayed(p0: number): boolean;
	export function beginTextCommandSetBlipName(gxtentry: string): void;
	export function endTextCommandSetBlipName(blip: number): void;
	export function beginTextCommandObjective(p0: string): void;
	export function endTextCommandObjective(p0: boolean): void;
	export function beginTextCommandClearPrint(text: string): void;
	export function endTextCommandClearPrint(): void;
	export function beginTextCommandOverrideButtonText(gxtEntry: string): void;
	export function endTextCommandOverrideButtonText(p0: number): void;
	export function addTextComponentInteger(value: number): void;
	export function addTextComponentFloat(value: number, decimalPlaces: number): void;
	export function addTextComponentSubstringTextLabel(labelName: string): void;
	export function addTextComponentSubstringTextLabelHashKey(gxtEntryHash: number): void;
	export function addTextComponentSubstringBlipName(blip: number): void;
	export function addTextComponentSubstringPlayerName(text: string): void;
	export function addTextComponentSubstringTime(timestamp: number, flags: number): void;
	export function addTextComponentFormattedInteger(value: number, commaSeparated: boolean): void;
	export function addTextComponentSubstringPhoneNumber(p0: string, p1: number): void;
	export function addTextComponentSubstringWebsite(website: string): void;
	export function addTextComponentSubstringUnk(p0: string): void;
	export function setColourOfNextTextComponent(hudColor: number): void;
	export function getTextSubstring(text: string, position: number, length: number): string;
	export function getTextSubstringSafe(text: string, position: number, length: number, maxLength: number): string;
	export function getTextSubstringSlice(text: string, startPosition: number, endPosition: number): string;
	export function getLabelText(labelName: string): string;
	export function clearPrints(): void;
	export function clearBrief(): void;
	export function clearAllHelpMessages(): void;
	export function clearThisPrint(p0: string): void;
	export function clearSmallPrints(): void;
	export function doesTextBlockExist(gxt: string): boolean;
	export function requestAdditionalText(gxt: string, slot: number): void;
	export function requestAdditionalTextForDlc(gxt: string, slot: number): void;
	export function hasAdditionalTextLoaded(slot: number): boolean;
	export function clearAdditionalText(p0: number, p1: boolean): void;
	export function isStreamingAdditionalText(p0: number): boolean;
	export function hasThisAdditionalTextLoaded(gxt: string, slot: number): boolean;
	export function isMessageBeingDisplayed(): boolean;
	export function doesTextLabelExist(gxt: string): boolean;
	export function _0x98C3CF913D895111(string: string, length: number): string;
	export function getLengthOfStringWithThisTextLabel(gxt: string): number;
	export function getLengthOfLiteralString(string: string): number;
	export function getLengthOfLiteralStringInBytes(string: string): number;
	export function getStreetNameFromHashKey(hash: number): string;
	export function isHudPreferenceSwitchedOn(): boolean;
	export function isRadarPreferenceSwitchedOn(): boolean;
	export function isSubtitlePreferenceSwitchedOn(): boolean;
	export function displayHud(toggle: boolean): void;
	export function _0x7669F9E39DC17063(): void;
	export function displayHudWhenPausedThisFrame(): void;
	export function displayRadar(toggle: boolean): void;
	export function _0xCD74233600C4EA6B(toggle: boolean): void;
	export function _0xC2D2AD9EAAE265B8(): boolean;
	export function isHudHidden(): boolean;
	export function isRadarHidden(): boolean;
	export function isMinimapRendering(): boolean;
	export function _0x0C698D8F099174C7(p0: number): void;
	export function _0xE4C3B169876D33D7(p0: number): void;
	export function _0xEB81A3DADD503187(): void;
	export function setBlipRoute(blip: number, enabled: boolean): void;
	export function clearAllBlipRoutes(): void;
	export function setBlipRouteColour(blip: number, colour: number): void;
	export function _0x2790F4B17D098E26(toggle: boolean): void;
	export function _0x6CDD58146A436083(p0: number): void;
	export function _0xD1942374085C8469(p0: number): void;
	export function addNextMessageToPreviousBriefs(p0: boolean): void;
	export function _0x57D760D55F54E071(p0: number): void;
	export function setRadarZoomPrecise(zoom: number): void;
	export function setRadarZoom(zoomLevel: number): void;
	export function setRadarZoomToBlip(blip: number, zoom: number): void;
	export function setRadarZoomToDistance(zoom: number): void;
	export function _0xD2049635DEB9C375(): void;
	export function getHudColour(hudColorIndex: number, r: number, g: number, b: number, a: number): [void, number, number, number, number];
	export function setScriptVariableHudColour(r: number, g: number, b: number, a: number): void;
	export function setScriptVariable2HudColour(r: number, g: number, b: number, a: number): void;
	export function replaceHudColour(hudColorIndex: number, hudColorIndex2: number): void;
	export function replaceHudColourWithRgba(hudColorIndex: number, r: number, g: number, b: number, a: number): void;
	export function setAbilityBarVisibilityInMultiplayer(visible: boolean): void;
	export function flashAbilityBar(millisecondsToFlash: number): void;
	export function setAbilityBarValue(p0: number, p1: number): void;
	export function flashWantedDisplay(p0: boolean): void;
	export function _0xBA8D65C1C65702E5(toggle: boolean): void;
	export function getTextScaleHeight(size: number, font: number): number;
	export function setTextScale(scale: number, size: number): void;
	export function setTextColour(red: number, green: number, blue: number, alpha: number): void;
	export function setTextCentre(align: boolean): void;
	export function setTextRightJustify(toggle: boolean): void;
	export function setTextJustification(justifyType: number): void;
	export function setTextWrap(start: number, end: number): void;
	export function setTextLeading(p0: number): void;
	export function setTextProportional(p0: boolean): void;
	export function setTextFont(fontType: number): void;
	export function setTextDropShadow(): void;
	export function setTextDropshadow(distance: number, r: number, g: number, b: number, a: number): void;
	export function setTextOutline(): void;
	export function setTextEdge(p0: number, r: number, g: number, b: number, a: number): void;
	export function setTextRenderId(renderId: number): void;
	export function getDefaultScriptRendertargetRenderId(): number;
	export function registerNamedRendertarget(name: string, p1: boolean): boolean;
	export function isNamedRendertargetRegistered(name: string): boolean;
	export function releaseNamedRendertarget(name: string): boolean;
	export function linkNamedRendertarget(modelHash: number): void;
	export function getNamedRendertargetRenderId(name: string): number;
	export function isNamedRendertargetLinked(modelHash: number): boolean;
	export function clearHelp(toggle: boolean): void;
	export function isHelpMessageOnScreen(): boolean;
	export function _0x214CD562A939246A(): boolean;
	export function isHelpMessageBeingDisplayed(): boolean;
	export function isHelpMessageFadingOut(): boolean;
	export function _0xB9C362BABECDDC7A(p0: number, p1: number, p2: number, p3: number, p4: number): void;
	export function _0x4A9923385BDB9DAD(): boolean;
	export function getBlipInfoIdIterator(): number;
	export function getNumberOfActiveBlips(): number;
	export function getNextBlipInfoId(blipSprite: number): number;
	export function getFirstBlipInfoId(blipSprite: number): number;
	export function _0xD484BF71050CA1EE(p0: number): number;
	export function getBlipInfoIdCoord(blip: number): Vector3;
	export function getBlipInfoIdDisplay(blip: number): number;
	export function getBlipInfoIdType(blip: number): number;
	export function getBlipInfoIdEntityIndex(blip: number): number;
	export function getBlipInfoIdPickupIndex(blip: number): number;
	export function getBlipFromEntity(entity: number): number;
	export function addBlipForRadius(posX: number, posY: number, posZ: number, radius: number): number;
	export function addBlipForArea(x: number, y: number, z: number, scaleX: number, scaleY: number): number;
	export function addBlipForEntity(entity: number): number;
	export function addBlipForPickup(pickup: number): number;
	export function addBlipForCoord(x: number, y: number, z: number): number;
	export function _0x72DD432F3CDFC0EE(posX: number, posY: number, posZ: number, radius: number, p4: number): void;
	export function _0x60734CC207C9833C(p0: boolean): void;
	export function setBlipCoords(blip: number, posX: number, posY: number, posZ: number): void;
	export function getBlipCoords(blip: number): Vector3;
	export function setBlipSprite(blip: number, spriteId: number): void;
	export function getBlipSprite(blip: number): number;
	export function setBlipNameFromTextFile(blip: number, gxtEntry: string): void;
	export function setBlipNameToPlayerName(blip: number, player: number): void;
	export function setBlipAlpha(blip: number, alpha: number): void;
	export function getBlipAlpha(blip: number): number;
	export function setBlipFade(blip: number, opacity: number, duration: number): void;
	export function _0x2C173AE2BDB9385E(blip: number): number;
	export function setBlipRotation(blip: number, rotation: number): void;
	export function _0xA8B6AFDAC320AC87(p0: number, p1: number): void;
	export function setBlipFlashTimer(blip: number, duration: number): void;
	export function setBlipFlashInterval(blip: number, p1: number): void;
	export function setBlipColour(blip: number, color: number): void;
	export function setBlipSecondaryColour(blip: number, r: number, g: number, b: number): void;
	export function getBlipColour(blip: number): number;
	export function getBlipHudColour(blip: number): number;
	export function isBlipShortRange(blip: number): boolean;
	export function isBlipOnMinimap(blip: number): boolean;
	export function doesBlipHaveGpsRoute(blip: number): boolean;
	export function setBlipHiddenOnLegend(blip: number, toggle: boolean): void;
	export function setBlipHighDetail(blip: number, toggle: boolean): void;
	export function setBlipAsMissionCreatorBlip(blip: number, toggle: boolean): void;
	export function isMissionCreatorBlip(blip: number): boolean;
	export function _0x5C90988E7C8E1AF4(): number;
	export function _0x4167EFE0527D706E(): boolean;
	export function _0xF1A6C18B35BCADE6(p0: boolean): void;
	export function _0x2916A928514C9827(): void;
	export function _0xB552929B85FC27EC(p0: number, p1: number): void;
	export function setBlipFlashes(blip: number, toggle: boolean): void;
	export function setBlipFlashesAlternate(blip: number, toggle: boolean): void;
	export function isBlipFlashing(blip: number): boolean;
	export function setBlipAsShortRange(blip: number, toggle: boolean): void;
	export function setBlipScale(blip: number, scale: number): void;
	export function setBlipPriority(blip: number, priority: number): void;
	export function setBlipDisplay(blip: number, displayId: number): void;
	export function setBlipCategory(blip: number, index: number): void;
	export function removeBlip(blip: number): [void, number];
	export function setBlipAsFriendly(blip: number, toggle: boolean): void;
	export function pulseBlip(blip: number): void;
	export function showNumberOnBlip(blip: number, number: number): void;
	export function hideNumberOnBlip(blip: number): void;
	export function showHeightOnBlip(blip: number, toggle: boolean): void;
	export function showTickOnBlip(blip: number, toggle: boolean): void;
	export function showHeadingIndicatorOnBlip(blip: number, toggle: boolean): void;
	export function showOutlineIndicatorOnBlip(blip: number, toggle: boolean): void;
	export function showFriendIndicatorOnBlip(blip: number, toggle: boolean): void;
	export function showCrewIndicatorOnBlip(blip: number, toggle: boolean): void;
	export function _0xC4278F70131BAA6D(p0: number, p1: boolean): void;
	export function _0x4B5B620C9B59ED34(p0: number, p1: number): void;
	export function _0x2C9F302398E13141(p0: number, p1: number): void;
	export function setBlipShrink(blip: number, toggle: boolean): void;
	export function setRadiusBlipEdge(p0: number, p1: boolean): void;
	export function doesBlipExist(blip: number): boolean;
	export function setWaypointOff(): void;
	export function _0xD8E694757BCEA8E9(): void;
	export function refreshWaypoint(): void;
	export function isWaypointActive(): boolean;
	export function setNewWaypoint(x: number, y: number): void;
	export function setBlipBright(blip: number, toggle: boolean): void;
	export function setBlipShowCone(blip: number, toggle: boolean): void;
	export function _0xC594B315EDF2D4AF(ped: number): void;
	export function _0xF83D0FEBE75E62C9(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number): void;
	export function _0x35A3CD97B2C0A6D2(p0: number): void;
	export function _0x8410C5E0CD847B9D(): void;
	export function setMinimapComponent(p0: number, p1: boolean, p2: number): number;
	export function showSigninUi(): void;
	export function getMainPlayerBlipId(): number;
	export function _0x41350B4FC28E3941(p0: boolean): void;
	export function hideLoadingOnFadeThisFrame(): void;
	export function setRadarAsInteriorThisFrame(interior: number, x: number, y: number, z: number, zoom: number): void;
	export function _0x504DFE62A1692296(toggle: boolean): void;
	export function setRadarAsExteriorThisFrame(): void;
	export function setPlayerBlipPositionThisFrame(x: number, y: number): void;
	export function _0xA17784FCA9548D15(p0: number, p1: number, p2: number): void;
	export function _0x9049FE339D5F6F6F(): number;
	export function disableRadarThisFrame(): void;
	export function _0x20FE7FDFEEAD38C0(): void;
	export function centerPlayerOnRadarThisFrame(): void;
	export function _0x55F5A5F07134DE60(): void;
	export function setWidescreenFormat(p0: number): void;
	export function displayAreaName(toggle: boolean): void;
	export function displayCash(toggle: boolean): void;
	export function _0x170F541E1CADD1DE(p0: boolean): void;
	export function setPlayerCashChange(cash: number, bank: number): void;
	export function displayAmmoThisFrame(display: boolean): void;
	export function displaySniperScopeThisFrame(): void;
	export function hideHudAndRadarThisFrame(): void;
	export function _0xE67C6DFD386EA5E7(p0: boolean): void;
	export function setMultiplayerWalletCash(): void;
	export function removeMultiplayerWalletCash(): void;
	export function setMultiplayerBankCash(): void;
	export function removeMultiplayerBankCash(): void;
	export function setMultiplayerHudCash(p0: number, p1: number): void;
	export function removeMultiplayerHudCash(): void;
	export function hideHelpTextThisFrame(): void;
	export function _0x801879A9B4F4B2FB(): boolean;
	export function displayHelpTextThisFrame(message: string, p1: boolean): void;
	export function hudForceWeaponWheel(show: boolean): void;
	export function _0x488043841BBE156F(): void;
	export function blockWeaponWheelThisFrame(): void;
	export function _0xA48931185F0536FE(): number;
	export function _0x72C1056D678BB7D8(weaponHash: number): void;
	export function _0xA13E93403F26C812(p0: number): number;
	export function _0x14C9FDCC41F81F63(p0: boolean): void;
	export function setGpsFlags(p0: number, p1: number): void;
	export function clearGpsFlags(): void;
	export function setRaceTrackRender(toggle: boolean): void;
	export function clearGpsRaceTrack(): void;
	export function startGpsCustomRoute(hudColor: number, p1: boolean, p2: boolean): void;
	export function addPointToGpsCustomRoute(x: number, y: number, z: number): void;
	export function setGpsCustomRouteRender(p0: boolean, p1: number, p2: number): void;
	export function clearGpsCustomRoute(): void;
	export function startGpsMultiRoute(hudColor: number, p1: boolean, p2: boolean): void;
	export function addPointToGpsMultiRoute(x: number, y: number, z: number): void;
	export function setGpsMultiRouteRender(toggle: boolean): void;
	export function clearGpsMultiRoute(): void;
	export function clearGpsPlayerWaypoint(): void;
	export function setGpsFlashes(toggle: boolean): void;
	export function _0x7B21E0BB01E8224A(p0: number): void;
	export function flashMinimapDisplay(): void;
	export function _0x6B1DE27EE78E6A19(p0: number): void;
	export function toggleStealthRadar(toggle: boolean): void;
	export function setMinimapInSpectatorMode(toggle: boolean, ped: number): void;
	export function setMissionName(p0: boolean, name: string): void;
	export function setMissionName2(p0: boolean, name: string): void;
	export function _0x817B86108EB94E51(p0: boolean, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number): [void, number, number, number, number, number, number, number, number];
	export function setMinimapBlockWaypoint(toggle: boolean): void;
	export function setNorthYanktonMap(toggle: boolean): void;
	export function setMinimapRevealed(toggle: boolean): void;
	export function getMinimapRevealPercentage(): number;
	export function getMinimapAreaIsRevealed(x: number, y: number, radius: number): boolean;
	export function _0x62E849B7EB28E770(p0: boolean): void;
	export function _0x0923DBF87DFF735E(x: number, y: number, z: number): void;
	export function setMinimapGolfCourse(hole: number): void;
	export function setMinimapGolfCourseOff(): void;
	export function lockMinimapAngle(angle: number): void;
	export function unlockMinimapAngle(): void;
	export function lockMinimapPosition(x: number, y: number): void;
	export function unlockMinimapPosition(): void;
	export function setMinimapAltitudeIndicatorLevel(altitude: number, p1: boolean, p2: number): void;
	export function _0x3F5CC444DCAAA8F2(p0: number, p1: number, p2: boolean): void;
	export function _0x975D66A0BC17064C(p0: number): void;
	export function _0x06A320535F5F0248(p0: number): void;
	export function setBigmapActive(toggleBigMap: boolean, showFullMap: boolean): void;
	export function isHudComponentActive(id: number): boolean;
	export function isScriptedHudComponentActive(id: number): boolean;
	export function hideScriptedHudComponentThisFrame(id: number): void;
	export function isScriptedHudComponentHiddenThisFrame(id: number): boolean;
	export function hideHudComponentThisFrame(id: number): void;
	export function showHudComponentThisFrame(id: number): void;
	export function hideAreaAndVehicleNameThisFrame(): void;
	export function resetReticuleValues(): void;
	export function resetHudComponentValues(id: number): void;
	export function setHudComponentPosition(id: number, x: number, y: number): void;
	export function getHudComponentPosition(id: number): Vector3;
	export function clearReminderMessage(): void;
	export function getScreenCoordFromWorldCoord2(worldX: number, worldY: number, worldZ: number, screenX: number, screenY: number): [boolean, number, number];
	export function openReportugcMenu(): void;
	export function forceCloseReportugcMenu(): void;
	export function isReportugcMenuOpen(): boolean;
	export function _0x2432784ACA090DA4(p0: number): boolean;
	export function _0x7679CC1BCEBE3D4C(p0: number, p1: number, p2: number): void;
	export function _0x784BA7E0ECEB4178(p0: number, x: number, y: number, z: number): void;
	export function _0xB094BC1DB4018240(p0: number, p1: number, p2: number, p3: number): void;
	export function _0x788E7FD431BD67F1(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): void;
	export function clearFloatingHelp(p0: number, p1: boolean): void;
	export function createMpGamerTagWithCrewColor(player: number, username: string, pointedClanTag: boolean, isRockstarClan: boolean, clanTag: string, p5: number, r: number, g: number, b: number): void;
	export function isMpGamerTagMovieActive(): boolean;
	export function createFakeMpGamerTag(ped: number, username: string, pointedClanTag: boolean, isRockstarClan: boolean, clanTag: string, p5: number): number;
	export function removeMpGamerTag(gamerTagId: number): void;
	export function isMpGamerTagActive(gamerTagId: number): boolean;
	export function isMpGamerTagFree(gamerTagId: number): boolean;
	export function setMpGamerTagVisibility(gamerTagId: number, component: number, toggle: boolean, p3: number): void;
	export function _0xEE76FF7E6A0166B0(gamerTagId: number, p1: boolean): void;
	export function setMpGamerTagIcons(gamerTagId: number, p1: boolean): void;
	export function _0xD29EC58C2F6B5014(p0: number, p1: number): void;
	export function _0x1563FE35E9928E67(p0: number, p1: number, p2: number): void;
	export function setMpGamerTagColour(gamerTagId: number, flag: number, color: number): void;
	export function setMpGamerTagHealthBarColour(headDisplayId: number, color: number): void;
	export function setMpGamerTagAlpha(gamerTagId: number, component: number, alpha: number): void;
	export function setMpGamerTagWantedLevel(gamerTagId: number, wantedlvl: number): void;
	export function setMpGamerTagUnk(gamerTagId: number, p1: number): void;
	export function setMpGamerTagName(gamerTagId: number, string: string): void;
	export function isValidMpGamerTagMovie(gamerTagId: number): boolean;
	export function setMpGamerTagBigText(gamerTagId: number, string: string): void;
	export function getCurrentWebpageId(): number;
	export function getCurrentWebsiteId(): number;
	export function _0xE3B05614DCE1D014(p0: number): number;
	export function _0xB99C4E4D9499DF29(p0: number): void;
	export function isWarningMessageActive2(): boolean;
	export function setWarningMessage(titleMsg: string, flags: number, promptMsg: string, p3: boolean, p4: number, p5: string, p6: string, showBg: boolean, p8: number): void;
	export function setWarningMessageWithHeader(titleMsg: string, p1: string, flags: number, promptMsg: string, p4: boolean, p5: number, p6: number, p7: number, showBg: boolean, p9: number): [void, number, number];
	export function setWarningMessage3(entryHeader: string, entryLine1: string, instructionalKey: number, entryLine2: string, p4: boolean, p5: number, p6: number, p7: number, p8: number, p9: boolean, p10: number): [void, number, number];
	export function setWarningMessageWithHeaderUnk(entryHeader: string, entryLine1: string, flags: number, entryLine2: string, p4: boolean, p5: number, p6: number, p7: number, showBg: boolean, p9: number, p10: number): [void, number, number];
	export function setWarningMessage4(p0: string, p1: string, p2: number, p3: number, p4: string, p5: boolean, p6: number, p7: number, p8: string, p9: string, p10: boolean, p11: number): void;
	export function getWarningMessageTitleHash(): number;
	export function setWarningMessageListRow(index: number, name: string, cash: number, rp: number, lvl: number, colour: number): boolean;
	export function _0xDAF87174BE7454FF(p0: number): boolean;
	export function removeWarningMessageListItems(): void;
	export function isWarningMessageActive(): boolean;
	export function clearDynamicPauseMenuErrorMessage(): void;
	export function setMapFullScreen(toggle: boolean): void;
	export function _0x1EAE6DD17B7A5EFA(p0: number): void;
	export function _0x551DF99658DB6EE8(p0: number, p1: number, p2: number): number;
	export function _0x2708FC083123F9FF(): void;
	export function forceSonarBlipsThisFrame(): number;
	export function _0x3F0CF9CB7E589B88(): number;
	export function _0x82CEDC33687E1F50(p0: boolean): void;
	export function _0x211C4EF450086857(): void;
	export function _0xBF4F34A85CA2970C(): void;
	export function activateFrontendMenu(menuhash: number, togglePause: boolean, component: number): void;
	export function restartFrontendMenu(menuHash: number, p1: number): void;
	export function getCurrentFrontendMenuVersion(): number;
	export function setPauseMenuActive(toggle: boolean): void;
	export function disableFrontendThisFrame(): void;
	export function suppressFrontendRenderingThisFrame(): void;
	export function allowPauseMenuWhenDeadThisFrame(): void;
	export function setFrontendActive(active: boolean): void;
	export function isPauseMenuActive(): boolean;
	export function _0x2F057596F2BD0061(): boolean;
	export function getPauseMenuState(): number;
	export function _0x5BFF36D6ED83E0AE(): Vector3;
	export function isPauseMenuRestarting(): boolean;
	export function logDebugInfo(p0: string): void;
	export function _0x77F16B447824DA6C(p0: number): void;
	export function _0xCDCA26E80FAECB8F(): void;
	export function _0x2DE6C5E2E996F178(p0: number): void;
	export function pauseMenuActivateContext(contextHash: number): void;
	export function pauseMenuDeactivateContext(contextHash: number): void;
	export function pauseMenuIsContextActive(contextHash: number): boolean;
	export function _0x2A25ADC48F87841F(): number;
	export function _0xDE03620F8703A9DF(): number;
	export function _0x359AF31A4B52F5ED(): number;
	export function _0x13C4B962653A5280(): number;
	export function _0xC8E1071177A23BE5(p0: number, p1: number, p2: number): [boolean, number, number, number];
	export function _0x4895BDEA16E7C080(p0: number): void;
	export function _0xC78E239AC5B2DDB9(p0: boolean, p1: number, p2: number): void;
	export function _0xF06EBB91A81E09E3(p0: boolean): void;
	export function isFrontendReadyForControl(): boolean;
	export function _0xEC9264727EEC0F28(): void;
	export function _0x14621BB1DF14E2B2(): void;
	export function _0x66E7CB63C97B7D20(): number;
	export function _0x593FEAE1F73392D4(): number;
	export function _0x4E3CD0EF8A489541(): number;
	export function _0xF284AC67940C6812(): number;
	export function _0x2E22FEFA0100275E(): number;
	export function _0x0CF54F20DE43879C(p0: number): void;
	export function _0x36C1451A88A09630(p0: number, p1: number): [void, number, number];
	export function _0x7E17BE53E1AAABAF(p0: number, p1: number, p2: number): [void, number, number, number];
	export function _0xA238192F33110615(p0: number, p1: number, p2: number): [boolean, number, number, number];
	export function _0xEF4CED81CEBEDC6D(p0: number, p1: number): [boolean, number];
	export function _0xCA6B2F7CE32AB653(p0: number, p1: number, p2: number): [boolean, number];
	export function _0x90A6526CF0381030(p0: number, p1: number, p2: number, p3: number): [boolean, number];
	export function _0x24A49BEAF468DC90(p0: number, p1: number, p2: number, p3: number, p4: number): [boolean, number];
	export function _0x5FBD7095FE7AE57F(p0: number, p1: number): [boolean, number];
	export function _0x8F08017F9D7C47BD(p0: number, p1: number, p2: number): [boolean, number];
	export function _0x052991E59076E4E4(p0: number, p1: number): [boolean, number];
	export function clearPedInPauseMenu(): void;
	export function givePedToPauseMenu(ped: number, p1: number): void;
	export function setPauseMenuPedLighting(p0: boolean): void;
	export function setPauseMenuPedSleepState(state: boolean): void;
	export function openOnlinePoliciesMenu(): void;
	export function _0xF13FE2A80C05C561(): boolean;
	export function isOnlinePoliciesMenuActive(): boolean;
	export function openSocialClubMenu(): void;
	export function closeSocialClubMenu(): void;
	export function setSocialClubTour(name: string): void;
	export function isSocialClubActive(): boolean;
	export function _0x1185A8087587322C(p0: boolean): void;
	export function forceCloseTextInputBox(): void;
	export function _0x577599CCED639CA2(p0: number): void;
	export function _0x6A1738B4323FE2D9(p0: number): void;
	export function isMultiplayerChatActive(): boolean;
	export function closeMultiplayerChat(): void;
	export function _0x7C226D5346D4D10A(p0: number): void;
	export function _0xF47E567B3630DD12(p0: number, p1: number): void;
	export function setTextChatUnk(p0: boolean): void;
	export function setIsInTournament(toggle: boolean): void;
	export function setPedHasAiBlip(ped: number, hasCone: boolean): void;
	export function setPedHasAiBlipWithColor(ped: number, hasCone: boolean, color: number): void;
	export function doesPedHaveAiBlip(ped: number): boolean;
	export function setPedAiBlipGangId(ped: number, gangId: number): void;
	export function setPedAiBlipHasCone(ped: number, toggle: boolean): void;
	export function setPedAiBlipForcedOn(ped: number, toggle: boolean): void;
	export function setPedAiBlipNoticeRange(ped: number, range: number): void;
	export function setPedAiBlipSprite(ped: number, spriteId: number): void;
	export function getAiBlip2(ped: number): number;
	export function getAiBlip(ped: number): number;
	export function hasDirectorModeBeenTriggered(): boolean;
	export function setDirectorModeClearTriggeredFlag(): void;
	export function setPlayerIsInDirectorMode(toggle: boolean): void;
	export function _0x04655F9D075D0AE5(toggle: boolean): void;
	export function getInteriorHeading(interior: number): number;
	export function getInteriorInfo(interior: number, position: vectorPtr, nameHash: number): [void, vectorPtr, number];
	export function getInteriorGroupId(interior: number): number;
	export function getOffsetFromInteriorInWorldCoords(interior: number, x: number, y: number, z: number): Vector3;
	export function isInteriorScene(): boolean;
	export function isValidInterior(interior: number): boolean;
	export function clearRoomForEntity(entity: number): void;
	export function forceRoomForEntity(entity: number, interior: number, roomHashKey: number): void;
	export function getRoomKeyFromEntity(entity: number): number;
	export function getKeyForEntityInRoom(entity: number): number;
	export function getInteriorFromEntity(entity: number): number;
	export function _0x82EBB79E258FA2B7(entity: number, interior: number): void;
	export function _0x38C1CB1CB119A016(p0: number, p1: number): void;
	export function forceRoomForGameViewport(interiorID: number, roomHashKey: number): void;
	export function _0xAF348AFCB575A441(roomName: string): void;
	export function _0x405DC2AEF6AF95B9(roomHashKey: number): void;
	export function getRoomKeyForGameViewport(): number;
	export function clearRoomForGameViewport(): void;
	export function _0xE7D267EC6CA966C3(): number;
	export function getInteriorAtCoords(x: number, y: number, z: number): number;
	export function addPickupToInteriorRoomByName(pickup: number, roomName: string): void;
	export function pinInteriorInMemory(interior: number): void;
	export function unpinInterior(interior: number): void;
	export function isInteriorReady(interior: number): boolean;
	export function _0x4C2330E61D3DEB56(interior: number): number;
	export function getInteriorAtCoordsWithType(x: number, y: number, z: number, interiorType: string): number;
	export function getInteriorAtCoordsWithTypehash(x: number, y: number, z: number, typeHash: number): number;
	export function _0x483ACA1176CA93F1(): void;
	export function areCoordsCollidingWithExterior(x: number, y: number, z: number): boolean;
	export function getInteriorFromCollision(x: number, y: number, z: number): number;
	export function _0x7ECDF98587E92DEC(p0: number): void;
	export function activateInteriorEntitySet(interior: number, entitySetName: string): void;
	export function deactivateInteriorEntitySet(interior: number, entitySetName: string): void;
	export function isInteriorEntitySetActive(interior: number, entitySetName: string): boolean;
	export function setInteriorEntitySetColor(interior: number, entitySetName: string, color: number): void;
	export function refreshInterior(interior: number): void;
	export function hideMapObjectThisFrame(mapObjectHash: number): void;
	export function _0x50C375537449F369(p0: number): void;
	export function disableInterior(interior: number, toggle: boolean): void;
	export function isInteriorDisabled(interior: number): boolean;
	export function capInterior(interior: number, toggle: boolean): void;
	export function isInteriorCapped(interior: number): boolean;
	export function _0x9E6542F0CE8E70A3(toggle: boolean): void;
	export function _0x7241CCB7D020DB69(entity: number, toggle: boolean): void;
	export function createItemset(p0: boolean): number;
	export function destroyItemset(p0: number): void;
	export function isItemsetValid(p0: number): boolean;
	export function addToItemset(p0: number, p1: number): boolean;
	export function removeFromItemset(p0: number, p1: number): void;
	export function getItemsetSize(x: number): number;
	export function getIndexedItemInItemset(p0: number, p1: number): number;
	export function isInItemset(p0: number, p1: number): boolean;
	export function cleanItemset(p0: number): void;
	export function _0xF2CA003F167E21D2(): number;
	export function loadingscreenGetLoadFreemode(): boolean;
	export function loadingscreenSetLoadFreemode(toggle: boolean): void;
	export function loadingscreenGetLoadFreemodeWithEventName(): boolean;
	export function loadingscreenSetLoadFreemodeWithEventName(toggle: boolean): void;
	export function loadingscreenIsLoadingFreemode(): boolean;
	export function loadingscreenSetIsLoadingFreemode(toggle: boolean): void;
	export function _0xFA1E0E893D915215(toggle: boolean): void;
	export function localizationGetSystemLanguage(): number;
	export function getCurrentLanguage(): number;
	export function localizationGetUserLanguage(): number;
	export function getAllocatedStackSize(): number;
	export function getNumberOfFreeStacksOfThisSize(stackSize: number): number;
	export function setRandomSeed(seed: number): void;
	export function setTimeScale(timeScale: number): void;
	export function setMissionFlag(toggle: boolean): void;
	export function getMissionFlag(): boolean;
	export function setRandomEventFlag(toggle: boolean): void;
	export function getRandomEventFlag(): boolean;
	export function getGlobalCharBuffer(): string;
	export function _0x4DCDF92BF64236CD(p0: string, p1: string): void;
	export function _0x31125FD509D9043F(p0: string): void;
	export function _0xEBD3205A207939ED(p0: string): void;
	export function _0x97E7E2C04245115B(p0: number): void;
	export function _0xEB078CA2B5E82ADD(p0: string, p1: string): void;
	export function _0x703CC7F60CBB2B57(p0: string): void;
	export function _0x8951EB9C6906D3C8(): void;
	export function _0xBA4B8D83BDC75551(p0: string): void;
	export function hasResumedFromSuspend(): boolean;
	export function _0x65D2EBB47E1CEC21(toggle: boolean): void;
	export function _0x6F2135B6129620C1(toggle: boolean): void;
	export function _0x8D74E26F54B4E5C3(p0: string): void;
	export function getBaseElementMetadata(p0: number, p1: number, p2: number, p3: boolean): [boolean, number, number];
	export function getPrevWeatherTypeHashName(): number;
	export function getNextWeatherTypeHashName(): number;
	export function isPrevWeatherType(weatherType: string): boolean;
	export function isNextWeatherType(weatherType: string): boolean;
	export function setWeatherTypePersist(weatherType: string): void;
	export function setWeatherTypeNowPersist(weatherType: string): void;
	export function setWeatherTypeNow(weatherType: string): void;
	export function setWeatherTypeOvertimePersist(weatherType: string, time: number): void;
	export function setRandomWeatherType(): void;
	export function clearWeatherTypePersist(): void;
	export function _0x0CF97F497FE7D048(p0: number): void;
	export function getWeatherTypeTransition(weatherType1: number, weatherType2: number, percentWeather2: number): [void, number, number, number];
	export function setWeatherTypeTransition(weatherType1: number, weatherType2: number, percentWeather2: number): void;
	export function setOverrideWeather(weatherType: string): void;
	export function clearOverrideWeather(): void;
	export function _0xB8F87EAD7533B176(p0: number): void;
	export function _0xC3EAD29AB273ECE8(p0: number): void;
	export function _0xA7A1127490312C36(p0: number): void;
	export function _0x31727907B2C43C55(p0: number): void;
	export function _0x405591EC8FD9096D(p0: number): void;
	export function _0xF751B16FB32ABC1D(p0: number): void;
	export function _0xB3E6360DDE733E82(p0: number): void;
	export function _0x7C9C0B1EEB1F9072(p0: number): void;
	export function _0x6216B116083A7CB4(p0: number): void;
	export function _0x9F5E6BB6B34540DA(p0: number): void;
	export function _0xB9854DFDE0D833D6(p0: number): void;
	export function _0xC54A08C85AE4D410(p0: number): void;
	export function _0xA8434F1DFF41D6E7(p0: number): void;
	export function _0xC3C221ADDDE31A11(p0: number): void;
	export function setWind(speed: number): void;
	export function setWindSpeed(speed: number): void;
	export function getWindSpeed(): number;
	export function setWindDirection(direction: number): void;
	export function getWindDirection(): Vector3;
	export function setRainFxIntensity(intensity: number): void;
	export function getRainLevel(): number;
	export function getSnowLevel(): number;
	export function forceLightningFlash(): void;
	export function _0x02DEAAC8F8EA7FE7(p0: string): void;
	export function preloadCloudHat(name: string): void;
	export function loadCloudHat(name: string, transitionTime: number): void;
	export function unloadCloudHat(name: string, p1: number): void;
	export function clearCloudHat(): void;
	export function setCloudHatOpacity(opacity: number): void;
	export function getCloudHatOpacity(): number;
	export function getGameTimer(): number;
	export function getFrameTime(): number;
	export function getBenchmarkTime(): number;
	export function getFrameCount(): number;
	export function getRandomFloatInRange(startRange: number, endRange: number): number;
	export function getRandomIntInRange(startRange: number, endRange: number): number;
	export function getGroundZFor3dCoord(x: number, y: number, z: number, groundZ: number, unk: boolean, p5: boolean): [boolean, number];
	export function getGroundZCoordWithOffsets(x: number, y: number, z: number, groundZ: number, offsets: vectorPtr): [boolean, number, vectorPtr];
	export function _0x9E82F0F362881B29(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): number;
	export function asin(p0: number): number;
	export function acos(p0: number): number;
	export function tan(p0: number): number;
	export function atan(p0: number): number;
	export function atan2(p0: number, p1: number): number;
	export function getDistanceBetweenCoords(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, useZ: boolean): number;
	export function getAngleBetween2dVectors(x1: number, y1: number, x2: number, y2: number): number;
	export function getHeadingFromVector2d(dx: number, dy: number): number;
	export function _0x7F8F6405F4777AF6(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: boolean): number;
	export function _0x21C235BC64831E5A(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: boolean): Vector3;
	export function _0xF56DFB7B61BE7276(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, p10: number, p11: number, p12: number): [boolean, number];
	export function setBit(address: number, offset: number): [void, number];
	export function clearBit(address: number, offset: number): [void, number];
	export function getHashKey(string: string): number;
	export function _0xF2F6A2FA49278625(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, p10: number, p11: number, p12: number): [void, number, number, number, number];
	export function isAreaOccupied(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: boolean, p7: boolean, p8: boolean, p9: boolean, p10: boolean, p11: number, p12: boolean): boolean;
	export function isPositionOccupied(x: number, y: number, z: number, range: number, p4: boolean, p5: boolean, p6: boolean, p7: boolean, p8: boolean, p9: number, p10: boolean): boolean;
	export function isPointObscuredByAMissionEntity(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): boolean;
	export function clearArea(X: number, Y: number, Z: number, radius: number, p4: boolean, ignoreCopCars: boolean, ignoreObjects: boolean, p7: boolean): void;
	export function clearAreaOfEverything(x: number, y: number, z: number, radius: number, p4: boolean, p5: boolean, p6: boolean, p7: boolean): void;
	export function clearAreaOfVehicles(x: number, y: number, z: number, radius: number, p4: boolean, p5: boolean, p6: boolean, p7: boolean, p8: boolean, p9: boolean): void;
	export function clearAngledAreaOfVehicles(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: boolean, p8: boolean, p9: boolean, p10: boolean, p11: boolean, p12: number): void;
	export function clearAreaOfObjects(x: number, y: number, z: number, radius: number, flags: number): void;
	export function clearAreaOfPeds(x: number, y: number, z: number, radius: number, flags: number): void;
	export function clearAreaOfCops(x: number, y: number, z: number, radius: number, flags: number): void;
	export function clearAreaOfProjectiles(x: number, y: number, z: number, radius: number, flags: number): void;
	export function _0x7EC6F9A478A6A512(): void;
	export function setSaveMenuActive(ignoreVehicle: boolean): void;
	export function _0x397BAA01068BAA96(): number;
	export function setCreditsActive(toggle: boolean): void;
	export function _0xB51B9AB9EF81868C(toggle: boolean): void;
	export function haveCreditsReachedEnd(): boolean;
	export function terminateAllScriptsWithThisName(scriptName: string): void;
	export function networkSetScriptIsSafeForNetworkGame(): void;
	export function addHospitalRestart(x: number, y: number, z: number, p3: number, p4: number): number;
	export function disableHospitalRestart(hospitalIndex: number, toggle: boolean): void;
	export function addPoliceRestart(p0: number, p1: number, p2: number, p3: number, p4: number): number;
	export function disablePoliceRestart(policeIndex: number, toggle: boolean): void;
	export function setRestartCustomPosition(x: number, y: number, z: number, heading: number): void;
	export function clearRestartCustomPosition(): void;
	export function pauseDeathArrestRestart(toggle: boolean): void;
	export function ignoreNextRestart(toggle: boolean): void;
	export function setFadeOutAfterDeath(toggle: boolean): void;
	export function setFadeOutAfterArrest(toggle: boolean): void;
	export function setFadeInAfterDeathArrest(toggle: boolean): void;
	export function setFadeInAfterLoad(toggle: boolean): void;
	export function registerSaveHouse(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): [number, number];
	export function setSaveHouse(p0: number, p1: boolean, p2: boolean): void;
	export function overrideSaveHouse(p0: boolean, p1: number, p2: number, p3: number, p4: number, p5: boolean, p6: number, p7: number): boolean;
	export function _0xA4A0065E39C9F25C(p0: vectorPtr, p1: number, fadeInAfterLoad: boolean, p3: boolean): [boolean, vectorPtr, number, boolean, boolean];
	export function doAutoSave(): void;
	export function getIsAutoSaveOff(): boolean;
	export function isAutoSaveInProgress(): boolean;
	export function _0x2107A3773771186D(): boolean;
	export function _0x06462A961E94B67C(): void;
	export function beginReplayStats(p0: number, p1: number): void;
	export function addReplayStatValue(value: number): void;
	export function endReplayStats(): void;
	export function _0xD642319C54AADEB6(): number;
	export function _0x5B1F2E327B6B6FE1(): number;
	export function getReplayStatMissionType(): number;
	export function getReplayStatCount(): number;
	export function getReplayStatAtIndex(index: number): number;
	export function clearReplayStats(): void;
	export function _0x72DE52178C291CB5(): number;
	export function _0x44A0BDC559B35F6E(): number;
	export function _0xEB2104E905C6F2E9(): number;
	export function _0x2B5E102E4A42F2BF(): number;
	export function isMemoryCardInUse(): boolean;
	export function shootSingleBulletBetweenCoords(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, damage: number, p7: boolean, weaponHash: number, ownerPed: number, isAudible: boolean, isInvisible: boolean, speed: number): void;
	export function shootSingleBulletBetweenCoordsIgnoreEntity(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, damage: number, p7: boolean, weaponHash: number, ownerPed: number, isAudible: boolean, isInvisible: boolean, speed: number, entity: number, p14: number): void;
	export function shootSingleBulletBetweenCoordsIgnoreEntityNew(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, damage: number, p7: boolean, weaponHash: number, ownerPed: number, isAudible: boolean, isInvisible: boolean, speed: number, entity: number, p14: boolean, p15: boolean, p16: boolean, p17: boolean, p18: number, p19: number): void;
	export function getModelDimensions(modelHash: number, minimum: vectorPtr, maximum: vectorPtr): [void, vectorPtr, vectorPtr];
	export function setFakeWantedLevel(fakeWantedLevel: number): void;
	export function getFakeWantedLevel(): number;
	export function isBitSet(address: number, offset: number): boolean;
	export function usingMissionCreator(toggle: boolean): void;
	export function allowMissionCreatorWarp(toggle: boolean): void;
	export function setMinigameInProgress(toggle: boolean): void;
	export function isMinigameInProgress(): boolean;
	export function isThisAMinigameScript(): boolean;
	export function isSniperInverted(): boolean;
	export function shouldUseMetricMeasurements(): boolean;
	export function getProfileSetting(profileSetting: number): number;
	export function areStringsEqual(string1: string, string2: string): boolean;
	export function compareStrings(str1: string, str2: string, matchCase: boolean, maxLength: number): number;
	export function absi(value: number): number;
	export function absf(value: number): number;
	export function isSniperBulletInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): boolean;
	export function isProjectileInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, ownedByPlayer: boolean): boolean;
	export function isProjectileTypeInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, type: number, p7: boolean): boolean;
	export function isProjectileTypeInAngledArea(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: boolean): boolean;
	export function isProjectileTypeInRadius(p0: number, p1: number, p2: number, p3: number, p4: number, p5: boolean): boolean;
	export function getIsProjectileTypeInArea(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number): number;
	export function getProjectileNearPedCoords(ped: number, weaponHash: number, radius: number, entity: number, p4: boolean): [boolean, number];
	export function getProjectileNearPed(ped: number, weaponhash: number, p2: number, p3: number, p4: number, p5: boolean): boolean;
	export function isBulletInAngledArea(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: boolean): boolean;
	export function isBulletInArea(p0: number, p1: number, p2: number, p3: number, p4: boolean): boolean;
	export function isBulletInBox(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: boolean): boolean;
	export function hasBulletImpactedInArea(x: number, y: number, z: number, p3: number, p4: boolean, p5: boolean): boolean;
	export function hasBulletImpactedInBox(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: boolean, p7: boolean): boolean;
	export function isOrbisVersion(): boolean;
	export function isDurangoVersion(): boolean;
	export function isXbox360Version(): boolean;
	export function isPs3Version(): boolean;
	export function isPcVersion(): boolean;
	export function isAussieVersion(): boolean;
	export function isStringNull(string: string): boolean;
	export function isStringNullOrEmpty(string: string): boolean;
	export function stringToInt(string: string, outInteger: number): [boolean, number];
	export function setBitsInRange(unkVar: number, rangeStart: number, rangeEnd: number, p3: number): [void, number];
	export function getBitsInRange(unkVar: number, rangeStart: number, rangeEnd: number): number;
	export function addStuntJump(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, p10: number, p11: number, p12: number, p13: number, p14: number, p15: number, p16: number, p17: number): number;
	export function addStuntJumpAngled(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, p10: number, p11: number, p12: number, p13: number, p14: number, p15: number, p16: number, p17: number, p18: number, p19: number): number;
	export function _0xFB80AB299D2EE1BD(toggle: boolean): void;
	export function deleteStuntJump(p0: number): void;
	export function enableStuntJumpSet(p0: number): void;
	export function disableStuntJumpSet(p0: number): void;
	export function setStuntJumpsCanTrigger(toggle: boolean): void;
	export function isStuntJumpInProgress(): boolean;
	export function isStuntJumpMessageShowing(): boolean;
	export function getNumSuccessfulStuntJumps(): number;
	export function getTotalSuccessfulStuntJumps(): number;
	export function cancelStuntJump(): void;
	export function setGamePaused(toggle: boolean): void;
	export function setThisScriptCanBePaused(toggle: boolean): void;
	export function setThisScriptCanRemoveBlipsCreatedByAnyScript(toggle: boolean): void;
	export function hasButtonCombinationJustBeenEntered(hash: number, amount: number): boolean;
	export function hasCheatStringJustBeenEntered(hash: number): boolean;
	export function useFreemodeMapBehavior(p0: number): void;
	export function setUnkMapFlag(flag: number): void;
	export function isFrontendFading(): boolean;
	export function populateNow(): void;
	export function getIndexOfCurrentLevel(): number;
	export function setGravityLevel(level: number): void;
	export function startSaveData(p0: number, p1: number, p2: boolean): [void, number];
	export function stopSaveData(): void;
	export function _0xA09F896CE912481F(p0: boolean): number;
	export function registerIntToSave(p0: number, name: string): [void, number];
	export function registerInt64ToSave(p0: number, name: string): [void, number];
	export function registerEnumToSave(p0: number, name: string): [void, number];
	export function registerFloatToSave(p0: number, name: string): [void, number];
	export function registerBoolToSave(p0: number, name: string): [void, number];
	export function registerTextLabelToSave(p0: number, name: string): [void, number];
	export function registerTextLabelToSave2(p0: number, name: string): [void, number];
	export function _0x48F069265A0E4BEC(p0: number, name: string): [void, number];
	export function _0x8269816F6CFD40F8(p0: number, name: string): [void, number];
	export function _0xFAA457EF263E8763(p0: number, name: string): [void, number];
	export function startSaveStructWithSize(p0: number, size: number, structName: string): [void, number];
	export function stopSaveStruct(): void;
	export function startSaveArrayWithSize(p0: number, size: number, arrayName: string): [void, number];
	export function stopSaveArray(): void;
	export function copyMemory(dst: number, src: number, size: number): [void, number, number];
	export function enableDispatchService(dispatchService: number, toggle: boolean): void;
	export function blockDispatchServiceResourceCreation(dispatchService: number, toggle: boolean): void;
	export function getNumDispatchedUnitsForPlayer(dispatchService: number): number;
	export function createIncident(dispatchService: number, x: number, y: number, z: number, numUnits: number, radius: number, outIncidentID: number, p7: number, p8: number): [boolean, number];
	export function createIncidentWithEntity(dispatchService: number, ped: number, numUnits: number, radius: number, outIncidentID: number, p5: number, p6: number): [boolean, number];
	export function deleteIncident(incidentId: number): void;
	export function isIncidentValid(incidentId: number): boolean;
	export function setIncidentRequestedUnits(incidentId: number, dispatchService: number, numUnits: number): void;
	export function setIncidentUnk(incidentId: number, p1: number): void;
	export function findSpawnPointInDirection(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, distance: number, spawnPoint: vectorPtr): [boolean, vectorPtr];
	export function addPopMultiplierArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p6: number, p7: number, p8: boolean, p9: boolean): number;
	export function doesPopMultiplierAreaExist(id: number): boolean;
	export function removePopMultiplierArea(id: number, p1: boolean): void;
	export function isPopMultiplierAreaUnk(id: number): boolean;
	export function addPopMultiplierSphere(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: boolean, p7: boolean): number;
	export function doesPopMultiplierSphereExist(id: number): boolean;
	export function removePopMultiplierSphere(id: number, p1: boolean): void;
	export function enableTennisMode(ped: number, toggle: boolean, p2: boolean): void;
	export function isTennisMode(ped: number): boolean;
	export function playTennisSwingAnim(ped: number, animDict: string, animName: string, p3: number, p4: number, p5: boolean): void;
	export function getTennisSwingAnimComplete(ped: number): boolean;
	export function _0x19BFED045C647C49(ped: number): boolean;
	export function _0xE95B0C7D5BA3B96B(ped: number): boolean;
	export function playTennisDiveAnim(ped: number, p1: number, p2: number, p3: number, p4: number, p5: boolean): void;
	export function _0x54F157E0336A3822(ped: number, p1: string, p2: number): void;
	export function setDispatchSpawnLocation(x: number, y: number, z: number): void;
	export function resetDispatchIdealSpawnDistance(): void;
	export function setDispatchIdealSpawnDistance(p0: number): void;
	export function resetDispatchTimeBetweenSpawnAttempts(p0: number): void;
	export function setDispatchTimeBetweenSpawnAttempts(p0: number, p1: number): void;
	export function setDispatchTimeBetweenSpawnAttemptsMultiplier(p0: number, p1: number): void;
	export function _0x918C7B2D2FF3928B(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): number;
	export function _0x2D4259F1FEB81DA9(p0: number, p1: number, p2: number, p3: number): number;
	export function removeDispatchSpawnBlockingArea(p0: number): void;
	export function resetDispatchSpawnBlockingAreas(): void;
	export function _0xD9F692D349249528(): void;
	export function _0xE532EC1A63231B4F(p0: number, p1: number): void;
	export function _0xB8721407EE9C3FF6(p0: number, p1: number, p2: number): void;
	export function _0xB3CD58CCA6CDA852(): void;
	export function _0x2587A48BC88DFADF(p0: boolean): void;
	export function displayOnscreenKeyboard2(p0: number, windowTitle: string, p2: number, defaultText: string, defaultConcat1: string, defaultConcat2: string, defaultConcat3: string, defaultConcat4: string, defaultConcat5: string, defaultConcat6: string, defaultConcat7: string, maxInputLength: number): [void, number];
	export function displayOnscreenKeyboard(p0: number, windowTitle: string, p2: string, defaultText: string, defaultConcat1: string, defaultConcat2: string, defaultConcat3: string, maxInputLength: number): void;
	export function updateOnscreenKeyboard(): number;
	export function getOnscreenKeyboardResult(): string;
	export function cancelOnscreenKeyboard(): void;
	export function _0x3ED1438C1F5C6612(p0: number): void;
	export function removeStealthKill(hash: number, p1: boolean): void;
	export function _0x1EAE0A6E978894A2(p0: number, p1: boolean): void;
	export function setExplosiveAmmoThisFrame(player: number): void;
	export function setFireAmmoThisFrame(player: number): void;
	export function setExplosiveMeleeThisFrame(player: number): void;
	export function setSuperJumpThisFrame(player: number): void;
	export function _0x438822C279B73B93(p0: number): void;
	export function _0xA1183BCFEE0F93D1(p0: number): void;
	export function _0x6FDDF453C0C756EC(): boolean;
	export function _0xFB00CA71DA386228(): void;
	export function areProfileSettingsValid(): boolean;
	export function _0xE3D969D2785FFB5E(): void;
	export function resetLocalplayerState(): void;
	export function _0x0A60017F841A54F2(p0: number, p1: number, p2: number, p3: number): void;
	export function _0x1FF6BF9A63E5757F(): void;
	export function _0x1BB299305C3E8C13(p0: number, p1: number, p2: number, p3: number): void;
	export function _0x8EF5573A1F801A5C(p0: number, p1: number, p2: number): [boolean, number, number];
	export function startBenchmarkRecording(): void;
	export function stopBenchmarkRecording(): void;
	export function resetBenchmarkRecording(): void;
	export function saveBenchmarkRecording(): void;
	export function uiIsSingleplayerPauseMenuActive(): boolean;
	export function landingMenuIsActive(): boolean;
	export function isCommandLineBenchmarkValueSet(): boolean;
	export function getBenchmarkIterationsFromCommandLine(): number;
	export function getBenchmarkPassFromCommandLine(): number;
	export function restartGame(): void;
	export function forceSocialClubUpdate(): void;
	export function hasAsyncInstallFinished(): boolean;
	export function cleanupAsyncInstall(): void;
	export function isInPowerSavingMode(): boolean;
	export function getPowerSavingModeDuration(): number;
	export function setPlayerIsInAnimalForm(toggle: boolean): void;
	export function getIsPlayerInAnimalForm(): boolean;
	export function setPlayerRockstarEditorDisabled(toggle: boolean): void;
	export function _0x23227DF0B2115469(): void;
	export function _0xD10282B6E3751BA0(): number;
	export function _0x693478ACBD7F18E7(): void;
	export function createMobilePhone(phoneType: number): void;
	export function destroyMobilePhone(): void;
	export function setMobilePhoneScale(scale: number): void;
	export function setMobilePhoneRotation(rotX: number, rotY: number, rotZ: number, p3: number): void;
	export function getMobilePhoneRotation(rotation: vectorPtr, p1: number): [void, vectorPtr];
	export function setMobilePhonePosition(posX: number, posY: number, posZ: number): void;
	export function getMobilePhonePosition(position: vectorPtr): [void, vectorPtr];
	export function scriptIsMovingMobilePhoneOffscreen(toggle: boolean): void;
	export function canPhoneBeSeenOnScreen(): boolean;
	export function setMobilePhoneUnk(toggle: boolean): void;
	export function cellCamMoveFinger(direction: number): void;
	export function cellCamSetLean(toggle: boolean): void;
	export function cellCamActivate(p0: boolean, p1: boolean): void;
	export function cellCamDisableThisFrame(toggle: boolean): void;
	export function _0xA2CCBE62CD4C91A4(toggle: number): [void, number];
	export function _0x1B0B4AEED5B9B41C(p0: number): void;
	export function _0x53F4892D18EC90A4(p0: number): void;
	export function _0x3117D84EFA60F77B(p0: number): void;
	export function _0x15E69E2802C24B8D(p0: number): void;
	export function _0xAC2890471901861C(p0: number): void;
	export function _0xD6ADE981781FCA09(p0: number): void;
	export function _0xF1E22DC13F5EEBAD(p0: number): void;
	export function _0x466DA42C89865553(p0: number): void;
	export function cellCamIsCharVisibleNoFaceCheck(entity: number): boolean;
	export function getMobilePhoneRenderId(renderId: number): [void, number];
	export function networkInitializeCash(wallet: number, bank: number): void;
	export function networkDeleteCharacter(characterSlot: number, p1: boolean, p2: boolean): void;
	export function networkManualDeleteCharacter(characterSlot: number): void;
	export function networkGetIsHighEarner(): boolean;
	export function networkClearCharacterWallet(characterSlot: number): void;
	export function networkGivePlayerJobshareCash(amount: number, networkHandle: number): [void, number];
	export function networkReceivePlayerJobshareCash(value: number, networkHandle: number): [void, number];
	export function networkCanShareJobCash(): boolean;
	export function networkRefundCash(index: number, context: string, reason: string, unk: boolean): void;
	export function networkDeductCash(amount: number, p1: string, p2: string, p3: boolean, p4: boolean, p5: boolean): void;
	export function networkMoneyCanBet(amount: number, p1: boolean, p2: boolean): boolean;
	export function networkCanBet(amount: number): boolean;
	export function networkCanBuyLotteryTicket(cost: number): boolean;
	export function _0xCD0F5B5D932AE473(): void;
	export function canPayGoon(p0: number, p1: number, amount: number, p3: number): [boolean, number];
	export function networkEarnFromCashingOut(amount: number): void;
	export function networkEarnFromPickup(amount: number): void;
	export function networkEarnFromGangPickup(amount: number): void;
	export function networkEarnFromAssassinateTargetKilled(amount: number): void;
	export function networkEarnFromArmourTruck(amount: number): void;
	export function networkEarnFromCrateDrop(amount: number): void;
	export function networkEarnFromBetting(amount: number, p1: string): void;
	export function networkEarnFromJob(amount: number, p1: string): void;
	export function networkEarnFromPremiumJob(amount: number, p1: string): void;
	export function networkEarnFromBendJob(amount: number, heistHash: string): void;
	export function networkEarnFromChallengeWin(p0: number, p1: number, p2: boolean): [void, number];
	export function networkEarnFromBounty(amount: number, networkHandle: number, p2: number, p3: number): [void, number, number];
	export function networkEarnFromImportExport(amount: number, modelHash: number): void;
	export function networkEarnFromHoldups(amount: number): void;
	export function networkEarnFromProperty(amount: number, propertyName: number): void;
	export function networkEarnFromAiTargetKill(p0: number, p1: number): void;
	export function networkEarnFromNotBadsport(amount: number): void;
	export function networkEarnFromRockstar(amount: number): void;
	export function networkEarnFromVehicle(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number): void;
	export function networkEarnFromPersonalVehicle(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number): void;
	export function networkEarnFromDailyObjectives(p0: number, p1: string, p2: number): void;
	export function networkEarnFromAmbientJob(p0: number, p1: string, p2: number): [void, number];
	export function _0xD20D79671A598594(p0: number, p1: number, p2: number): void;
	export function networkEarnFromJobBonus(p0: number, p1: number, p2: number): [void, number, number];
	export function _0x9D4FDBB035229669(p0: number, p1: number, p2: number): void;
	export function _0x11B0A20C493F7E36(p0: number, p1: number, p2: number): void;
	export function _0xCDA1C62BE2777802(p0: number, p1: number, p2: number): void;
	export function _0x08B0CA7A6AB3AC32(p0: number, p1: number, p2: number): void;
	export function _0x0CB1BE0633C024A8(p0: number, p1: number, p2: number, p3: number): void;
	export function networkEarnFromWarehouse(amount: number, id: number): void;
	export function networkEarnFromContraband(amount: number, p1: number): void;
	export function _0x84C0116D012E8FC2(p0: number): void;
	export function _0x6B7E4FB50D5F3D65(p0: number, p1: number, p2: number, p3: number, p4: number): void;
	export function _0x31BA138F6304FB9F(p0: number, p1: number): void;
	export function _0x55A1E095DB052FA5(p0: number, p1: number): void;
	export function networkEarnFromBusinessProduct(amount: number, p1: number, p2: number, p3: number): void;
	export function networkEarnFromVehicleExport(amount: number, p1: number, p2: number): void;
	export function networkEarnFromSmuggling(amount: number, p1: number, p2: number, p3: number): void;
	export function _0xF6B170F9A02E9E87(p0: number): void;
	export function _0x42FCE14F50F27291(p0: number): void;
	export function _0xA75EAC69F59E96E7(p0: number): void;
	export function _0xC5156361F26E2212(p0: number): void;
	export function _0x0B39CF0D53F1C883(p0: number, p1: number, p2: number): void;
	export function _0x1FDA0AA679C9919B(p0: number): void;
	export function _0xFFFBA1B1F7C0B6F4(p0: number): void;
	export function networkCanSpendMoney(p0: number, p1: boolean, p2: boolean, p3: boolean, p4: number, p5: number): boolean;
	export function networkCanSpendMoney2(p0: number, p1: boolean, p2: boolean, p3: boolean, p4: number, p5: number, p6: number): [boolean, number];
	export function networkBuyItem(player: number, item: number, p2: number, p3: number, p4: boolean, item_name: string, p6: number, p7: number, p8: number, p9: boolean): void;
	export function networkSpentTaxi(amount: number, p1: boolean, p2: boolean): void;
	export function networkPayEmployeeWage(p0: number, p1: boolean, p2: boolean): void;
	export function networkPayUtilityBill(amount: number, p1: boolean, p2: boolean): void;
	export function networkPayMatchEntryFee(amount: number, matchId: string, p2: boolean, p3: boolean): void;
	export function networkSpentBetting(amount: number, p1: number, matchId: string, p3: boolean, p4: boolean): void;
	export function networkSpentWager(p0: number, p1: number, amount: number): void;
	export function networkSpentInStripclub(p0: number, p1: boolean, p2: number, p3: boolean): void;
	export function networkBuyHealthcare(cost: number, p1: boolean, p2: boolean): void;
	export function networkBuyAirstrike(cost: number, p1: boolean, p2: boolean): void;
	export function networkBuyBackupGang(p0: number, p1: number, p2: boolean, p3: boolean): void;
	export function networkBuyHeliStrike(cost: number, p1: boolean, p2: boolean): void;
	export function networkSpentAmmoDrop(p0: number, p1: boolean, p2: boolean): void;
	export function networkBuyBounty(amount: number, victim: number, p2: boolean, p3: boolean): void;
	export function networkBuyProperty(cost: number, propertyName: number, p2: boolean, p3: boolean): void;
	export function networkBuySmokes(p0: number, p1: boolean, p2: boolean): void;
	export function networkSpentHeliPickup(p0: number, p1: boolean, p2: boolean): void;
	export function networkSpentBoatPickup(p0: number, p1: boolean, p2: boolean): void;
	export function networkSpentBullShark(p0: number, p1: boolean, p2: boolean): void;
	export function networkSpentCashDrop(amount: number, p1: boolean, p2: boolean): void;
	export function networkSpentHireMugger(p0: number, p1: boolean, p2: boolean): void;
	export function networkSpentRobbedByMugger(amount: number, p1: boolean, p2: boolean): void;
	export function networkSpentHireMercenary(p0: number, p1: boolean, p2: boolean): void;
	export function networkSpentBuyWantedlevel(p0: number, p1: number, p2: boolean, p3: boolean): [void, number];
	export function networkSpentBuyOfftheradar(p0: number, p1: boolean, p2: boolean): void;
	export function networkSpentBuyRevealPlayers(p0: number, p1: boolean, p2: boolean): void;
	export function networkSpentCarwash(p0: number, p1: number, p2: number, p3: boolean, p4: boolean): void;
	export function networkSpentCinema(p0: number, p1: number, p2: boolean, p3: boolean): void;
	export function networkSpentTelescope(p0: number, p1: boolean, p2: boolean): void;
	export function networkSpentHoldups(p0: number, p1: boolean, p2: boolean): void;
	export function networkSpentBuyPassiveMode(p0: number, p1: boolean, p2: boolean): void;
	export function networkSpentBankInterest(p0: number, p1: boolean, p2: boolean): void;
	export function networkSpentProstitutes(p0: number, p1: boolean, p2: boolean): void;
	export function networkSpentArrestBail(p0: number, p1: boolean, p2: boolean): void;
	export function networkSpentPayVehicleInsurancePremium(amount: number, vehicleModel: number, networkHandle: number, notBankrupt: boolean, hasTheMoney: boolean): [void, number];
	export function networkSpentCallPlayer(p0: number, p1: number, p2: boolean, p3: boolean): [void, number];
	export function networkSpentBounty(p0: number, p1: boolean, p2: boolean): void;
	export function networkSpentFromRockstar(p0: number, p1: boolean, p2: boolean): void;
	export function _0x9B5016A6433A68C5(): number;
	export function processCashGift(p0: number, p1: number, p2: string): [string, number, number];
	export function networkSpentPlayerHealthcare(p0: number, p1: number, p2: boolean, p3: boolean): void;
	export function networkSpentNoCops(p0: number, p1: boolean, p2: boolean): void;
	export function networkSpentRequestJob(p0: number, p1: boolean, p2: boolean): void;
	export function networkSpentRequestHeist(p0: number, p1: boolean, p2: boolean): void;
	export function networkBuyLotteryTicket(p0: number, p1: number, p2: boolean, p3: boolean): void;
	export function networkBuyFairgroundRide(amount: number, p1: number, p2: boolean, p3: boolean): void;
	export function _0x7C4FCCD2E4DEB394(): boolean;
	export function networkSpentJobSkip(amount: number, matchId: string, p2: boolean, p3: boolean): void;
	export function networkSpentBoss(amount: number, p1: boolean, p2: boolean): boolean;
	export function networkSpentPayGoon(p0: number, p1: number, amount: number): void;
	export function _0xDBC966A01C02BCA7(p0: number, p1: number, p2: number): void;
	export function networkSpentMoveYacht(amount: number, p1: boolean, p2: boolean): void;
	export function _0xFC4EE00A7B3BFB76(p0: number, p1: number, p2: number): void;
	export function networkBuyContraband(p0: number, p1: number, p2: number, p3: boolean, p4: boolean): void;
	export function networkSpentVipUtilityCharges(p0: number, p1: number, p2: number): void;
	export function _0x112209CE0290C03A(p0: number, p1: number, p2: number, p3: number): void;
	export function _0xED5FD7AF10F5E262(p0: number, p1: number, p2: number, p3: number): void;
	export function _0x0D30EB83668E63C5(p0: number, p1: number, p2: number, p3: number): void;
	export function _0xB49ECA122467D05F(p0: number, p1: number, p2: number, p3: number): void;
	export function _0xE23ADC6FCB1F29AE(p0: number, p1: number, p2: number): void;
	export function _0x0FE8E1FCD2B86B33(p0: number, p1: number, p2: number, p3: number): void;
	export function _0x69EF772B192614C1(p0: number, p1: number, p2: number, p3: number): void;
	export function _0x8E243837643D9583(p0: number, p1: number, p2: number, p3: number): void;
	export function _0xBD0EFB25CCA8F97A(p0: number, p1: number, p2: number, p3: number): void;
	export function _0xA95F667A755725DA(p0: number, p1: number, p2: number, p3: number): void;
	export function networkSpentPurchaseWarehouse(amount: number, data: number, p2: boolean, p3: boolean): [void, number];
	export function _0x4128464231E3CA0B(p0: number, p1: number, p2: number, p3: number): void;
	export function _0x2FAB6614CE22E196(p0: number, p1: number, p2: number, p3: number): void;
	export function _0x05F04155A226FBBF(p0: number, p1: number, p2: number, p3: number): void;
	export function _0xE8B0B270B6E7C76E(p0: number, p1: number, p2: number, p3: number): void;
	export function _0x5BCDE0F640C773D2(p0: number, p1: number, p2: number, p3: number): void;
	export function _0x998E18CEB44487FC(p0: number, p1: number, p2: number, p3: number): void;
	export function _0xFA07759E6FDDD7CF(p0: number, p1: number, p2: number, p3: number): void;
	export function _0x6FD97159FE3C971A(p0: number, p1: number, p2: number, p3: number): void;
	export function _0x675D19C6067CAE08(p0: number, p1: number, p2: number, p3: number): void;
	export function _0xA51B086B0B2C0F7A(p0: number, p1: number, p2: number, p3: number): void;
	export function _0xD7CCCBA28C4ECAF0(p0: number, p1: number, p2: number, p3: number, p4: number): void;
	export function _0x0035BB914316F1E3(p0: number, p1: number, p2: number, p3: number): void;
	export function _0x5F456788B05FAEAC(p0: number, p1: number, p2: number): void;
	export function _0xA75CCF58A60A5FD1(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number): void;
	export function _0xB4C2EC463672474E(p0: number, p1: number, p2: number, p3: number): void;
	export function _0x2AFC2D19B50797F2(p0: number, p1: number, p2: number, p3: number): void;
	export function networkSpentImportExportRepair(p0: number, p1: number, p2: number): void;
	export function networkSpentPurchaseHangar(p0: number, p1: number, p2: number, p3: number): void;
	export function networkSpentUpgradeHangar(p0: number, p1: number, p2: number, p3: number): void;
	export function networkSpentHangarUtilityCharges(amount: number, p1: boolean, p2: boolean): void;
	export function networkSpentHangarStaffCharges(amount: number, p1: boolean, p2: boolean): void;
	export function networkSpentBuyTruck(p0: number, p1: number, p2: number, p3: number): void;
	export function networkSpentUpgradeTruck(p0: number, p1: number, p2: number, p3: number): void;
	export function networkSpentBuyBunker(p0: number, p1: number, p2: number, p3: number): void;
	export function networkSpentUpgradeBunker(p0: number, p1: number, p2: number, p3: number): void;
	export function networkEarnFromSellBunker(amount: number, bunkerHash: number): void;
	export function networkSpentBallisticEquipment(amount: number, p1: boolean, p2: boolean): void;
	export function networkEarnFromRdrBonus(amount: number, p1: number): void;
	export function networkEarnFromWagePayment(amount: number): void;
	export function networkEarnFromWagePaymentBonus(amount: number): void;
	export function networkSpentBuyBase(p0: number, p1: number, p2: number, p3: number): void;
	export function networkSpentUpgradeBase(p0: number, p1: number, p2: number, p3: number): void;
	export function networkSpentBuyTiltrotor(p0: number, p1: number, p2: number, p3: number): void;
	export function networkSpentUpgradeTiltrotor(p0: number, p1: number, p2: number, p3: number): void;
	export function networkSpentEmployAssassins(p0: number, p1: number, p2: number, p3: number): void;
	export function networkSpentGangopsCannon(p0: number, p1: number, p2: number, p3: number): void;
	export function networkSpentGangopsStartMission(p0: number, p1: number, p2: number, p3: number): void;
	export function networkEarnFromSellBase(amount: number, baseNameHash: number): void;
	export function networkEarnFromTargetRefund(amount: number, p1: number): void;
	export function networkEarnFromGangopsWages(amount: number, p1: number): void;
	export function networkEarnFromGangopsWagesBonus(amount: number, p1: number): void;
	export function networkEarnFromDarChallenge(amount: number, p1: number): void;
	export function networkEarnFromDoomsdayFinaleBonus(amount: number, vehicleHash: number): void;
	export function networkEarnFromGangopsAwards(amount: number, unk: string, p2: number): void;
	export function networkEarnFromGangopsElite(amount: number, unk: string, actIndex: number): void;
	export function networkRivalDeliveryCompleted(earnedMoney: number): void;
	export function networkSpentGangopsStartStrand(type: number, amount: number, p2: boolean, p3: boolean): void;
	export function networkSpentGangopsTripSkip(amount: number, p1: boolean, p2: boolean): void;
	export function networkEarnFromGangopsJobsPrepParticipation(amount: number): void;
	export function networkEarnFromGangopsJobsSetup(amount: number, unk: string): void;
	export function networkEarnFromGangopsJobsFinale(amount: number, unk: string): void;
	export function _0x2A7CEC72C3443BCC(p0: number, p1: number, p2: number): void;
	export function _0xE0F82D68C7039158(p0: number): void;
	export function _0xB4DEAE67F35E2ACD(p0: number): void;
	export function networkEarnFromBbEventBonus(amount: number): void;
	export function _0x2A93C46AAB1EACC9(p0: number, p1: number, p2: number, p3: number): void;
	export function _0x226C284C830D0CA8(p0: number, p1: number, p2: number, p3: number): void;
	export function networkEarnFromHackerTruckMission(p0: number, amount: number, p2: number, p3: number): void;
	export function _0xED76D195E6E3BF7F(p0: number, p1: number, p2: number, p3: number): void;
	export function _0x1DC9B749E7AE282B(p0: number, p1: number, p2: number, p3: number): void;
	export function _0xC6E74CF8C884C880(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): void;
	export function _0x65482BFD0923C8A1(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): void;
	export function networkSpentRdrhatchetBonus(amount: number, p1: boolean, p2: boolean): void;
	export function networkSpentNightclubEntryFee(player: number, amount: number, p1: number, p2: boolean, p3: boolean): void;
	export function networkSpentNightclubBarDrink(amount: number, p1: number, p2: boolean, p3: boolean): void;
	export function networkSpentBountyHunterMission(amount: number, p1: boolean, p2: boolean): void;
	export function networkSpentRehireDj(amount: number, p1: number, p2: boolean, p3: boolean): void;
	export function networkSpentArenaJoinSpectator(amount: number, p1: number, p2: boolean, p3: boolean): void;
	export function networkEarnFromArenaSkillLevelProgression(amount: number, p1: number): void;
	export function networkEarnFromArenaCareerProgression(amount: number, p1: number): void;
	export function networkSpentMakeItRain(amount: number, p1: boolean, p2: boolean): void;
	export function networkSpentBuyArena(amount: number, p1: boolean, p2: boolean, p3: string): void;
	export function networkSpentUpgradeArena(amount: number, p1: boolean, p2: boolean, p3: string): void;
	export function networkSpentArenaSpectatorBox(amount: number, p1: number, p2: boolean, p3: boolean): void;
	export function networkSpentSpinTheWheelPayment(amount: number, p1: number, p2: boolean, p3: boolean): void;
	export function networkEarnFromSpinTheWheelCash(amount: number): void;
	export function networkSpentArenaPremium(amount: number, p1: boolean, p2: boolean): void;
	export function networkEarnFromArenaWar(amount: number, p1: number, p2: number, p3: number): void;
	export function networkEarnFromAssassinateTargetKilled2(amount: number): void;
	export function networkEarnFromBbEventCargo(amount: number): void;
	export function networkGetVcBankBalance(): number;
	export function networkGetVcWalletBalance(characterSlot: number): number;
	export function networkGetVcBalance(): number;
	export function networkGetEvcBalance(): number;
	export function networkGetPvcBalance(): number;
	export function networkGetStringWalletBalance(characterSlot: number): string;
	export function networkGetStringBankBalance(): string;
	export function networkGetStringBankWalletBalance(): string;
	export function networkGetVcWalletBalanceIsNotLessThan(amount: number, characterSlot: number): boolean;
	export function networkGetVcBankBalanceIsNotLessThan(amount: number): boolean;
	export function networkGetVcBankWalletBalanceIsNotLessThan(amount: number, characterSlot: number): boolean;
	export function networkGetRemainingVcDailyTransfers(): number;
	export function _0x08E8EEADFD0DC4A0(amount: number): boolean;
	export function networkCanReceivePlayerCash(p0: number, p1: number, p2: number, p3: number): boolean;
	export function networkGetRemainingVcDailyTransfers2(): number;
	export function withdrawCashFromBank(amount: number): number;
	export function depositCashInBank(amount: number): boolean;
	export function _0xE154B48B68EF72BC(p0: number): boolean;
	export function _0x6FCF8DDEA146C45B(p0: number): boolean;
	export function netGameserverUseServerTransactions(): boolean;
	export function netGameserverCatalogItemExists(name: string): boolean;
	export function netGameserverCatalogItemExistsHash(hash: number): boolean;
	export function netGameserverGetPrice(itemHash: number, categoryHash: number, p2: boolean): number;
	export function netGameserverCatalogIsReady(): boolean;
	export function netGameserverIsCatalogValid(): boolean;
	export function _0x85F6C9ABA1DE2BCF(): number;
	export function _0x357B152EF96C30B6(): number;
	export function netGameserverGetCatalogState(state: number): [boolean, number];
	export function _0xE3E5A7C64CA2C6ED(): number;
	export function _0x0395CB47B022E62C(p0: number): [boolean, number];
	export function netGameserverStartSession(charSlot: number): boolean;
	export function _0x72EB7BA9B69BF6AB(): boolean;
	export function _0x170910093218C8B9(p0: number): [boolean, number];
	export function _0xC13C38E47EA5DF31(p0: number): [boolean, number];
	export function netGameserverIsSessionValid(charSlot: number): boolean;
	export function _0x74A0FD0688F1EE45(p0: number): number;
	export function netGameserverSessionApplyReceivedData(charSlot: number): boolean;
	export function netGameserverIsSessionRefreshPending(): boolean;
	export function netGameserverGetBalance(inventory: boolean, playerbalance: boolean): boolean;
	export function _0x613F125BA3BD2EB9(): boolean;
	export function netGameserverGetTransactionManagerData(p0: number, p1: boolean): [boolean, number, boolean];
	export function netGameserverBasketStart(transactionId: number, categoryHash: number, actionHash: number, flags: number): [boolean, number];
	export function netGameserverBasketDelete(): boolean;
	export function netGameserverBasketEnd(): boolean;
	export function netGameserverBasketAddItem(itemData: number, quantity: number): [boolean, number];
	export function netGameserverBasketIsFull(): boolean;
	export function netGameserverBasketApplyServerData(p0: number, p1: number): [boolean, number];
	export function netGameserverCheckoutStart(transactionId: number): boolean;
	export function _0xC830417D630A50F9(transactionId: number): boolean;
	export function _0x79EDAC677CA62F81(transactionId: number): boolean;
	export function netGameserverBeginService(transactionId: number, categoryHash: number, itemHash: number, actionTypeHash: number, value: number, flags: number): [boolean, number];
	export function netGameserverEndService(transactionId: number): boolean;
	export function netGameserverDeleteCharacterSlot(slot: number, transfer: boolean, reason: number): boolean;
	export function netGameserverDeleteCharacterSlotGetStatus(): number;
	export function netGameserverDeleteSetTelemetryNonceSeed(): boolean;
	export function netGameserverTransferBankToWallet(charSlot: number, amount: number): boolean;
	export function netGameserverTransferWalletToBank(charSlot: number, amount: number): boolean;
	export function netGameserverTransferCashGetStatus(): number;
	export function netGameserverTransferCashGetStatus2(): number;
	export function netGameserverTransferCashSetTelemetryNonceSeed(): boolean;
	export function netGameserverSetTelemetryNonceSeed(p0: number): boolean;
	export function getOnlineVersion(): string;
	export function networkIsSignedIn(): boolean;
	export function networkIsSignedOnline(): boolean;
	export function _0xBD545D44CCE70597(): boolean;
	export function _0xEBCAB9E5048434F4(): number;
	export function _0x74FB3E29E6D10FA9(): number;
	export function _0x7808619F31FF22DB(): number;
	export function _0xA0FA4EC6A05DA44E(): number;
	export function networkAreRosAvailable(): boolean;
	export function _0x8D11E61A4ABF49CC(): boolean;
	export function networkIsCloudAvailable(): boolean;
	export function _0x67A5589628E0CFF6(): boolean;
	export function _0xBA9775570DB788CF(): number;
	export function networkIsHost(): boolean;
	export function _0x4237E822315D8BA9(): boolean;
	export function networkHaveOnlinePrivileges(): boolean;
	export function networkHasAgeRestrictedProfile(): boolean;
	export function _0x72D918C99BCACC54(p0: number): boolean;
	export function _0xAEEF48CDF5B6CE7C(p0: number, p1: number): boolean;
	export function _0x78321BEA235FD8CD(p0: number, p1: boolean): boolean;
	export function _0x595F028698072DD9(p0: number, p1: number, p2: boolean): boolean;
	export function _0x83F28CE49FBBFFBA(p0: number, p1: number, p2: boolean): boolean;
	export function _0x07EAB372C8841D99(p0: number, p1: number, p2: number): number;
	export function _0x906CA41A4B74ECA4(): number;
	export function _0x023ACAB2DC9DC4A4(): number;
	export function _0x76BF03FADBF154F5(): number;
	export function networkGetAgeGroup(): number;
	export function _0x0CF6CC51AA18F0F8(p0: number, p1: number, p2: number): number;
	export function _0x1F7BC3539F9E0224(): void;
	export function networkHaveOnlinePrivilege2(): boolean;
	export function _0xA8ACB6459542A8C8(): number;
	export function _0x83FE8D7229593017(): void;
	export function _0x53C10C8BD774F2C9(): number;
	export function networkCanBail(): boolean;
	export function networkBail(p0: number, p1: number, p2: number): void;
	export function _0x283B6062A2C01E9B(): void;
	export function _0x8B4FFC790CA131EF(p0: number, p1: number, p2: number, p3: number): number;
	export function networkTransitionTrack(hash: number, p1: number, p2: number, state: number, p4: number): void;
	export function _0x04918A41BC9B8157(p0: number, p1: number, p2: number): number;
	export function networkCanAccessMultiplayer(loadingState: number): [boolean, number];
	export function networkIsMultiplayerDisabled(): boolean;
	export function networkCanEnterMultiplayer(): boolean;
	export function networkSessionEnter(p0: number, p1: number, p2: number, maxPlayers: number, p4: number, p5: number): number;
	export function networkSessionFriendMatchmaking(p0: number, p1: number, maxPlayers: number, p3: boolean): boolean;
	export function networkSessionCrewMatchmaking(p0: number, p1: number, p2: number, maxPlayers: number, p4: boolean): boolean;
	export function networkSessionActivityQuickmatch(p0: number, p1: number, p2: number, p3: number): boolean;
	export function networkSessionHost(p0: number, maxPlayers: number, p2: boolean): boolean;
	export function networkSessionHostClosed(p0: number, maxPlayers: number): boolean;
	export function networkSessionHostFriendsOnly(p0: number, maxPlayers: number): boolean;
	export function networkSessionIsClosedFriends(): boolean;
	export function networkSessionIsClosedCrew(): boolean;
	export function networkSessionIsSolo(): boolean;
	export function networkSessionIsPrivate(): boolean;
	export function networkSessionEnd(p0: boolean, p1: boolean): boolean;
	export function networkSessionKickPlayer(player: number): void;
	export function networkSessionGetIsPlayerVotedToKick(player: number): boolean;
	export function _0x041C7F2A6C9894E6(p0: number, p1: number, p2: number): number;
	export function _0x59DF79317F85A7E0(): number;
	export function _0xFFE1E5B792D92B34(): number;
	export function networkSessionSetMatchmakingGroup(matchmakingGroup: number): void;
	export function networkSessionSetMaxPlayers(playerType: number, playerCount: number): void;
	export function networkSessionGetUnk(p0: number): number;
	export function _0xCAE55F48D3D7875C(p0: number): void;
	export function _0xF49ABC20D8552257(p0: number): void;
	export function _0x4811BBAC21C5FCD5(p0: number): void;
	export function _0x5539C3EBF104A53A(p0: boolean): void;
	export function _0x702BC4D605522539(p0: number): void;
	export function _0x3F52E880AAF6C8CA(p0: boolean): void;
	export function _0xF1EEA2DDA9FFA69D(p0: number): void;
	export function _0x5ECD378EE64450AB(p0: number): void;
	export function _0x59D421683D31835A(p0: number): void;
	export function _0x1153FA02A659051C(): void;
	export function networkSessionHosted(p0: boolean): void;
	export function networkAddFollowers(p0: number, p1: number): [void, number];
	export function networkClearFollowers(): void;
	export function networkGetServerTime(hours: number, minutes: number, seconds: number): [void, number, number, number];
	export function _0x600F8CB31C7AAB6E(p0: number): void;
	export function networkGetTargetingMode(): number;
	export function _0xE532D6811B3A4D2A(p0: number): boolean;
	export function networkFindMatchedGamers(p0: number, p1: number, p2: number, p3: number): boolean;
	export function networkIsFindingGamers(): boolean;
	export function _0xF9B83B77929D8863(): number;
	export function networkGetNumFoundGamers(): number;
	export function networkGetFoundGamer(p0: number, p1: number): [boolean, number];
	export function networkClearFoundGamers(): void;
	export function networkGetGamerStatus(p0: number): [boolean, number];
	export function _0x2CC848A861D01493(): number;
	export function _0x94A8394D150B013A(): number;
	export function _0x5AE17C6B0134B7F1(): number;
	export function _0x02A8BEC6FD9AF660(p0: number, p1: number): [boolean, number];
	export function networkClearGetGamerStatus(): void;
	export function networkSessionJoinInvite(): void;
	export function networkSessionCancelInvite(): void;
	export function networkSessionForceCancelInvite(): void;
	export function networkHasPendingInvite(): boolean;
	export function _0xC42DD763159F3461(): boolean;
	export function networkAcceptInvite(): boolean;
	export function networkSessionWasInvited(): boolean;
	export function networkSessionGetInviter(networkHandle: number): [void, number];
	export function _0xD313DE83394AF134(): boolean;
	export function _0xBDB6F89C729CF388(): boolean;
	export function networkSuppressInvite(toggle: boolean): void;
	export function networkBlockInvites(toggle: boolean): void;
	export function networkBlockInvites2(toggle: boolean): void;
	export function _0xF814FEC6A19FD6E0(): void;
	export function networkBlockKickedPlayers(p0: boolean): void;
	export function _0x7AC752103856FB20(p0: boolean): void;
	export function _0x74698374C45701D2(): number;
	export function _0x140E6A44870A11CE(): void;
	export function networkSessionHostSinglePlayer(p0: number): void;
	export function networkSessionLeaveSinglePlayer(): void;
	export function networkIsGameInProgress(): boolean;
	export function networkIsSessionActive(): boolean;
	export function networkIsInSession(): boolean;
	export function networkIsSessionStarted(): boolean;
	export function networkIsSessionBusy(): boolean;
	export function networkCanSessionEnd(): boolean;
	export function networkSessionMarkVisible(toggle: boolean): void;
	export function networkSessionIsVisible(): boolean;
	export function networkSessionBlockJoinRequests(toggle: boolean): void;
	export function networkSessionChangeSlots(p0: number, p1: boolean): void;
	export function networkSessionGetPrivateSlots(): number;
	export function networkSessionVoiceHost(): void;
	export function networkSessionVoiceLeave(): void;
	export function networkSessionVoiceConnectToPlayer(p0: number): [void, number];
	export function networkSetKeepFocuspoint(p0: boolean, p1: number): void;
	export function _0x5B8ED3DB018927B1(p0: number): void;
	export function _0x855BC38818F6F684(): boolean;
	export function _0xB5D3453C98456528(): number;
	export function _0xEF0912DDF7C4CB4B(): boolean;
	export function networkSendTextMessage(message: string, networkHandle: number): [boolean, number];
	export function networkSetActivitySpectator(toggle: boolean): void;
	export function networkIsActivitySpectator(): boolean;
	export function _0x0E4F77F7B9D74D84(p0: number): void;
	export function networkSetActivitySpectatorMax(maxSpectators: number): void;
	export function networkGetActivityPlayerNum(p0: boolean): number;
	export function networkIsActivitySpectatorFromHandle(networkHandle: number): [boolean, number];
	export function networkHostTransition(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number): number;
	export function networkDoTransitionQuickmatch(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): boolean;
	export function networkDoTransitionQuickmatchAsync(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): boolean;
	export function networkDoTransitionQuickmatchWithGroup(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number): [boolean, number];
	export function networkJoinGroupActivity(): number;
	export function _0x1888694923EF4591(): void;
	export function _0xB13E88E655E5A3BC(): void;
	export function networkIsTransitionClosedFriends(): boolean;
	export function networkIsTransitionClosedCrew(): boolean;
	export function networkIsTransitionSolo(): boolean;
	export function networkIsTransitionPrivate(): boolean;
	export function _0x617F49C2668E6155(): number;
	export function _0x261E97AD7BCF3D40(p0: boolean): void;
	export function _0x39917E1B4CB0F911(p0: boolean): void;
	export function _0x2CE9D95E4051AECD(p0: number): void;
	export function networkSetTransitionCreatorHandle(p0: number): [void, number];
	export function networkClearTransitionCreatorHandle(): void;
	export function networkInviteGamersToTransition(p0: number, p1: number): [boolean, number];
	export function networkSetGamerInvitedToTransition(networkHandle: number): [void, number];
	export function networkLeaveTransition(): boolean;
	export function networkLaunchTransition(): boolean;
	export function _0xA2E9C1AB8A92E8CD(toggle: boolean): void;
	export function networkBailTransition(): void;
	export function networkDoTransitionToGame(p0: boolean, maxPlayers: number): boolean;
	export function networkDoTransitionToNewGame(p0: boolean, maxPlayers: number, p2: boolean): boolean;
	export function networkDoTransitionToFreemode(p0: number, p1: number, p2: boolean, players: number, p4: boolean): [boolean, number];
	export function networkDoTransitionToNewFreemode(p0: number, p1: number, players: number, p3: boolean, p4: boolean, p5: boolean): [boolean, number, number];
	export function networkIsTransitionToGame(): boolean;
	export function networkGetTransitionMembers(data: number, dataCount: number): [number, number];
	export function networkApplyTransitionParameter(p0: number, p1: number): void;
	export function networkApplyTransitionParameterString(p0: number, string: string, p2: boolean): void;
	export function networkSendTransitionGamerInstruction(networkHandle: number, p1: string, p2: number, p3: number, p4: boolean): [boolean, number];
	export function networkMarkTransitionGamerAsFullyJoined(p0: number): [boolean, number];
	export function networkIsTransitionHost(): boolean;
	export function networkIsTransitionHostFromHandle(networkHandle: number): [boolean, number];
	export function networkGetTransitionHost(networkHandle: number): [boolean, number];
	export function networkIsInTransition(): boolean;
	export function networkIsTransitionStarted(): boolean;
	export function networkIsTransitionBusy(): boolean;
	export function networkIsTransitionMatchmaking(): boolean;
	export function _0xC571D0E77D8BBC29(): boolean;
	export function _0x1398582B7F72B3ED(p0: number): void;
	export function _0x1F8E00FB18239600(p0: number): void;
	export function _0xF6F4383B7C92F11A(p0: number): void;
	export function networkOpenTransitionMatchmaking(): void;
	export function networkCloseTransitionMatchmaking(): void;
	export function networkIsTransitionOpenToMatchmaking(): boolean;
	export function networkSetTransitionVisibilityLock(p0: boolean, p1: boolean): void;
	export function networkIsTransitionVisibilityLocked(): boolean;
	export function networkSetTransitionActivityId(p0: number): void;
	export function networkChangeTransitionSlots(p0: number, p1: number): void;
	export function _0x973D76AA760A6CB6(p0: boolean): void;
	export function networkHasPlayerStartedTransition(player: number): boolean;
	export function networkAreTransitionDetailsValid(p0: number): boolean;
	export function networkJoinTransition(player: number): boolean;
	export function networkHasInvitedGamerToTransition(p0: number): [boolean, number];
	export function _0x3F9990BF5F22759C(p0: number): [boolean, number];
	export function networkIsActivitySession(): boolean;
	export function _0x4A9FDE3A5A6D0437(toggle: boolean): void;
	export function networkSendPresenceInvite(networkHandle: number, p1: number, p2: number, p3: number): [boolean, number, number];
	export function networkSendPresenceTransitionInvite(p0: number, p1: number, p2: number, p3: number): [boolean, number, number];
	export function _0x1171A97A3D3981B6(p0: number, p1: number, p2: number, p3: number): [boolean, number, number];
	export function _0x742B58F723233ED9(p0: number): number;
	export function networkGetNumPresenceInvites(): number;
	export function networkAcceptPresenceInvite(p0: number): boolean;
	export function networkRemovePresenceInvite(p0: number): boolean;
	export function networkGetPresenceInviteId(p0: number): number;
	export function networkGetPresenceInviteInviter(p0: number): number;
	export function networkGetPresenceInviteHandle(p0: number, p1: number): [boolean, number];
	export function networkGetPresenceInviteSessionId(p0: number): number;
	export function _0x24409FC4C55CB22D(p0: number): number;
	export function _0xD39B3FFF8FFDD5BF(p0: number): number;
	export function _0x728C4CC7920CD102(p0: number): number;
	export function _0x3DBF2DF0AEB7D289(p0: number): boolean;
	export function _0x8806CEBFABD3CE05(p0: number): boolean;
	export function networkHasFollowInvite(): boolean;
	export function networkActionFollowInvite(): number;
	export function networkClearFollowInvite(): number;
	export function _0xEBF8284D8CADEB53(): void;
	export function networkRemoveTransitionInvite(p0: number): [void, number];
	export function networkRemoveAllTransitionInvite(): void;
	export function _0xF083835B70BA9BFE(): void;
	export function networkInviteGamers(p0: number, p1: number, p2: number, p3: number): [boolean, number, number, number];
	export function networkHasInvitedGamer(p0: number): [boolean, number];
	export function _0x71DC455F5CD1C2B1(networkHandle: number): [boolean, number];
	export function _0x3855FB5EB2C5E8B2(p0: number): number;
	export function networkGetCurrentlySelectedGamerHandleFromInviteMenu(p0: number): [boolean, number];
	export function networkSetCurrentlySelectedGamerHandleFromInviteMenu(p0: number): [boolean, number];
	export function networkSetInviteOnCallForInviteMenu(p0: number): [void, number];
	export function networkCheckDataManagerSucceededForHandle(p0: number, p1: number): [boolean, number];
	export function _0x4AD490AE1536933B(p0: number, p1: number): number;
	export function _0x0D77A82DC2D0DA59(p0: number, p1: number): [void, number, number];
	export function filloutPmPlayerList(networkHandle: number, p1: number, p2: number): [boolean, number];
	export function filloutPmPlayerListWithNames(p0: number, p1: number, p2: number, p3: number): [boolean, number, number];
	export function _0xE26CCFF8094D8C74(p0: number): boolean;
	export function networkSetCurrentDataManagerHandle(p0: number): [boolean, number];
	export function networkIsInPlatformParty(): boolean;
	export function networkGetPlatformPartyUnk(): number;
	export function networkGetPlatformPartyMembers(data: number, dataSize: number): [number, number];
	export function _0xFD8B834A8BA05048(): boolean;
	export function networkIsChattingInPlatformParty(networkHandle: number): [boolean, number];
	export function _0x2BF66D2E7414F686(): number;
	export function _0x14922ED3E38761F0(): boolean;
	export function _0x6CE50E47F5543D0C(): void;
	export function _0xFA2888E3833C8E96(): void;
	export function _0x25D990F8E0E3F13C(): void;
	export function _0xF1B84178F8674195(p0: number): void;
	export function networkGetRandomInt(): number;
	export function networkGetRandomIntRanged(rangeStart: number, rangeEnd: number): number;
	export function networkPlayerIsCheater(): boolean;
	export function _0x172F75B6EE2233BA(): boolean;
	export function networkPlayerIsBadsport(): boolean;
	export function triggerScriptCrcCheckOnPlayer(player: number, p1: number, scriptHash: number): boolean;
	export function _0xA12D3A5A3753CC23(): number;
	export function _0xF287F506767CC8A9(): number;
	export function remoteCheatDetected(player: number, a: number, b: number): boolean;
	export function badSportPlayerLeftDetected(networkHandle: number, event: number, amountReceived: number): [boolean, number];
	export function networkApplyPedScarData(ped: number, p1: number): void;
	export function networkSetThisScriptIsNetworkScript(lobbySize: number, p1: boolean, playerId: number): void;
	export function networkIsThisScriptMarked(p0: number, p1: boolean, p2: number): boolean;
	export function networkGetThisScriptIsNetworkScript(): boolean;
	export function networkGetNumParticipantsHost(): number;
	export function networkGetNumParticipants(): number;
	export function networkGetScriptStatus(): number;
	export function networkRegisterHostBroadcastVariables(vars: number, numVars: number): [void, number];
	export function networkRegisterPlayerBroadcastVariables(vars: number, numVars: number): [void, number];
	export function networkFinishBroadcastingData(): void;
	export function _0x5D10B3795F3FC886(): boolean;
	export function networkGetPlayerIndex(player: number): number;
	export function networkGetParticipantIndex(index: number): number;
	export function networkGetPlayerIndexFromPed(ped: number): number;
	export function networkGetNumConnectedPlayers(): number;
	export function networkIsPlayerConnected(player: number): boolean;
	export function networkGetTotalNumPlayers(): number;
	export function networkIsParticipantActive(p0: number): boolean;
	export function networkIsPlayerActive(player: number): boolean;
	export function networkIsPlayerAParticipant(player: number): boolean;
	export function networkIsHostOfThisScript(): boolean;
	export function networkGetHostOfThisScript(): number;
	export function networkGetHostOfScript(scriptName: string, p1: number, p2: number): number;
	export function networkSetMissionFinished(): void;
	export function networkIsScriptActive(scriptName: string, player: number, p2: boolean, p3: number): boolean;
	export function _0x560B423D73015E77(p0: number): number;
	export function networkGetNumScriptParticipants(p0: number, p1: number, p2: number): [number, number];
	export function _0x638A3A81733086DB(): number;
	export function _0x1AD5B71586B94820(p0: number, p1: number, p2: number): [boolean, number];
	export function _0x2302C0264EA58D31(): void;
	export function _0x741A3D8380319A81(): void;
	export function participantId(): number;
	export function participantIdToInt(): number;
	export function _0x2DA41ED6E1FCD7A5(p0: number, p1: number): number;
	export function networkGetDestroyerOfNetworkId(netId: number, weaponHash: number): [number, number];
	export function _0xC434133D9BA52777(p0: number, p1: number): number;
	export function _0x83660B734994124D(p0: number, p1: number, p2: number): number;
	export function networkGetDestroyerOfEntity(p0: number, p1: number, weaponHash: number): [boolean, number];
	export function networkGetEntityKillerOfPlayer(player: number, weaponHash: number): [number, number];
	export function networkResurrectLocalPlayer(x: number, y: number, z: number, heading: number, unk: boolean, changetime: boolean, p6: number): void;
	export function networkSetLocalPlayerInvincibleTime(time: number): void;
	export function networkIsLocalPlayerInvincible(): boolean;
	export function networkDisableInvincibleFlashing(player: number, toggle: boolean): void;
	export function networkSetLocalPlayerSyncLookAt(toggle: boolean): void;
	export function _0xB07D3185E11657A5(entity: number): boolean;
	export function networkGetNetworkIdFromEntity(entity: number): number;
	export function networkGetEntityFromNetworkId(netId: number): number;
	export function networkGetEntityIsNetworked(entity: number): boolean;
	export function networkGetEntityIsLocal(entity: number): boolean;
	export function networkRegisterEntityAsNetworked(entity: number): void;
	export function networkUnregisterNetworkedEntity(entity: number): void;
	export function networkDoesNetworkIdExist(netID: number): boolean;
	export function networkDoesEntityExistWithNetworkId(entity: number): boolean;
	export function networkRequestControlOfNetworkId(netId: number): boolean;
	export function networkHasControlOfNetworkId(netId: number): boolean;
	export function _0x7242F8B741CE1086(netId: number): boolean;
	export function networkRequestControlOfEntity(entity: number): boolean;
	export function networkRequestControlOfDoor(doorID: number): boolean;
	export function networkHasControlOfEntity(entity: number): boolean;
	export function networkHasControlOfPickup(pickup: number): boolean;
	export function networkHasControlOfDoor(doorHash: number): boolean;
	export function networkIsDoorNetworked(doorHash: number): boolean;
	export function vehToNet(vehicle: number): number;
	export function pedToNet(ped: number): number;
	export function objToNet(object: number): number;
	export function netToVeh(netHandle: number): number;
	export function netToPed(netHandle: number): number;
	export function netToObj(netHandle: number): number;
	export function netToEnt(netHandle: number): number;
	export function networkGetLocalHandle(networkHandle: number, bufferSize: number): [void, number];
	export function networkHandleFromUserId(userId: string, networkHandle: number, bufferSize: number): [void, number];
	export function networkHandleFromMemberId(memberId: string, networkHandle: number, bufferSize: number): [void, number];
	export function networkHandleFromPlayer(player: number, networkHandle: number, bufferSize: number): [void, number];
	export function networkHashFromPlayerHandle(player: number): number;
	export function networkHashFromGamerHandle(networkHandle: number): [number, number];
	export function networkHandleFromFriend(friendIndex: number, networkHandle: number, bufferSize: number): [void, number];
	export function networkGamertagFromHandleStart(networkHandle: number): [boolean, number];
	export function networkGamertagFromHandlePending(): boolean;
	export function networkGamertagFromHandleSucceeded(): boolean;
	export function networkGetGamertagFromHandle(networkHandle: number): [string, number];
	export function _0xD66C9E72B3CC4982(p0: number, p1: number): [number, number];
	export function _0x58CC181719256197(p0: number, p1: number, p2: number): number;
	export function networkAreHandlesTheSame(netHandle1: number, netHandle2: number): [boolean, number, number];
	export function networkIsHandleValid(networkHandle: number, bufferSize: number): [boolean, number];
	export function networkGetPlayerFromGamerHandle(networkHandle: number): [number, number];
	export function networkMemberIdFromGamerHandle(networkHandle: number): [string, number];
	export function networkIsGamerInMySession(networkHandle: number): [boolean, number];
	export function networkShowProfileUi(networkHandle: number): [void, number];
	export function networkPlayerGetName(player: number): string;
	export function networkPlayerGetUserid(player: number, userID: number): [string, number];
	export function networkPlayerIsRockstarDev(player: number): boolean;
	export function networkPlayerSomething(player: number): boolean;
	export function networkGetEntityNetScriptId(entity: number): number;
	export function _0x37D5F739FD494675(p0: number): number;
	export function networkIsInactiveProfile(p0: number): [boolean, number];
	export function networkGetMaxFriends(): number;
	export function networkGetFriendCount(): number;
	export function networkGetFriendName(friendIndex: number): string;
	export function networkGetFriendNameFromIndex(friendIndex: number): string;
	export function networkIsFriendOnline(name: string): boolean;
	export function networkIsFriendHandleOnline(networkHandle: number): [boolean, number];
	export function networkIsFriendInSameTitle(friendName: string): boolean;
	export function networkIsFriendInMultiplayer(friendName: string): boolean;
	export function networkIsFriend(networkHandle: number): [boolean, number];
	export function networkIsPendingFriend(p0: number): number;
	export function networkIsAddingFriend(): number;
	export function networkAddFriend(networkHandle: number, message: string): [boolean, number];
	export function networkIsFriendIndexOnline(friendIndex: number): boolean;
	export function _0x1B857666604B1A74(toggle: boolean): void;
	export function _0x82377B65E943F72D(p0: number): boolean;
	export function networkCanSetWaypoint(): boolean;
	export function _0x4C2A9FDC22377075(): void;
	export function _0xB309EBEA797E001F(p0: number): number;
	export function _0x26F07DD83A5F7F98(): number;
	export function networkHasHeadset(): boolean;
	export function _0x7D395EA61622E116(p0: boolean): void;
	export function _0xC0D2AF00BCC234CA(): boolean;
	export function networkGamerHasHeadset(networkHandle: number): [boolean, number];
	export function networkIsGamerTalking(networkHandle: number): [boolean, number];
	export function networkCanCommunicateWithGamer2(networkHandle: number): [boolean, number];
	export function networkCanCommunicateWithGamer(networkHandle: number): [boolean, number];
	export function networkIsGamerMutedByMe(networkHandle: number): [boolean, number];
	export function networkAmIMutedByGamer(networkHandle: number): [boolean, number];
	export function networkIsGamerBlockedByMe(networkHandle: number): [boolean, number];
	export function networkAmIBlockedByGamer(networkHandle: number): [boolean, number];
	export function networkCanViewGamerUserContent(networkHandle: number): [boolean, number];
	export function networkHasViewGamerUserContentResult(networkHandle: number): [boolean, number];
	export function networkCanPlayMultiplayerWithGamer(networkHandle: number): [boolean, number];
	export function networkCanGamerPlayMultiplayerWithMe(networkHandle: number): [boolean, number];
	export function networkIsPlayerTalking(player: number): boolean;
	export function networkPlayerHasHeadset(player: number): boolean;
	export function networkIsPlayerMutedByMe(player: number): boolean;
	export function networkAmIMutedByPlayer(player: number): boolean;
	export function networkIsPlayerBlockedByMe(player: number): boolean;
	export function networkAmIBlockedByPlayer(player: number): boolean;
	export function networkGetPlayerLoudness(player: number): number;
	export function networkSetTalkerProximity(value: number): void;
	export function networkGetTalkerProximity(): number;
	export function networkSetVoiceActive(toggle: boolean): void;
	export function _0xCFEB46DCD7D8D5EB(p0: boolean): void;
	export function networkOverrideTransitionChat(p0: boolean): void;
	export function networkSetTeamOnlyChat(toggle: boolean): void;
	export function _0x265559DA40B3F327(p0: number): void;
	export function _0x4348BFDA56023A2F(p0: number, p1: number): number;
	export function networkOverrideTeamRestrictions(team: number, toggle: boolean): void;
	export function networkSetOverrideSpectatorMode(toggle: boolean): void;
	export function _0x3C5C1E2C2FF814B1(p0: boolean): void;
	export function _0x9D7AFCBF21C51712(p0: boolean): void;
	export function _0xF46A1E03E8755980(p0: boolean): void;
	export function _0x6A5D89D7769A40D8(p0: boolean): void;
	export function networkOverrideChatRestrictions(player: number, toggle: boolean): void;
	export function networkOverrideSendRestrictions(player: number, toggle: boolean): void;
	export function networkChatMute(toggle: boolean): void;
	export function networkOverrideReceiveRestrictions(player: number, toggle: boolean): void;
	export function _0x0FF2862B61A58AF9(toggle: boolean): void;
	export function networkSetVoiceChannel(channel: number): void;
	export function networkClearVoiceChannel(): void;
	export function networkApplyVoiceProximityOverride(x: number, y: number, z: number): void;
	export function networkClearVoiceProximityOverride(): void;
	export function _0x5E3AA4CA2B6FB0EE(p0: number): void;
	export function _0xCA575C391FEA25CC(p0: number): void;
	export function _0xADB57E5B663CCA8B(p0: number, p1: number, p2: number): [void, number, number];
	export function networkIsTextChatActive(): boolean;
	export function shutdownAndLaunchSinglePlayerGame(): void;
	export function shutdownAndLoadMostRecentSave(): boolean;
	export function networkSetFriendlyFireOption(toggle: boolean): void;
	export function networkSetRichPresence(p0: number, p1: number, p2: number, p3: number): void;
	export function networkSetRichPresenceString(p0: number, string: string): void;
	export function networkGetTimeoutTime(): number;
	export function networkRespawnCoords(player: number, x: number, y: number, z: number, p4: boolean, p5: boolean): void;
	export function _0xBF22E0F32968E967(player: number, p1: boolean): void;
	export function removeAllStickyBombsFromEntity(entity: number, ped: number): void;
	export function _0x2E4C123D1C8A710E(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): number;
	export function networkClanServiceIsValid(): boolean;
	export function networkClanPlayerIsActive(networkHandle: number): [boolean, number];
	export function networkClanPlayerGetDesc(clanDesc: number, bufferSize: number, networkHandle: number): [boolean, number, number];
	export function networkClanIsRockstarClan(clanDesc: number, bufferSize: number): [boolean, number];
	export function _0xF45352426FF3A4F0(clanDesc: number, bufferSize: number, p2: string): [void, number];
	export function networkClanGetNumMembershipDesc(): number;
	export function networkClanGetMembershipDesc(memberDesc: number, p1: number): [boolean, number];
	export function networkClanDownloadMembership(networkHandle: number): [boolean, number];
	export function networkClanDownloadMembershipPending(p0: number): [boolean, number];
	export function networkIsClanMembershipFinishedDownloading(): boolean;
	export function networkClanRemoteMembershipsAreInCache(p0: number): [boolean, number];
	export function networkClanGetMembershipCount(p0: number): [number, number];
	export function networkClanGetMembershipValid(p0: number, p1: number): [boolean, number];
	export function networkClanGetMembership(p0: number, clanMembership: number, p2: number): [boolean, number, number];
	export function networkClanJoin(clanDesc: number): boolean;
	export function networkClanAnimation(animDict: string, animName: string): boolean;
	export function _0x2B51EDBEFC301339(p0: number, p1: string): boolean;
	export function _0xC32EA7A2F6CA7557(): number;
	export function networkClanGetEmblemTxdName(netHandle: number, txdName: string): [boolean, number];
	export function _0x13518FF1C6B28938(p0: number): boolean;
	export function _0xA134777FF7F33331(p0: number, p1: number): [boolean, number];
	export function _0x113E6E3E50E286B0(p0: number): void;
	export function networkGetPrimaryClanDataClear(): number;
	export function networkGetPrimaryClanDataCancel(): void;
	export function networkGetPrimaryClanDataStart(p0: number, p1: number): [boolean, number];
	export function networkGetPrimaryClanDataPending(): number;
	export function networkGetPrimaryClanDataSuccess(): number;
	export function networkGetPrimaryClanDataNew(p0: number, p1: number): [boolean, number, number];
	export function setNetworkIdCanMigrate(netId: number, toggle: boolean): void;
	export function setNetworkIdExistsOnAllMachines(netId: number, toggle: boolean): void;
	export function setNetworkIdSyncToPlayer(netId: number, player: number, toggle: boolean): void;
	export function networkSetEntityCanBlend(entity: number, toggle: boolean): void;
	export function _0x0379DAF89BA09AA5(p0: number, p1: number): void;
	export function networkSetEntityInvisibleToNetwork(entity: number, toggle: boolean): void;
	export function setNetworkIdVisibleInCutscene(netId: number, p1: boolean, p2: boolean): void;
	export function _0x32EBD154CB6B8B99(p0: number, p1: number, p2: number): void;
	export function setNetworkCutsceneEntities(toggle: boolean): void;
	export function _0x3FA36981311FA4FF(netId: number, state: boolean): void;
	export function networkCanNetworkIdBeSeen(netId: number): boolean;
	export function setLocalPlayerVisibleInCutscene(p0: boolean, p1: boolean): void;
	export function setLocalPlayerInvisibleLocally(p0: boolean): void;
	export function setLocalPlayerVisibleLocally(p0: boolean): void;
	export function setPlayerInvisibleLocally(player: number, toggle: boolean): void;
	export function setPlayerVisibleLocally(player: number, toggle: boolean): void;
	export function fadeOutLocalPlayer(p0: boolean): void;
	export function networkFadeOutEntity(entity: number, normal: boolean, slow: boolean): void;
	export function networkFadeInEntity(entity: number, state: boolean, p2: number): void;
	export function networkIsPlayerFading(player: number): boolean;
	export function networkIsEntityFading(entity: number): boolean;
	export function isPlayerInCutscene(player: number): boolean;
	export function setEntityVisibleInCutscene(p0: number, p1: boolean, p2: boolean): void;
	export function setEntityLocallyInvisible(entity: number): void;
	export function setEntityLocallyVisible(entity: number): void;
	export function isDamageTrackerActiveOnNetworkId(netID: number): boolean;
	export function activateDamageTrackerOnNetworkId(netID: number, toggle: boolean): void;
	export function isDamageTrackerActiveOnPlayer(player: number): boolean;
	export function activateDamageTrackerOnPlayer(player: number, toggle: boolean): void;
	export function isSphereVisibleToAnotherMachine(p0: number, p1: number, p2: number, p3: number): boolean;
	export function isSphereVisibleToPlayer(p0: number, p1: number, p2: number, p3: number, p4: number): boolean;
	export function reserveNetworkMissionObjects(amount: number): void;
	export function reserveNetworkMissionPeds(amount: number): void;
	export function reserveNetworkMissionVehicles(amount: number): void;
	export function _0x797F9C5E661D920E(p0: number): void;
	export function _0x2C8DF5D129595281(p0: number): void;
	export function _0x42613035157E4208(p0: number): void;
	export function canRegisterMissionObjects(amount: number): boolean;
	export function canRegisterMissionPeds(amount: number): boolean;
	export function canRegisterMissionVehicles(amount: number): boolean;
	export function canRegisterMissionPickups(amount: number): boolean;
	export function _0xE16AA70CE9BEEDC3(p0: number): number;
	export function canRegisterMissionEntities(ped_amt: number, vehicle_amt: number, object_amt: number, pickup_amt: number): boolean;
	export function getNumReservedMissionObjects(p0: boolean, p1: number): number;
	export function getNumReservedMissionPeds(p0: boolean, p1: number): number;
	export function getNumReservedMissionVehicles(p0: boolean, p1: number): number;
	export function _0x12B6281B6C6706C0(p0: boolean): number;
	export function _0xCB215C4B56A7FAE7(p0: boolean): number;
	export function _0x0CD9AB83489430EA(p0: boolean): number;
	export function _0xE42D626EEC94E5D9(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): void;
	export function _0xC7BE335216B5EC7C(): number;
	export function _0x0C1F7D49C39D2289(): number;
	export function _0x0AFCE529F69B21FF(): number;
	export function _0xA72835064DD63E4C(): number;
	export function _0xBA7F0B77D80A4EB7(p0: number, p1: number): void;
	export function getNetworkTime(): number;
	export function getNetworkTimeAccurate(): number;
	export function hasNetworkTimeStarted(): boolean;
	export function getTimeOffset(timeA: number, timeB: number): number;
	export function isTimeLessThan(timeA: number, timeB: number): boolean;
	export function isTimeMoreThan(timeA: number, timeB: number): boolean;
	export function isTimeEqualTo(timeA: number, timeB: number): boolean;
	export function getTimeDifference(timeA: number, timeB: number): number;
	export function getTimeAsString(time: number): string;
	export function _0xF12E6CD06C73D69E(): number;
	export function getCloudTimeAsInt(): number;
	export function getDateAndTimeFromUnixEpoch(unixEpoch: number, timeStructure: number): [void, number];
	export function networkSetInSpectatorMode(toggle: boolean, playerPed: number): void;
	export function networkSetInSpectatorModeExtended(toggle: boolean, playerPed: number, p2: boolean): void;
	export function networkSetInFreeCamMode(toggle: boolean): void;
	export function _0x5C707A667DF8B9FA(toggle: boolean, player: number): void;
	export function networkIsInSpectatorMode(): boolean;
	export function networkSetInMpCutscene(p0: boolean, p1: boolean): void;
	export function networkIsInMpCutscene(): boolean;
	export function networkIsPlayerInMpCutscene(player: number): boolean;
	export function _0xFAC18E7356BD3210(): void;
	export function setNetworkVehicleRespotTimer(netId: number, time: number, p2: number, p3: number): void;
	export function setNetworkObjectNonContact(object: number, toggle: boolean): void;
	export function _0xA2A707979FE754DC(p0: number, p1: number): void;
	export function _0x838DA0936A24ED4D(p0: number, p1: number): void;
	export function usePlayerColourInsteadOfTeamColour(toggle: boolean, p1: boolean): void;
	export function _0x21D04D7BC538C146(entity: number): boolean;
	export function _0x13F1FCB111B820B0(p0: boolean): void;
	export function _0xA7C511FA1C5BDA38(p0: number, p1: number): void;
	export function _0x658500AE6D723A7E(p0: number): void;
	export function _0x17330EBF2F2124A8(): void;
	export function _0x4BA166079D658ED4(p0: number, p1: number): void;
	export function _0xD7B6C73CAD419BCF(p0: boolean): void;
	export function _0x7EF7649B64D7FF10(entity: number): boolean;
	export function _0x77758139EC9B66C7(p0: boolean): void;
	export function networkCreateSynchronisedScene(x: number, y: number, z: number, xRot: number, yRot: number, zRot: number, p6: number, p7: boolean, p8: boolean, p9: number, p10: number, p11: number): number;
	export function networkAddPedToSynchronisedScene(ped: number, netScene: number, animDict: string, animnName: string, speed: number, speedMultiplier: number, duration: number, flag: number, playbackRate: number, p9: number): void;
	export function _0xA5EAFE473E45C442(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number): void;
	export function networkAddEntityToSynchronisedScene(entity: number, netScene: number, animDict: string, animName: string, speed: number, speedMulitiplier: number, flag: number): void;
	export function networkForceLocalUseOfSyncedSceneCamera(netScene: number, animDict: string, animName: string): void;
	export function networkAttachSynchronisedSceneToEntity(netScene: number, entity: number, bone: number): void;
	export function networkStartSynchronisedScene(netScene: number): void;
	export function networkStopSynchronisedScene(netScene: number): void;
	export function networkConvertSynchronisedSceneToSynchronizedScene(netScene: number): number;
	export function _0xC9B43A33D09CADA7(p0: number): void;
	export function _0x144DA052257AE7D8(p0: number): void;
	export function _0xFB1F9381E80FA13F(p0: number, p1: number): number;
	export function _0x5A6FFA2433E2F14C(player: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, flags: number): boolean;
	export function _0x4BA92A18502BCA61(player: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, p10: number, flags: number): boolean;
	export function _0x3C891A251567DFCE(p0: number): [number, number];
	export function _0xFB8F2A6F3DF08CBE(): void;
	export function networkGetRespawnResult(randomInt: number, coordinates: vectorPtr, heading: number): [void, vectorPtr, number];
	export function _0x6C34F1208B8923FD(p0: number): number;
	export function _0x17E0198B3882C2CB(): void;
	export function _0xFB680D403909DC70(p0: number, p1: number): void;
	export function networkEndTutorialSession(): void;
	export function networkIsInTutorialSession(): boolean;
	export function _0xB37E4E6A2388CA7B(): boolean;
	export function _0x35F0B98A8387274D(): boolean;
	export function _0x3B39236746714134(player: number): number;
	export function networkIsPlayerEqualToIndex(player: number, index: number): boolean;
	export function networkConcealPlayer(player: number, toggle: boolean, p2: boolean): void;
	export function networkIsPlayerConcealed(player: number): boolean;
	export function networkConcealEntity(entity: number, toggle: boolean): void;
	export function networkIsEntityConcealed(entity: number): boolean;
	export function networkOverrideClockTime(Hours: number, Minutes: number, Seconds: number): void;
	export function networkClearClockTimeOverride(): void;
	export function networkIsClockTimeOverridden(): boolean;
	export function networkAddEntityArea(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): number;
	export function networkAddEntityAngledArea(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): number;
	export function _0x25B99872D588A101(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): number;
	export function _0x2B1C623823DB0D9D(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): number;
	export function networkRemoveEntityArea(p0: number): boolean;
	export function _0xE64A3CA08DFA37A9(p0: number): boolean;
	export function _0x4DF7CFFF471A7FB1(p0: number): boolean;
	export function _0x4A2D4E8BF4265B0F(p0: number): boolean;
	export function networkSetNetworkIdDynamic(netID: number, toggle: boolean): void;
	export function _0xA6FCECCF4721D679(p0: number): void;
	export function _0x95BAF97C82464629(p0: number, p1: number): void;
	export function networkRequestCloudBackgroundScripts(): boolean;
	export function networkIsCloudBackgroundScriptsRequestPending(): boolean;
	export function networkRequestCloudTunables(): void;
	export function networkIsTunableCloudRequestPending(): boolean;
	export function networkGetTunablesVersion(): number;
	export function networkDoesTunableExist(tunableContext: string, tunableName: string): boolean;
	export function networkAccessTunableInt(tunableContext: string, tunableName: string, value: number): [boolean, number];
	export function networkAccessTunableFloat(tunableContext: string, tunableName: string, value: number): [boolean, number];
	export function networkAccessTunableBool(tunableContext: string, tunableName: string): boolean;
	export function networkDoesTunableExistHash(tunableContext: number, tunableName: number): boolean;
	export function networkAllocateTunablesRegistrationDataMap(): boolean;
	export function networkAccessTunableIntHash(tunableContext: number, tunableName: number, value: number): [boolean, number];
	export function networkRegisterTunableIntHash(contextHash: number, nameHash: number, value: number): [boolean, number];
	export function networkAccessTunableFloatHash(tunableContext: number, tunableName: number, value: number): [boolean, number];
	export function networkRegisterTunableFloatHash(contextHash: number, nameHash: number, value: number): [boolean, number];
	export function networkAccessTunableBoolHash(tunableContext: number, tunableName: number): boolean;
	export function networkRegisterTunableBoolHash(contextHash: number, nameHash: number, value: boolean): [boolean, boolean];
	export function networkTryAccessTunableBoolHash(tunableContext: number, tunableName: number, defaultValue: boolean): boolean;
	export function networkGetContentModifierListId(contentHash: number): number;
	export function _0x7DB53B37A2F211A0(): number;
	export function networkResetBodyTracker(): void;
	export function networkGetNumBodyTrackers(): number;
	export function _0x2E0BF682CC778D49(p0: number): boolean;
	export function _0x0EDE326D47CD0F3E(ped: number, player: number): boolean;
	export function _0x890E2C5ABED7236D(p0: number, p1: number): void;
	export function networkExplodeVehicle(vehicle: number, isAudible: boolean, isInvisible: boolean, p3: boolean): void;
	export function _0x2A5E0621DD815A9A(p0: number, p1: number, p2: number, p3: number): void;
	export function _0xCD71A4ECAB22709E(entity: number): void;
	export function _0xA7E30DE9272B6D49(ped: number, x: number, y: number, z: number, p4: number): void;
	export function _0xE6717E652B8C8D8A(p0: number, p1: number): void;
	export function _0x407091CF6037118E(netID: number): void;
	export function networkSetPropertyId(id: number): void;
	export function networkClearPropertyId(): void;
	export function _0x367EF5E2F439B4C6(p0: number): void;
	export function _0x94538037EE44F5CF(p0: boolean): void;
	export function networkCacheLocalPlayerHeadBlendData(): void;
	export function networkHasCachedPlayerHeadBlendData(player: number): boolean;
	export function networkApplyCachedPlayerHeadBlendData(ped: number, player: number): boolean;
	export function getNumCommerceItems(): number;
	export function isCommerceDataValid(): boolean;
	export function _0xB606E6CC59664972(p0: number): void;
	export function _0x1D4DC17C38FEAFF0(): boolean;
	export function getCommerceItemId(index: number): string;
	export function getCommerceItemName(index: number): string;
	export function _0xCA94551B50B4932C(p0: number): number;
	export function getCommerceItemNumCats(index: number): number;
	export function getCommerceItemCat(index: number, index2: number): string;
	export function _0x58C21165F6545892(p0: string, p1: string, p2: number): void;
	export function isCommerceStoreOpen(): boolean;
	export function setStoreEnabled(toggle: boolean): void;
	export function requestCommerceItemImage(index: number): boolean;
	export function releaseAllCommerceItemImages(): void;
	export function _0x722F5D28B61C5EA8(p0: number): number;
	export function isStoreAvailableToUser(): boolean;
	export function _0x265635150FB0D82E(): void;
	export function _0x444C4525ECE0A4B9(): void;
	export function _0x59328EB08C5CEB2B(): boolean;
	export function _0xFAE628F1E9ADB239(p0: number, p1: number, p2: number): void;
	export function _0x754615490A029508(): number;
	export function _0x155467ACA0F55705(): number;
	export function cloudDeleteMemberFile(p0: string): number;
	export function _0x4C61B39930D045DA(p0: number): boolean;
	export function _0x3A3D5568AF297CD5(p0: number): boolean;
	export function cloudCheckAvailability(): void;
	export function _0xC7ABAC5DE675EE3B(): number;
	export function _0x0B0CC10720653F3B(): number;
	export function _0x8B0C2964BA471961(): number;
	export function _0x88B588B41FF7868E(): number;
	export function _0x67FC09BC554A75E5(): number;
	export function _0x966DD84FB6A46017(): void;
	export function _0x152D90E4C1B4738A(p0: number, p1: number): [boolean, number, number];
	export function _0x9FEDF86898F100E9(): number;
	export function _0x5E24341A7F92A74B(): number;
	export function _0x24E4E51FC16305F9(): number;
	export function _0xFBC5E768C7A77A6A(): number;
	export function _0xC55A0B40FFB1ED23(): number;
	export function ugcClearCreateResult(): void;
	export function _0x9BF438815F5D96EA(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): [boolean, number];
	export function _0x692D58DF40657E8C(p0: number, p1: number, p2: number, p3: number, p4: number, p5: boolean): [boolean, number];
	export function ugcQueryByContentId(contentId: string, latestVersion: boolean, contentTypeName: string): boolean;
	export function ugcQueryByContentIds(data: number, count: number, latestVersion: boolean, contentTypeName: string): [boolean, number];
	export function ugcQueryRecentlyCreatedContent(offset: number, count: number, contentTypeName: string, p3: number): boolean;
	export function _0xD5A4B59980401588(p0: number, p1: number, p2: number, p3: number): [boolean, number, number];
	export function _0x3195F8DD0D531052(p0: number, p1: number, p2: number, p3: number): [boolean, number, number];
	export function _0xF9E1CCAE8BA4C281(p0: number, p1: number, p2: number, p3: number): [boolean, number, number];
	export function _0x9F6E2821885CAEE2(p0: number, p1: number, p2: number, p3: number, p4: number): [boolean, number, number];
	export function _0x678BB03C1A3BD51E(p0: number, p1: number, p2: number, p3: number, p4: number): [boolean, number, number];
	export function setBalanceAddMachine(contentId: string, contentTypeName: string): boolean;
	export function setBalanceAddMachines(data: number, dataCount: number, contentTypeName: string): [boolean, number];
	export function _0xA7862BC5ED1DFD7E(p0: number, p1: number, p2: number, p3: number): [boolean, number, number];
	export function _0x97A770BEEF227E2B(p0: number, p1: number, p2: number, p3: number): [boolean, number, number];
	export function _0x5324A0E3E4CE3570(p0: number, p1: number, p2: number, p3: number): [boolean, number, number];
	export function _0xE9B99B6853181409(): void;
	export function _0xD53ACDBEF24A46E8(): number;
	export function _0x02ADA21EA2F6918F(): number;
	export function _0x941E5306BCD7C2C7(): number;
	export function _0xC87E740D9F3872CC(): number;
	export function _0xEDF7F927136C224B(): number;
	export function _0xE0A6138401BCB837(): number;
	export function _0x769951E2455E2EB5(): number;
	export function _0x3A17A27D75C74887(): number;
	export function ugcClearQueryResults(): void;
	export function getContentUserId(p0: number): string;
	export function _0x584770794D758C18(p0: number, p1: number): [boolean, number];
	export function _0x8C8D2739BA44AF0F(p0: number): boolean;
	export function _0x703F12425ECA8BF5(p0: number): number;
	export function _0xAEAB987727C5A8A4(p0: number): boolean;
	export function getContentCategory(p0: number): number;
	export function getContentId(p0: number): string;
	export function getRootContentId(p0: number): string;
	export function _0xBF09786A7FCAB582(p0: number): number;
	export function getContentDescriptionHash(p0: number): number;
	export function ugcGetCloudPath(p0: number, p1: number): string;
	export function _0xCFD115B373C0DF63(p0: number, p1: number): [void, number];
	export function getContentFileVersion(p0: number, p1: number): number;
	export function _0x1D610EB0FEA716D9(p0: number): boolean;
	export function _0x7FCC39C46C3C03BD(p0: number): boolean;
	export function _0x32DD916F3F7C9672(p0: number): number;
	export function _0x3054F114121C21EA(p0: number): boolean;
	export function _0xA9240A96C74CCA13(p0: number): boolean;
	export function _0x1ACCFBA3D8DAB2EE(p0: number, p1: number): number;
	export function _0x759299C5BB31D2A9(p0: number, p1: number): number;
	export function _0x87E5C46C187FE0AE(p0: number, p1: number): number;
	export function _0x4E548C0D7AE39FF9(p0: number, p1: number): number;
	export function _0x70EA8DA57840F9BE(p0: number): boolean;
	export function _0x993CBE59D350D225(p0: number): boolean;
	export function ugcRequestCloudFile(p0: number, p1: number): number;
	export function ugcRequestCloudFileByContentId(contentTypeName: string, contentId: string, p2: number, p3: number, p4: number): number;
	export function _0x5E0165278F6339EE(p0: number): number;
	export function _0x2D5DC831176D0114(p0: number): boolean;
	export function _0xEBFA8D50ADDC54C4(p0: number): boolean;
	export function _0x162C23CA83ED0A62(p0: number): boolean;
	export function _0x40F7E66472DF3E5C(p0: number, p1: number): number;
	export function _0x5A34CD9C3C5BEC44(p0: number): boolean;
	export function _0x68103E2247887242(): void;
	export function ugcPublish(contentId: string, baseContentId: string, contentTypeName: string): boolean;
	export function _0x274A1519DFC1094F(p0: number, p1: boolean, p2: number): [boolean, number, number];
	export function _0xD05D1A6C74DA3498(p0: number, p1: boolean, p2: number): [boolean, number, number];
	export function _0x45E816772E93A9DB(): number;
	export function _0x299EF3C576773506(): number;
	export function _0x793FF272D5B365F4(): number;
	export function _0x5A0A3D1A186A5508(): number;
	export function _0xA1E5E0204A6FCC70(): void;
	export function _0xB746D20B17F2A229(p0: number, p1: number): [boolean, number, number];
	export function _0x63B406D7884BFA95(): number;
	export function _0x4D02279C83BE69FE(): number;
	export function _0x597F8DBA9B206FC7(): number;
	export function _0x5CAE833B0EE0C500(p0: number): boolean;
	export function ugcClearOfflineQuery(): void;
	export function _0xF98DDE0A8ED09323(p0: boolean): void;
	export function _0xFD75DABC0957BF33(p0: boolean): void;
	export function _0xF53E48461B71EECB(p0: number): boolean;
	export function facebookSetHeistComplete(heistName: string, cashEarned: number, xpEarned: number): boolean;
	export function facebookSetCreateCharacterComplete(): boolean;
	export function facebookSetMilestoneComplete(milestoneId: number): boolean;
	export function facebookIsSendingData(): boolean;
	export function facebookDoUnkCheck(): boolean;
	export function facebookIsAvailable(): boolean;
	export function textureDownloadRequest(PlayerHandle: number, FilePath: string, Name: string, p3: boolean): [number, number];
	export function _0x0B203B4AFDE53A4F(p0: number, p1: number, p2: boolean): [number, number, number];
	export function _0x308F96458B7087CC(p0: number, p1: number, p2: number, p3: number, p4: number, p5: boolean): [number, number, number];
	export function textureDownloadRelease(p0: number): void;
	export function textureDownloadHasFailed(p0: number): boolean;
	export function textureDownloadGetName(p0: number): string;
	export function getStatusOfTextureDownload(p0: number): number;
	export function _0x60EDD13EB3AC1FF3(): boolean;
	export function networkShouldShowConnectivityTroubleshooting(): boolean;
	export function networkIsCableConnected(): boolean;
	export function networkGetRosPrivilege9(): boolean;
	export function networkGetRosPrivilege10(): boolean;
	export function networkHasPlayerBeenBanned(): boolean;
	export function networkHaveSocialClubPrivilege(): boolean;
	export function networkGetRosPrivilege3(): boolean;
	export function networkGetRosPrivilege4(): boolean;
	export function networkHasRosPrivilege(index: number): boolean;
	export function networkGetBanData(p0: number, banType: number, timeData: number): [boolean, number, number];
	export function networkGetRosPrivilege24(): boolean;
	export function networkGetRosPrivilege25(): boolean;
	export function _0x36391F397731595D(p0: number): number;
	export function _0xDEB2B99A1AF1A2A6(p0: number): number;
	export function _0x9465E683B12D3F6B(): void;
	export function networkHasGameBeenAltered(): boolean;
	export function networkUpdatePlayerScars(): void;
	export function _0xC505036A35AFD01B(toggle: boolean): void;
	export function _0x267C78C60E806B9A(p0: number, p1: boolean): void;
	export function _0x6BFF5F84102DF80A(player: number): void;
	export function _0x5C497525F803486B(): void;
	export function _0x6FB7BB3607D27FA2(): number;
	export function _0x45A83257ED02D9BC(): void;
	export function _0x16D3D49902F697BB(player: number): boolean;
	export function _0xD414BE129BB81B32(player: number): number;
	export function _0x0E3A041ED6AC2B45(player: number): number;
	export function _0x350C23949E43686C(player: number): number;
	export function networkGetNumUnackedForPlayer(player: number): number;
	export function _0x3765C3A3E8192E10(player: number): number;
	export function networkGetOldestResendCountForPlayer(player: number): number;
	export function networkReportMyself(): void;
	export function _0x64D779659BC37B19(entity: number): Vector3;
	export function networkGetPlayerCoords(player: number): Vector3;
	export function _0x33DE49EDF4DDE77A(entity: number): Vector3;
	export function _0xAA5FAFCD2C5F5E47(entity: number): Vector3;
	export function _0xAEDF1BC1C133D6E3(): number;
	export function _0x2555CF7DA5473794(): number;
	export function _0x6FD992C4A1C1B986(): number;
	export function createObject(modelHash: number, x: number, y: number, z: number, isNetwork: boolean, thisScriptCheck: boolean, dynamic: boolean): number;
	export function createObjectNoOffset(modelHash: number, x: number, y: number, z: number, isNetwork: boolean, thisScriptCheck: boolean, dynamic: boolean): number;
	export function deleteObject(object: number): [void, number];
	export function placeObjectOnGroundProperly(object: number): boolean;
	export function _0xD76EEEF746057FD6(object: number): boolean;
	export function slideObject(object: number, toX: number, toY: number, toZ: number, speedX: number, speedY: number, speedZ: number, collision: boolean): boolean;
	export function setObjectTargettable(object: number, targettable: boolean): void;
	export function setObjectSomething(object: number, p1: boolean): void;
	export function getClosestObjectOfType(x: number, y: number, z: number, radius: number, modelHash: number, isMission: boolean, p6: boolean, p7: boolean): number;
	export function hasObjectBeenBroken(object: number, p1: number): boolean;
	export function hasClosestObjectOfTypeBeenBroken(p0: number, p1: number, p2: number, p3: number, modelHash: number, p5: number): boolean;
	export function _0x46494A2475701343(p0: number, p1: number, p2: number, p3: number, modelHash: number, p5: boolean): boolean;
	export function _0x2542269291C6AC84(p0: number): number;
	export function getObjectOffsetFromCoords(xPos: number, yPos: number, zPos: number, heading: number, xOffset: number, yOffset: number, zOffset: number): Vector3;
	export function _0x163F8B586BC95F2A(object: number, radius: number, modelHash: number, x: number, y: number, z: number, p6: vectorPtr, p7: number): [number, vectorPtr];
	export function setStateOfClosestDoorOfType(type: number, x: number, y: number, z: number, locked: boolean, heading: number, p6: boolean): void;
	export function getStateOfClosestDoorOfType(type: number, x: number, y: number, z: number, locked: boolean, heading: number): [void, boolean, number];
	export function doorControl(doorHash: number, x: number, y: number, z: number, locked: boolean, xRotMult: number, yRotMult: number, zRotMult: number): void;
	export function addDoorToSystem(doorHash: number, modelHash: number, x: number, y: number, z: number, p5: boolean, p6: boolean, p7: boolean): void;
	export function removeDoorFromSystem(doorHash: number): void;
	export function setDoorAccelerationLimit(doorHash: number, limit: number, p2: boolean, p3: boolean): void;
	export function _0x160AA1B32F6139B8(doorHash: number): number;
	export function _0x4BC2854478F3A749(doorHash: number): number;
	export function _0x03C27E13B42A0E82(doorHash: number, p1: number, p2: boolean, p3: boolean): void;
	export function _0x9BA001CB45CBF627(doorHash: number, heading: number, p2: boolean, p3: boolean): void;
	export function setDoorAjarAngle(doorHash: number, ajar: number, p2: boolean, p3: boolean): void;
	export function _0x65499865FCA6E5EC(doorHash: number): number;
	export function _0xC485E07E4F0B7958(doorHash: number, p1: boolean, p2: boolean, p3: boolean): void;
	export function _0xD9B71952F78A2640(doorHash: number, p1: boolean): void;
	export function _0xA85A21582451E951(doorHash: number, p1: boolean): void;
	export function isDoorRegisteredWithSystem(doorHash: number): boolean;
	export function isDoorClosed(doorHash: number): boolean;
	export function _0xC7F29CA00F46350E(p0: boolean): void;
	export function _0x701FDA1E82076BA4(): void;
	export function _0xDF97CDD4FC08FD34(p0: number): boolean;
	export function _0x589F80B325CC82C5(p0: number, p1: number, p2: number, p3: number, p4: number): [boolean, number];
	export function isGarageEmpty(garageHash: number, p1: boolean, p2: number): boolean;
	export function isPlayerEntirelyInsideGarage(garageHash: number, player: number, p2: number, p3: number): boolean;
	export function isPlayerPartiallyInsideGarage(garageHash: number, player: number, p2: number): boolean;
	export function _0x85B6C850546FDDE2(garageHash: number, p1: boolean, p2: boolean, p3: boolean, p4: number): boolean;
	export function isAnyEntityEntirelyInsideGarage(garageHash: number, p1: boolean, p2: boolean, p3: boolean, p4: number): boolean;
	export function isObjectEntirelyInsideGarage(garageHash: number, entity: number, p2: number, p3: number): boolean;
	export function isObjectPartiallyInsideGarage(garageHash: number, entity: number, p2: number): boolean;
	export function clearGarageArea(garageHash: number, isNetwork: boolean): void;
	export function _0x190428512B240692(garageHash: number, vehicles: boolean, peds: boolean, objects: boolean, isNetwork: boolean): void;
	export function _0x659F9D71F52843F8(p0: number, p1: number): void;
	export function _0xF2E1A7133DD356A6(garageHash: number, toggle: boolean): void;
	export function _0x66A49D021870FE88(): void;
	export function doesObjectOfTypeExistAtCoords(x: number, y: number, z: number, radius: number, hash: number, p5: boolean): boolean;
	export function isPointInAngledArea(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, p10: boolean, p11: boolean): boolean;
	export function _0x4D89D607CB3DD1D2(object: number, toggle: boolean): void;
	export function setObjectPhysicsParams(object: number, weight: number, p2: number, p3: number, p4: number, p5: number, gravity: number, p7: number, p8: number, p9: number, p10: number, buoyancy: number): void;
	export function getObjectFragmentDamageHealth(p0: number, p1: boolean): number;
	export function setActivateObjectPhysicsAsSoonAsItIsUnfrozen(object: number, toggle: boolean): void;
	export function isAnyObjectNearPoint(x: number, y: number, z: number, range: number, p4: boolean): boolean;
	export function isObjectNearPoint(objectHash: number, x: number, y: number, z: number, range: number): boolean;
	export function _0x4A39DB43E47CF3AA(p0: number): void;
	export function _0xE7E4C198B0185900(p0: number, p1: number, p2: boolean): void;
	export function _0xE05F6AEEFEB0BB02(p0: number, p1: number, p2: number): void;
	export function _0xF9C1681347C8BD15(object: number): void;
	export function trackObjectVisibility(object: number): void;
	export function isObjectVisible(object: number): boolean;
	export function _0xC6033D32241F6FB5(object: number, toggle: boolean): void;
	export function _0xEB6F1A9B5510A5D2(p0: number, p1: boolean): void;
	export function setUnkGlobalBoolRelatedToDamage(value: boolean): void;
	export function _0xBCE595371A5FBAAF(p0: number, p1: boolean): void;
	export function getRayfireMapObject(x: number, y: number, z: number, rotation: number, name: string): number;
	export function setStateOfRayfireMapObject(object: number, state: number): void;
	export function getStateOfRayfireMapObject(object: number): number;
	export function doesRayfireMapObjectExist(object: number): boolean;
	export function getRayfireMapObjectAnimPhase(object: number): number;
	export function createPickup(pickupHash: number, posX: number, posY: number, posZ: number, p4: number, value: number, p6: boolean, modelHash: number): number;
	export function createPickupRotate(pickupHash: number, posX: number, posY: number, posZ: number, rotX: number, rotY: number, rotZ: number, flag: number, amount: number, p9: number, p10: boolean, modelHash: number): number;
	export function _0x394CD08E31313C28(): void;
	export function _0x826D1EE4D1CAFC78(p0: number, p1: number): void;
	export function createAmbientPickup(pickupHash: number, posX: number, posY: number, posZ: number, flags: number, value: number, modelHash: number, p7: boolean, p8: boolean): number;
	export function _0x1E3F1B1B891A2AAA(p0: number, p1: number): void;
	export function createPortablePickup(pickupHash: number, x: number, y: number, z: number, placeOnGround: boolean, modelHash: number): number;
	export function createPortablePickup2(pickupHash: number, x: number, y: number, z: number, placeOnGround: boolean, modelHash: number): number;
	export function attachPortablePickupToPed(ped: number, p1: number): void;
	export function detachPortablePickupFromPed(ped: number): void;
	export function hidePickup(pickup: number, toggle: boolean): void;
	export function _0x0BF3B3BD47D79C08(modelHash: number, p1: number): void;
	export function _0x78857FC65CADB909(p0: boolean): void;
	export function getSafePickupCoords(x: number, y: number, z: number, p3: number, p4: number): Vector3;
	export function _0xD4A7A435B3710D05(x: number, y: number, z: number, radius: number): void;
	export function _0xB7C6D80FB371659A(): void;
	export function getPickupCoords(pickup: number): Vector3;
	export function _0x8DCA505A5C196F05(p0: number, p1: number): void;
	export function removeAllPickupsOfType(pickupHash: number): void;
	export function hasPickupBeenCollected(pickup: number): boolean;
	export function removePickup(pickup: number): void;
	export function createMoneyPickups(x: number, y: number, z: number, value: number, amount: number, model: number): void;
	export function doesPickupExist(pickup: number): boolean;
	export function doesPickupObjectExist(pickupObject: number): boolean;
	export function getPickupObject(pickup: number): number;
	export function _0xFC481C641EBBD27D(p0: number): number;
	export function _0x0378C08504160D0D(p0: number): boolean;
	export function doesPickupOfTypeExistInArea(pickupHash: number, x: number, y: number, z: number, radius: number): boolean;
	export function setPickupRegenerationTime(pickup: number, duration: number): void;
	export function _0x758A5C1B3B1E1990(p0: number): void;
	export function _0x616093EC6B139DD9(player: number, pickupHash: number, toggle: boolean): void;
	export function setLocalPlayerCanUsePickupsWithThisModel(modelHash: number, toggle: boolean): void;
	export function setTeamPickupObject(object: number, p1: number, p2: boolean): void;
	export function _0x92AEFB5F6E294023(object: number, p1: boolean, p2: boolean): void;
	export function _0x0596843B34B95CE5(p0: number, p1: number): void;
	export function _0xA08FE5E49BDC39DD(p0: number, p1: number, p2: boolean): void;
	export function _0x62454A641B41F3C5(p0: number): void;
	export function _0x39A5FB7EAF150840(p0: number, p1: number): void;
	export function _0xDB41D07A45A6D4B7(p0: number): number;
	export function setPickupGenerationRangeMultiplier(multiplier: number): void;
	export function getPickupGenerationRangeMultiplier(): number;
	export function _0x31F924B53EADDF65(p0: boolean): void;
	export function _0x1C1B69FAE509BA97(p0: number, p1: number): void;
	export function _0x858EC9FD25DE04AA(p0: number, p1: number): void;
	export function _0x3ED2B83AB2E82799(p0: number, p1: number): void;
	export function _0x8881C98A31117998(p0: number, p1: number): void;
	export function _0x8CFF648FBD7330F1(p0: number): void;
	export function _0x46F3ADD1E2D5BAF2(p0: number, p1: number): void;
	export function _0x641F272B52E2F0F8(p0: number, p1: number): void;
	export function _0x4C134B4DF76025D0(p0: number, p1: number): void;
	export function _0xAA059C615DE9DD03(p0: number, p1: number): void;
	export function _0xF92099527DB8E2A7(p0: number, p1: number): void;
	export function _0xA2C1F5E92AFE49ED(): void;
	export function _0x762DB2D380B48D04(p0: number): void;
	export function highlightPlacementCoords(x: number, y: number, z: number, colorIndex: number): void;
	export function _0xBFFE53AE7E67FCDC(p0: number, p1: number): void;
	export function _0xD05A3241B9A86F19(p0: number, p1: number): void;
	export function _0xB2D0BDE54F0E8E5A(object: number, toggle: boolean): void;
	export function getWeaponTypeFromPickupType(pickupHash: number): number;
	export function _0xD6429A016084F1A5(p0: number): number;
	export function isPickupWeaponObjectValid(object: number): boolean;
	export function getObjectTextureVariation(object: number): number;
	export function setObjectTextureVariation(object: number, textureVariation: number): void;
	export function _0xF12E33034D887F66(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): number;
	export function setObjectLightColor(object: number, p1: boolean, r: number, g: number, b: number): number;
	export function setObjectColour(object: number, toggle: boolean, red: number, green: number, blue: number): number;
	export function _0x3B2FD68DB5F8331C(object: number, toggle: boolean): void;
	export function _0x96EE0EBA0163DF80(p0: number, p1: number): void;
	export function _0xDF6CA0330F2E737B(p0: number, p1: number): void;
	export function getPickupHash(pickupHash: number): number;
	export function setForceObjectThisFrame(x: number, y: number, z: number, p3: number): void;
	export function markObjectForDeletion(object: number): void;
	export function _0x8CAAB2BD3EA58BD4(p0: number): void;
	export function _0x63ECF581BC70E363(p0: number, p1: number): void;
	export function _0x911024442F4898F0(p0: number, p1: number, p2: number): void;
	export function _0xB20834A7DD3D8896(p0: number, p1: number, p2: number, p3: number): void;
	export function _0x734E1714D077DA9A(p0: number, p1: number): void;
	export function _0x1A6CBB06E2D0D79D(p0: number, p1: number): void;
	export function _0x43C677F1E1158005(p0: number, p1: number): number;
	export function _0x3BD770D281982DB5(p0: number, p1: number): number;
	export function _0x1C57C94A6446492A(p0: number, p1: number): void;
	export function _0xB5B7742424BD4445(p0: number, p1: number): void;
	export function isControlEnabled(padIndex: number, control: number): boolean;
	export function isControlPressed(padIndex: number, control: number): boolean;
	export function isControlReleased(padIndex: number, control: number): boolean;
	export function isControlJustPressed(padIndex: number, control: number): boolean;
	export function isControlJustReleased(padIndex: number, control: number): boolean;
	export function getControlValue(padIndex: number, control: number): number;
	export function getControlNormal(padIndex: number, control: number): number;
	export function _0x5B73C77D9EB66E24(p0: boolean): void;
	export function getControlUnboundNormal(padIndex: number, control: number): number;
	export function setControlNormal(padIndex: number, control: number, amount: number): boolean;
	export function isDisabledControlPressed(padIndex: number, control: number): boolean;
	export function isDisabledControlReleased(padIndex: number, control: number): boolean;
	export function isDisabledControlJustPressed(padIndex: number, control: number): boolean;
	export function isDisabledControlJustReleased(padIndex: number, control: number): boolean;
	export function getDisabledControlNormal(padIndex: number, control: number): number;
	export function getDisabledControlUnboundNormal(padIndex: number, control: number): number;
	export function _0xD7D22F5592AED8BA(p0: number): number;
	export function isInputDisabled(padIndex: number): boolean;
	export function isInputJustDisabled(padIndex: number): boolean;
	export function setCursorLocation(x: number, y: number): boolean;
	export function _0x23F09EADC01449D6(padIndex: number): boolean;
	export function _0x6CD79468A1E595C6(padIndex: number): boolean;
	export function getControlInstructionalButton(padIndex: number, control: number, p2: boolean): string;
	export function _0x80C2FD58D720C801(padIndex: number, control: number, p2: boolean): string;
	export function _0x8290252FFF36ACB5(padIndex: number, red: number, green: number, blue: number): void;
	export function _0xCB0360EFEFB2580D(padIndex: number): void;
	export function setPadShake(padIndex: number, duration: number, frequency: number): void;
	export function _0x14D29BB12D47F68C(p0: number, p1: number, p2: number, p3: number, p4: number): void;
	export function stopPadShake(padIndex: number): void;
	export function _0xF239400E16C23E08(p0: number, p1: number): void;
	export function _0xA0CEFCEA390AAB9B(p0: number): void;
	export function isLookInverted(): boolean;
	export function _0xE1615EC03B3BB4FD(): boolean;
	export function getLocalPlayerAimState(): number;
	export function getLocalPlayerAimState2(): number;
	export function _0x25AAA32BDC98F2A3(): number;
	export function getIsUsingAlternateDriveby(): boolean;
	export function getAllowMovementWhileZoomed(): boolean;
	export function setPlayerpadShakesWhenControllerDisabled(toggle: boolean): void;
	export function setInputExclusive(padIndex: number, control: number): void;
	export function disableControlAction(padIndex: number, control: number, disable: boolean): void;
	export function enableControlAction(padIndex: number, control: number, enable: boolean): void;
	export function disableAllControlActions(padIndex: number): void;
	export function enableAllControlActions(padIndex: number): void;
	export function switchToInputMappingScheme(name: string): boolean;
	export function switchToInputMappingScheme2(name: string): boolean;
	export function resetInputMappingScheme(): void;
	export function disableInputGroup(padIndex: number): void;
	export function setRoadsInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, unknown1: boolean, unknown2: boolean): void;
	export function setRoadsInAngledArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, angle: number, unknown1: boolean, unknown2: boolean, unknown3: boolean): void;
	export function setPedPathsInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, unknown: boolean, p7: number): void;
	export function getSafeCoordForPed(x: number, y: number, z: number, onGround: boolean, outPosition: vectorPtr, flags: number): [boolean, vectorPtr];
	export function getClosestVehicleNode(x: number, y: number, z: number, outPosition: vectorPtr, nodeType: number, p5: number, p6: number): [boolean, vectorPtr];
	export function getClosestMajorVehicleNode(x: number, y: number, z: number, outPosition: vectorPtr, unknown1: number, unknown2: number): [boolean, vectorPtr];
	export function getClosestVehicleNodeWithHeading(x: number, y: number, z: number, outPosition: vectorPtr, outHeading: number, nodeType: number, p6: number, p7: number): [boolean, vectorPtr, number];
	export function getNthClosestVehicleNode(x: number, y: number, z: number, nthClosest: number, outPosition: vectorPtr, unknown1: number, unknown2: number, unknown3: number): [boolean, vectorPtr];
	export function getNthClosestVehicleNodeId(x: number, y: number, z: number, nth: number, nodetype: number, p5: number, p6: number): number;
	export function getNthClosestVehicleNodeWithHeading(x: number, y: number, z: number, nthClosest: number, outPosition: vectorPtr, heading: number, unknown1: number, unknown2: number, unknown3: number, unknown4: number): [boolean, vectorPtr, number, number];
	export function getNthClosestVehicleNodeIdWithHeading(x: number, y: number, z: number, nthClosest: number, outPosition: vectorPtr, outHeading: number, p6: number, p7: number, p8: number): [boolean, vectorPtr];
	export function getNthClosestVehicleNodeFavourDirection(x: number, y: number, z: number, desiredX: number, desiredY: number, desiredZ: number, nthClosest: number, outPosition: vectorPtr, outHeading: number, nodetype: number, p10: number, p11: number): [boolean, vectorPtr, number];
	export function getVehicleNodeProperties(x: number, y: number, z: number, density: number, flags: number): [boolean, number, number];
	export function isVehicleNodeIdValid(vehicleNodeId: number): boolean;
	export function getVehicleNodePosition(nodeId: number, outPosition: vectorPtr): [void, vectorPtr];
	export function getVehicleNodeIsGpsAllowed(nodeID: number): boolean;
	export function getVehicleNodeIsSwitchedOff(nodeID: number): boolean;
	export function getClosestRoad(x: number, y: number, z: number, p3: number, p4: number, p5: vectorPtr, p6: vectorPtr, p7: number, p8: number, p9: number, p10: boolean): [number, vectorPtr, vectorPtr, number, number, number];
	export function _0x228E5C6AD4D74BFD(toggle: boolean): void;
	export function arePathNodesLoadedInArea(x1: number, y1: number, x2: number, y2: number): boolean;
	export function _0x07FB139B592FA687(p0: number, p1: number, p2: number, p3: number): boolean;
	export function setRoadsBackToOriginal(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): void;
	export function setRoadsBackToOriginalInAngledArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p6: number, p7: number): void;
	export function _0x0B919E1FB47CC4E0(p0: number): void;
	export function _0xAA76052DDA9BFC3E(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): void;
	export function setPedPathsBackToOriginal(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): void;
	export function getRandomVehicleNode(x: number, y: number, z: number, radius: number, p4: boolean, p5: boolean, p6: boolean, outPosition: vectorPtr, nodeId: number): [boolean, vectorPtr, number];
	export function getStreetNameAtCoord(x: number, y: number, z: number, streetName: number, crossingRoad: number): [void, number, number];
	export function generateDirectionsToCoord(x: number, y: number, z: number, p3: boolean, direction: number, p5: number, distToNxJunction: number): [number, number, number, number];
	export function setIgnoreNoGpsFlag(toggle: boolean): void;
	export function _0x1FC289A0C3FF470F(toggle: boolean): void;
	export function setGpsDisabledZone(x1: number, y1: number, z1: number, x2: number, y2: number, z3: number): void;
	export function _0xBBB45C3CF5C8AA85(): number;
	export function _0xF3162836C28F9DA5(p0: number, p1: number, p2: number, p3: number): number;
	export function _0x869DAACBBE9FA006(): number;
	export function _0xA0F8A7517A273C05(p0: number, p1: number, p2: number, p3: number, p4: number): number;
	export function _0x16F46FB18C8009E4(p0: number, p1: number, p2: number, p3: number, p4: number): number;
	export function isPointOnRoad(x: number, y: number, z: number, vehicle: number): boolean;
	export function getNextGpsDisabledZoneIndex(): number;
	export function setGpsDisabledZoneAtIndex(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, index: number): void;
	export function clearGpsDisabledZoneAtIndex(index: number): void;
	export function addNavmeshRequiredRegion(x: number, y: number, radius: number): void;
	export function removeNavmeshRequiredRegions(): void;
	export function isNavmeshRequiredRegionOwnedByAnyThread(): boolean;
	export function disableNavmeshInArea(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): void;
	export function areAllNavmeshRegionsLoaded(): boolean;
	export function isNavmeshLoadedInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): boolean;
	export function _0x01708E8DD3FF8C65(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): number;
	export function addNavmeshBlockingObject(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: boolean, p8: number): number;
	export function updateNavmeshBlockingObject(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number): void;
	export function removeNavmeshBlockingObject(p0: number): void;
	export function doesNavmeshBlockingObjectExist(p0: number): boolean;
	export function _0x29C24BFBED8AB8FB(p0: number, p1: number): number;
	export function _0x8ABE8608576D9CE3(p0: number, p1: number, p2: number, p3: number): number;
	export function _0x336511A34F2E5185(left: number, right: number): number;
	export function _0x3599D741C9AC6310(p0: number, p1: number, p2: number, p3: number): number;
	export function calculateTravelDistanceBetweenPoints(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): number;
	export function createPed(pedType: number, modelHash: number, x: number, y: number, z: number, heading: number, isNetwork: boolean, thisScriptCheck: boolean): number;
	export function deletePed(ped: number): [void, number];
	export function clonePed(ped: number, heading: number, isNetwork: boolean, thisScriptCheck: boolean): number;
	export function clonePedEx(ped: number, heading: number, isNetwork: boolean, thisScriptCheck: boolean, p4: number): number;
	export function clonePedToTarget(ped: number, targetPed: number): void;
	export function clonePedToTargetEx(ped: number, targetPed: number, p2: number): void;
	export function isPedInVehicle(ped: number, vehicle: number, atGetIn: boolean): boolean;
	export function isPedInModel(ped: number, modelHash: number): boolean;
	export function isPedInAnyVehicle(ped: number, atGetIn: boolean): boolean;
	export function isCopPedInArea3d(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): boolean;
	export function isPedInjured(ped: number): boolean;
	export function isPedHurt(ped: number): boolean;
	export function isPedFatallyInjured(ped: number): boolean;
	export function isPedDeadOrDying(ped: number, p1: boolean): boolean;
	export function isConversationPedDead(ped: number): boolean;
	export function isPedAimingFromCover(ped: number): boolean;
	export function isPedReloading(ped: number): boolean;
	export function isPedAPlayer(ped: number): boolean;
	export function createPedInsideVehicle(vehicle: number, pedType: number, modelHash: number, seat: number, isNetwork: boolean, thisScriptCheck: boolean): number;
	export function setPedDesiredHeading(ped: number, heading: number): void;
	export function freezePedCameraRotation(ped: number): void;
	export function isPedFacingPed(ped: number, otherPed: number, angle: number): boolean;
	export function isPedInMeleeCombat(ped: number): boolean;
	export function isPedStopped(ped: number): boolean;
	export function isPedShootingInArea(ped: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p7: boolean, p8: boolean): boolean;
	export function isAnyPedShootingInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p6: boolean, p7: boolean): boolean;
	export function isPedShooting(ped: number): boolean;
	export function setPedAccuracy(ped: number, accuracy: number): void;
	export function getPedAccuracy(ped: number): number;
	export function _0x87DDEB611B329A9C(multiplier: number): void;
	export function isPedModel(ped: number, modelHash: number): boolean;
	export function explodePedHead(ped: number, weaponHash: number): void;
	export function removePedElegantly(ped: number): [void, number];
	export function addArmourToPed(ped: number, amount: number): void;
	export function setPedArmour(ped: number, amount: number): void;
	export function setPedIntoVehicle(ped: number, vehicle: number, seatIndex: number): void;
	export function setPedAllowVehiclesOverride(ped: number, toggle: boolean): void;
	export function canCreateRandomPed(unk: boolean): boolean;
	export function createRandomPed(posX: number, posY: number, posZ: number): number;
	export function createRandomPedAsDriver(vehicle: number, returnHandle: boolean): number;
	export function canCreateRandomDriver(): boolean;
	export function canCreateRandomBikeRider(): boolean;
	export function setPedMoveAnimsBlendOut(ped: number): void;
	export function setPedCanBeDraggedOut(ped: number, toggle: boolean): void;
	export function _0xF2BEBCDFAFDAA19E(toggle: boolean): void;
	export function isPedMale(ped: number): boolean;
	export function isPedHuman(ped: number): boolean;
	export function getVehiclePedIsIn(ped: number, lastVehicle: boolean): number;
	export function resetPedLastVehicle(ped: number): void;
	export function setPedDensityMultiplierThisFrame(multiplier: number): void;
	export function setScenarioPedDensityMultiplierThisFrame(p0: number, p1: number): void;
	export function _0x5A7F62FDA59759BD(): void;
	export function setScriptedConversionCoordThisFrame(x: number, y: number, z: number): void;
	export function setPedNonCreationArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): void;
	export function clearPedNonCreationArea(): void;
	export function _0x4759CC730F947C81(): void;
	export function isPedOnMount(ped: number): boolean;
	export function getMount(ped: number): number;
	export function isPedOnVehicle(ped: number): boolean;
	export function isPedOnSpecificVehicle(ped: number, vehicle: number): boolean;
	export function setPedMoney(ped: number, amount: number): void;
	export function getPedMoney(ped: number): number;
	export function _0xFF4803BC019852D9(p0: number, p1: number): void;
	export function _0x6B0E6172C9A4D902(p0: boolean): void;
	export function _0x9911F4A24485F653(p0: boolean): void;
	export function setPedSuffersCriticalHits(ped: number, toggle: boolean): void;
	export function _0xAFC976FD0580C7B3(ped: number, toggle: boolean): void;
	export function isPedSittingInVehicle(ped: number, vehicle: number): boolean;
	export function isPedSittingInAnyVehicle(ped: number): boolean;
	export function isPedOnFoot(ped: number): boolean;
	export function isPedOnAnyBike(ped: number): boolean;
	export function isPedPlantingBomb(ped: number): boolean;
	export function getDeadPedPickupCoords(ped: number, p1: number, p2: number): Vector3;
	export function isPedInAnyBoat(ped: number): boolean;
	export function isPedInAnySub(ped: number): boolean;
	export function isPedInAnyHeli(ped: number): boolean;
	export function isPedInAnyPlane(ped: number): boolean;
	export function isPedInFlyingVehicle(ped: number): boolean;
	export function setPedDiesInWater(ped: number, toggle: boolean): void;
	export function setPedDiesInSinkingVehicle(ped: number, toggle: boolean): void;
	export function getPedArmour(ped: number): number;
	export function setPedStayInVehicleWhenJacked(ped: number, toggle: boolean): void;
	export function setPedCanBeShotInVehicle(ped: number, toggle: boolean): void;
	export function getPedLastDamageBone(ped: number, outBone: number): [boolean, number];
	export function clearPedLastDamageBone(ped: number): void;
	export function setAiWeaponDamageModifier(value: number): void;
	export function resetAiWeaponDamageModifier(): void;
	export function setAiMeleeWeaponDamageModifier(modifier: number): void;
	export function resetAiMeleeWeaponDamageModifier(): void;
	export function _0x2F3C3D9F50681DE4(p0: number, p1: boolean): void;
	export function setPedCanBeTargetted(ped: number, toggle: boolean): void;
	export function setPedCanBeTargettedByTeam(ped: number, team: number, toggle: boolean): void;
	export function setPedCanBeTargettedByPlayer(ped: number, player: number, toggle: boolean): void;
	export function _0x061CB768363D6424(ped: number, toggle: boolean): void;
	export function _0xFD325494792302D7(ped: number, toggle: boolean): void;
	export function isPedInAnyPoliceVehicle(ped: number): boolean;
	export function forcePedToOpenParachute(ped: number): void;
	export function isPedInParachuteFreeFall(ped: number): boolean;
	export function isPedFalling(ped: number): boolean;
	export function isPedJumping(ped: number): boolean;
	export function _0x412F1364FA066CFB(p0: number): number;
	export function _0x451D05012CCEC234(p0: number): number;
	export function isPedClimbing(ped: number): boolean;
	export function isPedVaulting(ped: number): boolean;
	export function isPedDiving(ped: number): boolean;
	export function isPedJumpingOutOfVehicle(ped: number): boolean;
	export function isPedOpeningADoor(ped: number): boolean;
	export function getPedParachuteState(ped: number): number;
	export function getPedParachuteLandingType(ped: number): number;
	export function setPedParachuteTintIndex(ped: number, tintIndex: number): void;
	export function getPedParachuteTintIndex(ped: number, outTintIndex: number): [void, number];
	export function setPedReserveParachuteTintIndex(ped: number, p1: number): void;
	export function createParachuteObject(ped: number, p1: boolean, p2: boolean): number;
	export function setPedDucking(ped: number, toggle: boolean): void;
	export function isPedDucking(ped: number): boolean;
	export function isPedInAnyTaxi(ped: number): boolean;
	export function setPedIdRange(ped: number, value: number): void;
	export function setPedHighlyPerceptive(ped: number, toggle: boolean): void;
	export function _0x2F074C904D85129E(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): void;
	export function _0xEC4B4B3B9908052A(ped: number, unk: number): void;
	export function _0x733C87D4CE22BEA2(p0: number): void;
	export function setPedSeeingRange(ped: number, value: number): void;
	export function setPedHearingRange(ped: number, value: number): void;
	export function setPedVisualFieldMinAngle(ped: number, value: number): void;
	export function setPedVisualFieldMaxAngle(ped: number, value: number): void;
	export function setPedVisualFieldMinElevationAngle(ped: number, angle: number): void;
	export function setPedVisualFieldMaxElevationAngle(ped: number, angle: number): void;
	export function setPedVisualFieldPeripheralRange(ped: number, range: number): void;
	export function setPedVisualFieldCenterAngle(ped: number, angle: number): void;
	export function getPedVisualFieldCenterAngle(ped: number): number;
	export function setPedStealthMovement(ped: number, p1: boolean, action: string): void;
	export function getPedStealthMovement(ped: number): boolean;
	export function createGroup(unused: number): number;
	export function setPedAsGroupLeader(ped: number, groupId: number): void;
	export function setPedAsGroupMember(ped: number, groupId: number): void;
	export function setPedCanTeleportToGroupLeader(pedHandle: number, groupHandle: number, toggle: boolean): void;
	export function removeGroup(groupId: number): void;
	export function removePedFromGroup(ped: number): void;
	export function isPedGroupMember(ped: number, groupId: number): boolean;
	export function isPedHangingOnToVehicle(ped: number): boolean;
	export function setGroupSeparationRange(groupHandle: number, separationRange: number): void;
	export function setPedMinGroundTimeForStungun(ped: number, ms: number): void;
	export function isPedProne(ped: number): boolean;
	export function isPedInCombat(ped: number, target: number): boolean;
	export function canPedInCombatSeeTarget(ped: number, target: number): boolean;
	export function isPedDoingDriveby(ped: number): boolean;
	export function isPedJacking(ped: number): boolean;
	export function isPedBeingJacked(ped: number): boolean;
	export function isPedBeingStunned(ped: number, p1: number): boolean;
	export function getPedsJacker(ped: number): number;
	export function getJackTarget(ped: number): number;
	export function isPedFleeing(ped: number): boolean;
	export function isPedInCover(ped: number, exceptUseWeapon: boolean): boolean;
	export function isPedInCoverFacingLeft(ped: number): boolean;
	export function isPedInHighCover(ped: number): boolean;
	export function isPedGoingIntoCover(ped: number): boolean;
	export function setPedPinnedDown(ped: number, pinned: boolean, i: number): number;
	export function getSeatPedIsTryingToEnter(ped: number): number;
	export function getVehiclePedIsTryingToEnter(ped: number): number;
	export function getPedSourceOfDeath(ped: number): number;
	export function getPedCauseOfDeath(ped: number): number;
	export function getPedTimeOfDeath(ped: number): number;
	export function _0x5407B7288D0478B7(p0: number): number;
	export function _0x336B3D200AB007CB(p0: number, p1: number, p2: number, p3: number, p4: number): number;
	export function setPedRelationshipGroupDefaultHash(ped: number, hash: number): void;
	export function setPedRelationshipGroupHash(ped: number, hash: number): void;
	export function setRelationshipBetweenGroups(relationship: number, group1: number, group2: number): void;
	export function clearRelationshipBetweenGroups(relationship: number, group1: number, group2: number): void;
	export function addRelationshipGroup(name: string, groupHash: number): [number, number];
	export function removeRelationshipGroup(groupHash: number): void;
	export function _0xCC6E3B6BB69501F1(p0: number): number;
	export function getRelationshipBetweenPeds(ped1: number, ped2: number): number;
	export function getPedRelationshipGroupDefaultHash(ped: number): number;
	export function getPedRelationshipGroupHash(ped: number): number;
	export function getRelationshipBetweenGroups(group1: number, group2: number): number;
	export function _0x5615E0C5EB2BC6E2(p0: number, p1: number): void;
	export function _0xAD27D957598E49E9(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): void;
	export function setPedCanBeTargetedWithoutLos(ped: number, toggle: boolean): void;
	export function setPedToInformRespectedFriends(ped: number, radius: number, maxFriends: number): void;
	export function isPedRespondingToEvent(ped: number, event: number): boolean;
	export function setPedFiringPattern(ped: number, patternHash: number): void;
	export function setPedShootRate(ped: number, shootRate: number): void;
	export function setCombatFloat(ped: number, combatType: number, p2: number): void;
	export function getCombatFloat(ped: number, p1: number): number;
	export function getGroupSize(groupID: number, unknown: number, sizeInMembers: number): [void, number, number];
	export function doesGroupExist(groupId: number): boolean;
	export function getPedGroupIndex(ped: number): number;
	export function isPedInGroup(ped: number): boolean;
	export function getPlayerPedIsFollowing(ped: number): number;
	export function setGroupFormation(groupId: number, formationType: number): void;
	export function setGroupFormationSpacing(groupId: number, p1: number, p2: number, p3: number): void;
	export function resetGroupFormationDefaultSpacing(groupHandle: number): void;
	export function getVehiclePedIsUsing(ped: number): number;
	export function getVehiclePedIsEntering(ped: number): number;
	export function setPedGravity(ped: number, toggle: boolean): void;
	export function applyDamageToPed(ped: number, damageAmount: number, p2: boolean, p3: number): void;
	export function getTimeOfLastPedWeaponDamage(ped: number, weaponHash: number): number;
	export function setPedAllowedToDuck(ped: number, toggle: boolean): void;
	export function setPedNeverLeavesGroup(ped: number, toggle: boolean): void;
	export function getPedType(ped: number): number;
	export function setPedAsCop(ped: number, toggle: boolean): void;
	export function setPedMaxHealth(ped: number, value: number): void;
	export function getPedMaxHealth(ped: number): number;
	export function setPedMaxTimeInWater(ped: number, value: number): void;
	export function setPedMaxTimeUnderwater(ped: number, value: number): void;
	export function _0x2735233A786B1BEF(ped: number, p1: number): void;
	export function setPedVehicleForcedSeatUsage(ped: number, vehicle: number, seatIndex: number, flags: number): void;
	export function clearAllPedVehicleForcedSeatUsage(ped: number): void;
	export function _0xB282749D5E028163(p0: number, p1: number): void;
	export function setPedCanBeKnockedOffVehicle(ped: number, state: number): void;
	export function canKnockPedOffVehicle(ped: number): boolean;
	export function knockPedOffVehicle(ped: number): void;
	export function setPedCoordsNoGang(ped: number, posX: number, posY: number, posZ: number): void;
	export function getPedAsGroupMember(groupID: number, memberNumber: number): number;
	export function getPedAsGroupLeader(groupID: number): number;
	export function setPedKeepTask(ped: number, toggle: boolean): void;
	export function _0x49E50BDB8BA4DAB2(ped: number, toggle: boolean): void;
	export function isPedSwimming(ped: number): boolean;
	export function isPedSwimmingUnderWater(ped: number): boolean;
	export function setPedCoordsKeepVehicle(ped: number, posX: number, posY: number, posZ: number): void;
	export function setPedDiesInVehicle(ped: number, toggle: boolean): void;
	export function setCreateRandomCops(toggle: boolean): void;
	export function setCreateRandomCopsNotOnScenarios(toggle: boolean): void;
	export function setCreateRandomCopsOnScenarios(toggle: boolean): void;
	export function canCreateRandomCops(): boolean;
	export function setPedAsEnemy(ped: number, toggle: boolean): void;
	export function setPedCanSmashGlass(ped: number, p1: boolean, p2: boolean): void;
	export function isPedInAnyTrain(ped: number): boolean;
	export function isPedGettingIntoAVehicle(ped: number): boolean;
	export function isPedTryingToEnterALockedVehicle(ped: number): boolean;
	export function setEnableHandcuffs(ped: number, toggle: boolean): void;
	export function setEnableBoundAnkles(ped: number, toggle: boolean): void;
	export function setEnableScuba(ped: number, toggle: boolean): void;
	export function setCanAttackFriendly(ped: number, toggle: boolean, p2: boolean): void;
	export function getPedAlertness(ped: number): number;
	export function setPedAlertness(ped: number, value: number): void;
	export function setPedGetOutUpsideDownVehicle(ped: number, toggle: boolean): void;
	export function setPedMovementClipset(ped: number, clipSet: string, p2: number): void;
	export function resetPedMovementClipset(ped: number, p1: number): void;
	export function setPedStrafeClipset(ped: number, clipSet: string): void;
	export function resetPedStrafeClipset(ped: number): void;
	export function setPedWeaponMovementClipset(ped: number, clipSet: string): void;
	export function resetPedWeaponMovementClipset(ped: number): void;
	export function setPedDriveByClipsetOverride(ped: number, clipset: string): void;
	export function clearPedDriveByClipsetOverride(ped: number): void;
	export function setPedCoverClipsetOverride(ped: number, p1: string): void;
	export function clearPedCoverClipsetOverride(ped: number): void;
	export function _0x80054D7FCC70EEC6(ped: number): void;
	export function setPedInVehicleContext(ped: number, context: number): void;
	export function resetPedInVehicleContext(ped: number): void;
	export function isScriptedScenarioPedUsingConditionalAnim(ped: number, animDict: string, anim: string): boolean;
	export function setPedAlternateWalkAnim(ped: number, animDict: string, animName: string, p3: number, p4: boolean): void;
	export function clearPedAlternateWalkAnim(ped: number, p1: number): void;
	export function setPedAlternateMovementAnim(ped: number, stance: number, animDictionary: string, animationName: string, p4: number, p5: boolean): void;
	export function clearPedAlternateMovementAnim(ped: number, stance: number, p2: number): void;
	export function setPedGestureGroup(ped: number, animGroupGesture: string): void;
	export function getAnimInitialOffsetPosition(animDict: string, animName: string, x: number, y: number, z: number, xRot: number, yRot: number, zRot: number, p8: number, p9: number): Vector3;
	export function getAnimInitialOffsetRotation(animDict: string, animName: string, x: number, y: number, z: number, xRot: number, yRot: number, zRot: number, p8: number, p9: number): Vector3;
	export function getPedDrawableVariation(ped: number, componentId: number): number;
	export function getNumberOfPedDrawableVariations(ped: number, componentId: number): number;
	export function getPedTextureVariation(ped: number, componentId: number): number;
	export function getNumberOfPedTextureVariations(ped: number, componentId: number, drawableId: number): number;
	export function getNumberOfPedPropDrawableVariations(ped: number, propId: number): number;
	export function getNumberOfPedPropTextureVariations(ped: number, propId: number, drawableId: number): number;
	export function getPedPaletteVariation(ped: number, componentId: number): number;
	export function _0x9E30E91FB03A2CAF(p0: number, p1: number): [boolean, number, number];
	export function _0x1E77FA7A62EE6C4C(p0: number): number;
	export function _0xF033419D1B81FAE8(p0: number): number;
	export function isPedComponentVariationValid(ped: number, componentId: number, drawableId: number, textureId: number): boolean;
	export function setPedComponentVariation(ped: number, componentId: number, drawableId: number, textureId: number, paletteId: number): void;
	export function setPedRandomComponentVariation(ped: number, p1: number): void;
	export function setPedRandomProps(ped: number): void;
	export function setPedDefaultComponentVariation(ped: number): void;
	export function setPedBlendFromParents(ped: number, p1: number, p2: number, p3: number, p4: number): void;
	export function setPedHeadBlendData(ped: number, shapeFirstID: number, shapeSecondID: number, shapeThirdID: number, skinFirstID: number, skinSecondID: number, skinThirdID: number, shapeMix: number, skinMix: number, thirdMix: number, isParent: boolean): void;
	export function getPedHeadBlendData(ped: number, headBlendData: number): [boolean, number];
	export function updatePedHeadBlendData(ped: number, shapeMix: number, skinMix: number, thirdMix: number): void;
	export function setPedEyeColor(ped: number, index: number): void;
	export function _0x76BBA2CEE66D47E9(p0: number): number;
	export function setPedHeadOverlay(ped: number, overlayID: number, index: number, opacity: number): void;
	export function getPedHeadOverlayValue(ped: number, overlayID: number): number;
	export function getNumHeadOverlayValues(overlayID: number): number;
	export function setPedHeadOverlayColor(ped: number, overlayID: number, colorType: number, colorID: number, secondColorID: number): void;
	export function setPedHairColor(ped: number, colorID: number, highlightColorID: number): void;
	export function getNumHairColors(): number;
	export function getNumMakeupColors(): number;
	export function getPedHairRgbColor(p0: number, r: number, g: number, b: number): [void, number, number, number];
	export function getPedMakeupRgbColor(p0: number, r: number, g: number, b: number): [void, number, number, number];
	export function _0xED6D8E27A43B8CDE(p0: number): boolean;
	export function _0xEA9960D07DADCF10(p0: number): number;
	export function _0x3E802F11FBE27674(p0: number): boolean;
	export function _0xF41B5D290C99A3D6(p0: number): boolean;
	export function isPedHairColorValid(colorID: number): boolean;
	export function _0xAAA6A3698A69E048(p0: number): number;
	export function isPedLipstickColorValid(colorID: number): boolean;
	export function isPedBlushColorValid(colorID: number): boolean;
	export function _0x09E7ECA981D9B210(p0: number): number;
	export function _0xC56FBF2F228E1DAC(modelHash: number, p1: number, p2: number): number;
	export function setPedFaceFeature(ped: number, index: number, scale: number): void;
	export function hasPedHeadBlendFinished(ped: number): boolean;
	export function _0x4668D80430D6C299(ped: number): void;
	export function setHeadBlendPaletteColor(ped: number, r: number, g: number, b: number, p4: number): void;
	export function disableHeadBlendPaletteColor(ped: number): void;
	export function getFirstParentIdForPedType(type: number): number;
	export function getNumParentPedsOfType(type: number): number;
	export function _0x39D55A620FCB6A3A(ped: number, slot: number, drawableId: number, textureId: number): number;
	export function _0x66680A92700F43DF(p0: number): boolean;
	export function _0x5AAB586FFEC0FD96(p0: number): void;
	export function isPedPropValid(ped: number, componentId: number, drawableId: number, TextureId: number): boolean;
	export function _0x784002A632822099(ped: number): boolean;
	export function _0xF79F9DEF0AADE61A(ped: number): void;
	export function getPedPropIndex(ped: number, componentId: number): number;
	export function setPedPropIndex(ped: number, componentId: number, drawableId: number, TextureId: number, attach: boolean): void;
	export function knockOffPedProp(ped: number, p1: boolean, p2: boolean, p3: boolean, p4: boolean): void;
	export function clearPedProp(ped: number, propId: number): void;
	export function clearAllPedProps(ped: number): void;
	export function _0xAFF4710E2A0A6C12(ped: number): void;
	export function getPedPropTextureIndex(ped: number, componentId: number): number;
	export function _0x1280804F7CFD2D6C(p0: number): void;
	export function _0x36C6984C3ED0C911(p0: number): void;
	export function clearPedScubaGearVariation(ped: number): void;
	export function _0xFEC9A3B1820F3331(p0: number): boolean;
	export function setBlockingOfNonTemporaryEvents(ped: number, toggle: boolean): void;
	export function setPedBoundsOrientation(ped: number, p1: number, p2: number, p3: number, p4: number, p5: number): void;
	export function registerTarget(ped: number, target: number): void;
	export function registerHatedTargetsAroundPed(ped: number, radius: number): void;
	export function getRandomPedAtCoord(x: number, y: number, z: number, xRadius: number, yRadius: number, zRadius: number, pedType: number): number;
	export function getClosestPed(x: number, y: number, z: number, radius: number, p4: boolean, p5: boolean, outPed: number, p7: boolean, p8: boolean, pedType: number): [boolean, number];
	export function setScenarioPedsToBeReturnedByNextCommand(value: boolean): void;
	export function _0x03EA03AF85A85CB7(ped: number, p1: boolean, p2: boolean, p3: boolean, p4: boolean, p5: boolean, p6: boolean, p7: boolean, p8: number): boolean;
	export function setDriverRacingModifier(driver: number, modifier: number): void;
	export function setDriverAbility(driver: number, ability: number): void;
	export function setDriverAggressiveness(driver: number, aggressiveness: number): void;
	export function canPedRagdoll(ped: number): boolean;
	export function setPedToRagdoll(ped: number, time1: number, time2: number, ragdollType: number, p4: boolean, p5: boolean, p6: boolean): boolean;
	export function setPedToRagdollWithFall(ped: number, time: number, p2: number, ragdollType: number, x: number, y: number, z: number, p7: number, p8: number, p9: number, p10: number, p11: number, p12: number, p13: number): boolean;
	export function setPedRagdollOnCollision(ped: number, toggle: boolean): void;
	export function isPedRagdoll(ped: number): boolean;
	export function isPedRunningRagdollTask(ped: number): boolean;
	export function setPedRagdollForceFall(ped: number): void;
	export function resetPedRagdollTimer(ped: number): void;
	export function setPedCanRagdoll(ped: number, toggle: boolean): void;
	export function isPedRunningMeleeTask(ped: number): boolean;
	export function isPedRunningMobilePhoneTask(ped: number): boolean;
	export function _0xA3F3564A5B3646C0(ped: number): boolean;
	export function setRagdollBlockingFlags(ped: number, flags: number): void;
	export function clearRagdollBlockingFlags(ped: number, flags: number): void;
	export function setPedAngledDefensiveArea(ped: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: boolean, p9: boolean): void;
	export function setPedSphereDefensiveArea(ped: number, x: number, y: number, z: number, radius: number, p5: boolean, p6: boolean): void;
	export function setPedDefensiveSphereAttachedToPed(ped: number, target: number, xOffset: number, yOffset: number, zOffset: number, radius: number, p6: boolean): void;
	export function setPedDefensiveSphereAttachedToVehicle(ped: number, target: number, xOffset: number, yOffset: number, zOffset: number, radius: number, p6: boolean): void;
	export function setPedDefensiveAreaAttachedToPed(ped: number, attachPed: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: boolean, p10: boolean): void;
	export function setPedDefensiveAreaDirection(ped: number, p1: number, p2: number, p3: number, p4: boolean): void;
	export function removePedDefensiveArea(ped: number, toggle: boolean): void;
	export function getPedDefensiveAreaPosition(ped: number, p1: boolean): Vector3;
	export function isPedDefensiveAreaActive(ped: number, p1: boolean): boolean;
	export function setPedPreferredCoverSet(ped: number, itemSet: number): void;
	export function removePedPreferredCoverSet(ped: number): void;
	export function reviveInjuredPed(ped: number): void;
	export function resurrectPed(ped: number): void;
	export function setPedNameDebug(ped: number, name: string): void;
	export function getPedExtractedDisplacement(ped: number, worldSpace: boolean): Vector3;
	export function setPedDiesWhenInjured(ped: number, toggle: boolean): void;
	export function setPedEnableWeaponBlocking(ped: number, toggle: boolean): void;
	export function _0xF9ACF4A08098EA25(ped: number, p1: boolean): void;
	export function resetPedVisibleDamage(ped: number): void;
	export function applyPedBloodDamageByZone(ped: number, p1: number, p2: number, p3: number, p4: number): void;
	export function applyPedBlood(ped: number, boneIndex: number, xRot: number, yRot: number, zRot: number, woundType: string): void;
	export function applyPedBloodByZone(ped: number, p1: number, p2: number, p3: number, p4: number): [void, number];
	export function applyPedBloodSpecific(ped: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number): [void, number];
	export function applyPedDamageDecal(ped: number, damageZone: number, xOffset: number, yOffset: number, heading: number, scale: number, alpha: number, variation: number, fadeIn: boolean, decalName: string): void;
	export function applyPedDamagePack(ped: number, damagePack: string, damage: number, mult: number): void;
	export function clearPedBloodDamage(ped: number): void;
	export function clearPedBloodDamageByZone(ped: number, p1: number): void;
	export function hidePedBloodDamageByZone(ped: number, p1: number, p2: boolean): void;
	export function clearPedDamageDecalByZone(ped: number, p1: number, p2: string): void;
	export function getPedDecorationsState(ped: number): number;
	export function _0x2B694AFCF64E6994(ped: number, p1: boolean): void;
	export function clearPedWetness(ped: number): void;
	export function setPedWetnessHeight(ped: number, height: number): void;
	export function setPedWetnessEnabledThisFrame(ped: number): void;
	export function clearPedEnvDirt(ped: number): void;
	export function setPedSweat(ped: number, sweat: number): void;
	export function addPedDecorationFromHashes(ped: number, collection: number, overlay: number): void;
	export function addPedDecorationFromHashesInCorona(ped: number, collection: number, overlay: number): void;
	export function getPedDecorationZoneFromHashes(collection: number, overlay: number): number;
	export function clearPedDecorations(ped: number): void;
	export function clearPedDecorationsLeaveScars(ped: number): void;
	export function wasPedSkeletonUpdated(ped: number): boolean;
	export function getPedBoneCoords(ped: number, boneId: number, offsetX: number, offsetY: number, offsetZ: number): Vector3;
	export function createNmMessage(startImmediately: boolean, messageId: number): void;
	export function givePedNmMessage(ped: number): void;
	export function addScenarioBlockingArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p6: boolean, p7: boolean, p8: boolean, p9: boolean): number;
	export function removeScenarioBlockingAreas(): void;
	export function removeScenarioBlockingArea(p0: number, p1: boolean): void;
	export function setScenarioPedsSpawnInSphereArea(x: number, y: number, z: number, range: number, p4: number): void;
	export function doesScenarioBlockingAreaExist(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): boolean;
	export function isPedUsingScenario(ped: number, scenario: string): boolean;
	export function isPedUsingAnyScenario(ped: number): boolean;
	export function _0xFE07FF6495D52E2A(p0: number, p1: number, p2: number, p3: number): number;
	export function _0x9A77DFD295E29B09(p0: number, p1: boolean): void;
	export function _0x25361A96E0F7E419(p0: number, p1: number, p2: number, p3: number): number;
	export function _0xEC6935EBE0847B90(p0: number, p1: number, p2: number, p3: number): number;
	export function _0xA3A9299C4F2ADB98(p0: number): void;
	export function _0xF1C03A5352243A30(p0: number): void;
	export function _0xEEED8FAFEC331A70(p0: number, p1: number, p2: number, p3: number): number;
	export function _0x425AECF167663F48(ped: number, p1: boolean): void;
	export function _0x5B6010B3CBC29095(p0: number, p1: boolean): void;
	export function _0xCEDA60A74219D064(p0: number, p1: boolean): void;
	export function playFacialAnim(ped: number, animName: string, animDict: string): void;
	export function _0x5687C7F05B39E401(ped: number, animDict: string): void;
	export function setFacialIdleAnimOverride(ped: number, animName: string, animDict: string): void;
	export function clearFacialIdleAnimOverride(ped: number): void;
	export function setPedCanPlayGestureAnims(ped: number, toggle: boolean): void;
	export function setPedCanPlayVisemeAnims(ped: number, toggle: boolean, p2: boolean): void;
	export function setPedCanPlayInjuredAnims(ped: number, p1: boolean): void;
	export function setPedCanPlayAmbientAnims(ped: number, toggle: boolean): void;
	export function setPedCanPlayAmbientBaseAnims(ped: number, toggle: boolean): void;
	export function _0xC2EE020F5FB4DB53(ped: number): void;
	export function setPedCanArmIk(ped: number, toggle: boolean): void;
	export function setPedCanHeadIk(ped: number, toggle: boolean): void;
	export function setPedCanLegIk(ped: number, toggle: boolean): void;
	export function setPedCanTorsoIk(ped: number, toggle: boolean): void;
	export function _0xF5846EDB26A98A24(ped: number, p1: boolean): void;
	export function _0x6647C5F6F5792496(ped: number, p1: boolean): void;
	export function setPedCanUseAutoConversationLookat(ped: number, toggle: boolean): void;
	export function isPedHeadtrackingPed(ped1: number, ped2: number): boolean;
	export function isPedHeadtrackingEntity(ped: number, entity: number): boolean;
	export function setPedPrimaryLookat(ped: number, lookAt: number): void;
	export function _0x78C4E9961DB3EB5B(p0: number, p1: number): void;
	export function setPedClothProne(p0: number, p1: number): void;
	export function _0xA660FAF550EB37E5(p0: number, p1: boolean): void;
	export function setPedConfigFlag(ped: number, flagId: number, value: boolean): void;
	export function setPedResetFlag(ped: number, flagId: number, doReset: boolean): void;
	export function getPedConfigFlag(ped: number, flagId: number, p2: boolean): boolean;
	export function getPedResetFlag(ped: number, flagId: number): boolean;
	export function setPedGroupMemberPassengerIndex(ped: number, index: number): void;
	export function setPedCanEvasiveDive(ped: number, toggle: boolean): void;
	export function isPedEvasiveDiving(ped: number, evadingEntity: number): [boolean, number];
	export function setPedShootsAtCoord(ped: number, x: number, y: number, z: number, toggle: boolean): void;
	export function setPedModelIsSuppressed(ped: number, toggle: boolean): void;
	export function stopAnyPedModelBeingSuppressed(): void;
	export function setPedCanBeTargetedWhenInjured(ped: number, toggle: boolean): void;
	export function setPedGeneratesDeadBodyEvents(ped: number, toggle: boolean): void;
	export function _0xE43A13C9E4CCCBCF(ped: number, p1: boolean): void;
	export function _0x3E9679C1DFCF422C(p0: number, p1: number): void;
	export function setPedCanRagdollFromPlayerImpact(ped: number, toggle: boolean): void;
	export function givePedHelmet(ped: number, cannotRemove: boolean, helmetFlag: number, textureIndex: number): void;
	export function removePedHelmet(ped: number, instantly: boolean): void;
	export function _0x14590DDBEDB1EC85(ped: number): boolean;
	export function setPedHelmet(ped: number, canWearHelmet: boolean): void;
	export function setPedHelmetFlag(ped: number, helmetFlag: number): void;
	export function setPedHelmetPropIndex(ped: number, propIndex: number, p2: boolean): void;
	export function setPedHelmetUnk(ped: number, p1: boolean, p2: number, p3: number): void;
	export function isPedHelmetUnk(ped: number): boolean;
	export function setPedHelmetTextureIndex(ped: number, textureIndex: number): void;
	export function isPedWearingHelmet(ped: number): boolean;
	export function _0x687C0B594907D2E8(ped: number): void;
	export function _0x451294E859ECC018(p0: number): number;
	export function _0x9D728C1E12BF5518(p0: number): number;
	export function _0xF2385935BFFD4D92(p0: number): boolean;
	export function setPedToLoadCover(ped: number, toggle: boolean): void;
	export function setPedCanCowerInCover(ped: number, toggle: boolean): void;
	export function setPedCanPeekInCover(ped: number, toggle: boolean): void;
	export function setPedPlaysHeadOnHornAnimWhenDiesInVehicle(ped: number, toggle: boolean): void;
	export function setPedLegIkMode(ped: number, mode: number): void;
	export function setPedMotionBlur(ped: number, toggle: boolean): void;
	export function setPedCanSwitchWeapon(ped: number, toggle: boolean): void;
	export function setPedDiesInstantlyInWater(ped: number, toggle: boolean): void;
	export function _0x1A330D297AAC6BC1(ped: number, p1: number): void;
	export function stopPedWeaponFiringWhenDropped(ped: number): void;
	export function setScriptedAnimSeatOffset(ped: number, p1: number): void;
	export function setPedCombatMovement(ped: number, combatMovement: number): void;
	export function getPedCombatMovement(ped: number): number;
	export function setPedCombatAbility(ped: number, p1: number): void;
	export function setPedCombatRange(ped: number, p1: number): void;
	export function getPedCombatRange(ped: number): number;
	export function setPedCombatAttributes(ped: number, attributeIndex: number, enabled: boolean): void;
	export function setPedTargetLossResponse(ped: number, responseType: number): void;
	export function isPedPerformingMeleeAction(ped: number): boolean;
	export function isPedPerformingStealthKill(ped: number): boolean;
	export function _0xEBD0EDBA5BE957CF(ped: number): boolean;
	export function isPedBeingStealthKilled(ped: number): boolean;
	export function getMeleeTargetForPed(ped: number): number;
	export function wasPedKilledByStealth(ped: number): boolean;
	export function wasPedKilledByTakedown(ped: number): boolean;
	export function wasPedKnockedOut(ped: number): boolean;
	export function setPedFleeAttributes(ped: number, attributeFlags: number, enable: boolean): void;
	export function setPedCowerHash(ped: number, p1: string): void;
	export function _0x2016C603D6B8987C(ped: number, toggle: boolean): void;
	export function setPedSteersAroundPeds(ped: number, toggle: boolean): void;
	export function setPedSteersAroundObjects(ped: number, toggle: boolean): void;
	export function setPedSteersAroundVehicles(ped: number, toggle: boolean): void;
	export function _0xA9B61A329BFDCBEA(p0: number, p1: boolean): void;
	export function _0x570389D1C3DE3C6B(p0: number): void;
	export function _0x576594E8D64375E2(p0: number, p1: boolean): void;
	export function _0xA52D5247A4227E14(p0: number): void;
	export function isAnyPedNearPoint(x: number, y: number, z: number, radius: number): boolean;
	export function _0x2208438012482A1A(ped: number, p1: boolean, p2: boolean): void;
	export function _0xFCF37A457CB96DC0(p0: number, p1: number, p2: number, p3: number, p4: number): boolean;
	export function requestPedVisibilityTracking(ped: number): void;
	export function requestPedVehicleVisibilityTracking(ped: number, p1: boolean): void;
	export function _0xCD018C591F94CB43(ped: number, p1: boolean): void;
	export function _0x75BA1CB3B7D40CAF(ped: number, p1: boolean): void;
	export function isTrackedPedVisible(ped: number): boolean;
	export function _0x511F1A683387C7E2(ped: number): number;
	export function isPedTracked(ped: number): boolean;
	export function hasPedReceivedEvent(ped: number, eventId: number): boolean;
	export function canPedSeeHatedPed(ped1: number, ped2: number): boolean;
	export function _0x9C6A6C19B6C0C496(ped: number, p1: number): [boolean, number];
	export function _0x2DFC81C9B9608549(ped: number, p1: number): [boolean, number];
	export function getPedBoneIndex(ped: number, boneId: number): number;
	export function getPedRagdollBoneIndex(ped: number, bone: number): number;
	export function setPedEnveffScale(ped: number, value: number): void;
	export function getPedEnveffScale(ped: number): number;
	export function setEnablePedEnveffScale(ped: number, toggle: boolean): void;
	export function _0x110F526AB784111F(ped: number, p1: number): void;
	export function _0xD69411AA0CEBF9E9(ped: number, p1: number, p2: number, p3: number): void;
	export function setPedReflectionIntensity(ped: number, intensity: number): void;
	export function getPedReflectionIntensity(ped: number): number;
	export function isPedShaderEffectValid(ped: number): boolean;
	export function _0xE906EC930F5FE7C8(p0: number, p1: number): void;
	export function _0x1216E0BFA72CC703(p0: number, p1: number): void;
	export function _0x2B5AA717A181FB4C(p0: number, p1: boolean): void;
	export function _0xB8B52E498014F5B0(ped: number): boolean;
	export function createSynchronizedScene(x: number, y: number, z: number, roll: number, pitch: number, yaw: number, p6: number): number;
	export function createSynchronizedScene2(x: number, y: number, z: number, radius: number, object: number): number;
	export function isSynchronizedSceneRunning(sceneId: number): boolean;
	export function setSynchronizedSceneOrigin(sceneID: number, x: number, y: number, z: number, roll: number, pitch: number, yaw: number, p7: boolean): void;
	export function setSynchronizedScenePhase(sceneID: number, phase: number): void;
	export function getSynchronizedScenePhase(sceneID: number): number;
	export function setSynchronizedSceneRate(sceneID: number, rate: number): void;
	export function getSynchronizedSceneRate(sceneID: number): number;
	export function setSynchronizedSceneLooped(sceneID: number, toggle: boolean): void;
	export function isSynchronizedSceneLooped(sceneID: number): boolean;
	export function setSynchronizedSceneOcclusionPortal(sceneID: number, p1: boolean): void;
	export function _0x7F2F4F13AC5257EF(p0: number): boolean;
	export function attachSynchronizedSceneToEntity(sceneID: number, entity: number, boneIndex: number): void;
	export function detachSynchronizedScene(sceneID: number): void;
	export function disposeSynchronizedScene(scene: number): void;
	export function forcePedMotionState(ped: number, motionStateHash: number, p2: boolean, p3: number, p4: boolean): boolean;
	export function _0xF60165E1D2C5370B(ped: number, p1: number, p2: number): [boolean, number, number];
	export function setPedMaxMoveBlendRatio(ped: number, value: number): void;
	export function setPedMinMoveBlendRatio(ped: number, value: number): void;
	export function setPedMoveRateOverride(ped: number, value: number): void;
	export function _0x0B3E35AC043707D9(p0: number, p1: number): void;
	export function _0x46B05BCAE43856B0(ped: number, flag: number): boolean;
	export function getPedNearbyVehicles(ped: number, sizeAndVehs: number): [number, number];
	export function getPedNearbyPeds(ped: number, sizeAndPeds: number, ignore: number): [number, number];
	export function _0x7350823473013C02(ped: number): boolean;
	export function isPedUsingActionMode(ped: number): boolean;
	export function setPedUsingActionMode(ped: number, p1: boolean, p2: number, action: string): void;
	export function setMovementModeOverride(ped: number, name: string): void;
	export function setPedCapsule(ped: number, value: number): void;
	export function registerPedheadshot(ped: number): number;
	export function registerPedheadshot3(ped: number): number;
	export function registerPedheadshotTransparent(ped: number): number;
	export function unregisterPedheadshot(id: number): void;
	export function isPedheadshotValid(id: number): boolean;
	export function isPedheadshotReady(id: number): boolean;
	export function getPedheadshotTxdString(id: number): string;
	export function requestPedheadshotImgUpload(id: number): boolean;
	export function releasePedheadshotImgUpload(id: number): void;
	export function _0xEBB376779A760AA8(): number;
	export function _0x876928DDDFCCC9CD(): number;
	export function _0xE8A169E666CBC541(): number;
	export function _0xC1F6EBF9A3D55538(p0: number, p1: number): void;
	export function _0x600048C60D5C2C51(p0: number): void;
	export function _0x2DF9038C90AD5264(p0: number, p1: number, p2: number, p3: number, p4: number, interiorFlags: number, scale: number, duration: number): void;
	export function _0xB2AFF10216DEFA2F(x: number, y: number, z: number, p3: number, p4: number, p5: number, p6: number, interiorFlags: number, scale: number, duration: number): void;
	export function _0xFEE4A5459472A9F8(): void;
	export function _0x3C67506996001F5E(): number;
	export function _0xA586FBEB32A53DBB(): number;
	export function _0xF445DE8DA80A1792(): number;
	export function _0xA635C11B8C44AFC2(): number;
	export function _0x280C7E3AC7F56E90(p0: number, p1: number, p2: number, p3: number): [void, number, number, number];
	export function _0xB782F8238512BAD5(p0: number, p1: number): [void, number];
	export function setIkTarget(ped: number, ikIndex: number, entityLookAt: number, boneLookAt: number, offsetX: number, offsetY: number, offsetZ: number, p7: number, blendInDuration: number, blendOutDuration: number): void;
	export function _0xED3C76ADFA6D07C4(ped: number): void;
	export function requestActionModeAsset(asset: string): void;
	export function hasActionModeAssetLoaded(asset: string): boolean;
	export function removeActionModeAsset(asset: string): void;
	export function requestStealthModeAsset(asset: string): void;
	export function hasStealthModeAssetLoaded(asset: string): boolean;
	export function removeStealthModeAsset(asset: string): void;
	export function setPedLodMultiplier(ped: number, multiplier: number): void;
	export function _0xE861D0B05C7662B8(p0: number, p1: number, p2: number): [void, number];
	export function _0x129466ED55140F8D(ped: number, toggle: boolean): void;
	export function setForceStepType(ped: number, p1: boolean, type: number, p3: number): void;
	export function isAnyHostilePedNearPoint(ped: number, x: number, y: number, z: number, radius: number): boolean;
	export function _0x820E9892A77E97CD(p0: number, p1: number): void;
	export function _0x06087579E7AA85A9(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): boolean;
	export function _0xD8C3BE3EE94CAF2D(p0: number, p1: number, p2: number, p3: number, p4: number): void;
	export function _0xD33DAA36272177C4(ped: number): void;
	export function _0x711794453CFD692B(p0: number, p1: number): void;
	export function _0x83A169EABCDB10A2(p0: number, p1: number): void;
	export function _0x288DF530C92DAD6F(p0: number, p1: number): void;
	export function _0x3795688A307E1EB6(Ped: number): boolean;
	export function _0x0F62619393661D6E(p0: number, p1: number, p2: number): void;
	export function _0xDFE68C4B787E1BFB(p0: number): void;
	export function setEnableScubaGearLight(ped: number, toggle: boolean): void;
	export function isScubaGearLightEnabled(ped: number): boolean;
	export function _0x637822DC2AFEEBF8(p0: number): void;
	export function addRope(x: number, y: number, z: number, rotX: number, rotY: number, rotZ: number, length: number, ropeType: number, maxLength: number, minLength: number, p10: number, p11: boolean, p12: boolean, rigid: boolean, p14: number, breakWhenShot: boolean, unkPtr: number): [number, number];
	export function deleteRope(ropeId: number): [void, number];
	export function deleteChildRope(ropeId: number): void;
	export function doesRopeExist(ropeId: number): [boolean, number];
	export function ropeDrawShadowEnabled(ropeId: number, toggle: boolean): [void, number];
	export function loadRopeData(ropeId: number, rope_preset: string): void;
	export function pinRopeVertex(ropeId: number, vertex: number, x: number, y: number, z: number): void;
	export function unpinRopeVertex(ropeId: number, vertex: number): void;
	export function getRopeVertexCount(ropeId: number): number;
	export function attachEntitiesToRope(ropeId: number, ent1: number, ent2: number, ent1_x: number, ent1_y: number, ent1_z: number, ent2_x: number, ent2_y: number, ent2_z: number, length: number, p10: boolean, p11: boolean, p12: number, p13: number): [void, number, number];
	export function attachRopeToEntity(ropeId: number, entity: number, x: number, y: number, z: number, p5: boolean): void;
	export function detachRopeFromEntity(ropeId: number, entity: number): void;
	export function ropeSetUpdatePinverts(ropeId: number): void;
	export function _0xDC57A637A20006ED(ropeId: number, p1: number): void;
	export function _0x36CCB9BE67B970FD(ropeId: number, p1: boolean): void;
	export function _0x84DE3B5FB3E666F0(ropeId: number): [boolean, number];
	export function getRopeLastVertexCoord(ropeId: number): Vector3;
	export function getRopeVertexCoord(ropeId: number, vertex: number): Vector3;
	export function startRopeWinding(ropeId: number): void;
	export function stopRopeWinding(ropeId: number): void;
	export function startRopeUnwindingFront(ropeId: number): void;
	export function stopRopeUnwindingFront(ropeId: number): void;
	export function ropeConvertToSimple(ropeId: number): void;
	export function ropeLoadTextures(): void;
	export function ropeAreTexturesLoaded(): boolean;
	export function ropeUnloadTextures(): void;
	export function doesRopeBelongToThisScript(ropeId: number): boolean;
	export function _0xBC0CE682D4D05650(ropeId: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, p10: number, p11: number, p12: number, p13: number): void;
	export function _0xB1B6216CA2E7B55E(p0: number, p1: boolean, p2: boolean): void;
	export function _0xB743F735C03D7810(ropeId: number, p1: number): void;
	export function ropeGetDistanceBetweenEnds(ropeId: number): number;
	export function ropeForceLength(ropeId: number, length: number): void;
	export function ropeResetLength(ropeId: number, length: number): void;
	export function applyImpulseToCloth(posX: number, posY: number, posZ: number, vecX: number, vecY: number, vecZ: number, impulse: number): void;
	export function setDamping(entity: number, vertex: number, value: number): void;
	export function activatePhysics(entity: number): void;
	export function setCgoffset(entity: number, x: number, y: number, z: number): void;
	export function getCgoffset(entity: number): Vector3;
	export function setCgAtBoundcenter(entity: number): void;
	export function breakEntityGlass(entity: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, p10: boolean): void;
	export function _0x0C112765300C7E1E(p0: number): number;
	export function setDisableBreaking(object: number, toggle: boolean): void;
	export function _0xCC6E963682533882(object: number): void;
	export function setDisableFragDamage(object: number, toggle: boolean): void;
	export function setEntityProofUnk(entity: number, toggle: boolean): void;
	export function _0x9EBD751E5787BAF2(p0: boolean): void;
	export function _0xAA6A6098851C396F(p0: boolean): void;
	export function getPlayerPed(player: number): number;
	export function getPlayerPedScriptIndex(player: number): number;
	export function setPlayerModel(player: number, model: number): void;
	export function changePlayerPed(player: number, ped: number, p2: boolean, resetDamage: boolean): void;
	export function getPlayerRgbColour(player: number, r: number, g: number, b: number): [void, number, number, number];
	export function getNumberOfPlayers(): number;
	export function getPlayerTeam(player: number): number;
	export function setPlayerTeam(player: number, team: number): void;
	export function getNumberOfPlayersInTeam(team: number): number;
	export function getPlayerName(player: number): string;
	export function getWantedLevelRadius(player: number): number;
	export function getPlayerWantedCentrePosition(player: number): Vector3;
	export function setPlayerWantedCentrePosition(player: number, position: vectorPtr, p2: boolean, p3: boolean): [void, vectorPtr];
	export function getWantedLevelThreshold(wantedLevel: number): number;
	export function setPlayerWantedLevel(player: number, wantedLevel: number, disableNoMission: boolean): void;
	export function setPlayerWantedLevelNoDrop(player: number, wantedLevel: number, p2: boolean): void;
	export function setPlayerWantedLevelNow(player: number, p1: boolean): void;
	export function arePlayerFlashingStarsAboutToDrop(player: number): boolean;
	export function arePlayerStarsGreyedOut(player: number): boolean;
	export function _0x7E07C78925D5FD96(p0: number): number;
	export function setDispatchCopsForPlayer(player: number, toggle: boolean): void;
	export function isPlayerWantedLevelGreater(player: number, wantedLevel: number): boolean;
	export function clearPlayerWantedLevel(player: number): void;
	export function isPlayerDead(player: number): boolean;
	export function isPlayerPressingHorn(player: number): boolean;
	export function setPlayerControl(player: number, bHasControl: boolean, flags: number): void;
	export function getPlayerWantedLevel(player: number): number;
	export function setMaxWantedLevel(maxWantedLevel: number): void;
	export function setPoliceRadarBlips(toggle: boolean): void;
	export function setPoliceIgnorePlayer(player: number, toggle: boolean): void;
	export function isPlayerPlaying(player: number): boolean;
	export function setEveryoneIgnorePlayer(player: number, toggle: boolean): void;
	export function setAllRandomPedsFlee(player: number, toggle: boolean): void;
	export function setAllRandomPedsFleeThisFrame(player: number): void;
	export function _0xDE45D1A1EF45EE61(player: number, toggle: boolean): void;
	export function _0xC3376F42B1FACCC6(player: number): void;
	export function _0xFAC75988A7D078D3(player: number): void;
	export function setIgnoreLowPriorityShockingEvents(player: number, toggle: boolean): void;
	export function setWantedLevelMultiplier(multiplier: number): void;
	export function setWantedLevelDifficulty(player: number, difficulty: number): void;
	export function resetWantedLevelDifficulty(player: number): void;
	export function startFiringAmnesty(duration: number): void;
	export function reportCrime(player: number, crimeType: number, wantedLvlThresh: number): void;
	export function switchCrimeType(player: number, p1: number): void;
	export function _0xBC9490CA15AEA8FB(player: number): void;
	export function _0x4669B3ED80F24B4E(player: number): void;
	export function _0x2F41A3BAE005E5FA(p0: number, p1: number): void;
	export function _0xAD73CE5A09E42D12(player: number): void;
	export function _0x36F1B38855F2A8DF(player: number): void;
	export function _0xDC64D2C53493ED12(player: number): void;
	export function _0xB45EFF719D8427A6(p0: number): void;
	export function _0x0032A6DBA562C518(): void;
	export function canPlayerStartMission(player: number): boolean;
	export function isPlayerReadyForCutscene(player: number): boolean;
	export function isPlayerTargettingEntity(player: number, entity: number): boolean;
	export function getPlayerTargetEntity(player: number, entity: number): [boolean, number];
	export function isPlayerFreeAiming(player: number): boolean;
	export function isPlayerFreeAimingAtEntity(player: number, entity: number): boolean;
	export function getEntityPlayerIsFreeAimingAt(player: number, entity: number): [boolean, number];
	export function setPlayerLockonRangeOverride(player: number, range: number): void;
	export function setPlayerCanDoDriveBy(player: number, toggle: boolean): void;
	export function setPlayerCanBeHassledByGangs(player: number, toggle: boolean): void;
	export function setPlayerCanUseCover(player: number, toggle: boolean): void;
	export function getMaxWantedLevel(): number;
	export function isPlayerTargettingAnything(player: number): boolean;
	export function setPlayerSprint(player: number, toggle: boolean): void;
	export function resetPlayerStamina(player: number): void;
	export function restorePlayerStamina(player: number, p1: number): void;
	export function getPlayerSprintStaminaRemaining(player: number): number;
	export function getPlayerSprintTimeRemaining(player: number): number;
	export function getPlayerUnderwaterTimeRemaining(player: number): number;
	export function _0xA0D3E4F7AAFB7E78(p0: number, p1: number): number;
	export function getPlayerGroup(player: number): number;
	export function getPlayerMaxArmour(player: number): number;
	export function isPlayerControlOn(player: number): boolean;
	export function isPlayerCamControlDisabled(): boolean;
	export function isPlayerScriptControlOn(player: number): boolean;
	export function isPlayerClimbing(player: number): boolean;
	export function isPlayerBeingArrested(player: number, atArresting: boolean): boolean;
	export function resetPlayerArrestState(player: number): void;
	export function getPlayersLastVehicle(): number;
	export function getPlayerIndex(): number;
	export function intToPlayerindex(value: number): number;
	export function intToParticipantindex(value: number): number;
	export function getTimeSincePlayerHitVehicle(player: number): number;
	export function getTimeSincePlayerHitPed(player: number): number;
	export function getTimeSincePlayerDroveOnPavement(player: number): number;
	export function getTimeSincePlayerDroveAgainstTraffic(player: number): number;
	export function isPlayerFreeForAmbientTask(player: number): boolean;
	export function playerId(): number;
	export function playerPedId(): number;
	export function networkPlayerIdToInt(): number;
	export function hasForceCleanupOccurred(cleanupFlags: number): boolean;
	export function forceCleanup(cleanupFlags: number): void;
	export function forceCleanupForAllThreadsWithThisName(name: string, cleanupFlags: number): void;
	export function forceCleanupForThreadWithThisId(id: number, cleanupFlags: number): void;
	export function getCauseOfMostRecentForceCleanup(): number;
	export function setPlayerMayOnlyEnterThisVehicle(player: number, vehicle: number): void;
	export function setPlayerMayNotEnterAnyVehicle(player: number): void;
	export function giveAchievementToPlayer(achievement: number): boolean;
	export function setAchievementProgress(achievement: number, progress: number): boolean;
	export function getAchievementProgress(achievement: number): number;
	export function hasAchievementBeenPassed(achievement: number): boolean;
	export function isPlayerOnline(): boolean;
	export function isPlayerLoggingInNp(): boolean;
	export function displaySystemSigninUi(unk: boolean): void;
	export function isSystemUiBeingDisplayed(): boolean;
	export function setPlayerInvincible(player: number, toggle: boolean): void;
	export function getPlayerInvincible(player: number): boolean;
	export function setPlayerInvincibleKeepRagdollEnabled(player: number, toggle: boolean): void;
	export function _0xCAC57395B151135F(player: number, p1: boolean): void;
	export function removePlayerHelmet(player: number, p2: boolean): void;
	export function givePlayerRagdollControl(player: number, toggle: boolean): void;
	export function setPlayerLockon(player: number, toggle: boolean): void;
	export function setPlayerTargetingMode(targetMode: number): void;
	export function setPlayerTargetLevel(targetLevel: number): void;
	export function _0xB9CF1F793A9F1BF1(): boolean;
	export function _0xCB645E85E97EA48B(): boolean;
	export function clearPlayerHasDamagedAtLeastOnePed(player: number): void;
	export function hasPlayerDamagedAtLeastOnePed(player: number): boolean;
	export function clearPlayerHasDamagedAtLeastOneNonAnimalPed(player: number): void;
	export function hasPlayerDamagedAtLeastOneNonAnimalPed(player: number): boolean;
	export function setAirDragMultiplierForPlayersVehicle(player: number, multiplier: number): void;
	export function setSwimMultiplierForPlayer(player: number, multiplier: number): void;
	export function setRunSprintMultiplierForPlayer(player: number, multiplier: number): void;
	export function getTimeSinceLastArrest(): number;
	export function getTimeSinceLastDeath(): number;
	export function assistedMovementCloseRoute(): void;
	export function assistedMovementFlushRoute(): void;
	export function setPlayerForcedAim(player: number, toggle: boolean): void;
	export function setPlayerForcedZoom(player: number, toggle: boolean): void;
	export function setPlayerForceSkipAimIntro(player: number, toggle: boolean): void;
	export function disablePlayerFiring(player: number, toggle: boolean): void;
	export function _0xB885852C39CC265D(): void;
	export function setDisableAmbientMeleeMove(player: number, toggle: boolean): void;
	export function setPlayerMaxArmour(player: number, value: number): void;
	export function _0x821FDC827D6F4090(p0: number): void;
	export function _0xB214D570EAD7F81A(player: number, p1: number): void;
	export function _0x17F7471EACA78290(p0: number): void;
	export function specialAbilityDeactivate(player: number): void;
	export function specialAbilityDeactivateFast(player: number): void;
	export function specialAbilityReset(player: number): void;
	export function _0xC9A763D8FE87436A(player: number): void;
	export function specialAbilityChargeSmall(player: number, p1: boolean, p2: boolean): void;
	export function specialAbilityChargeMedium(player: number, p1: boolean, p2: boolean): void;
	export function specialAbilityChargeLarge(player: number, p1: boolean, p2: boolean): void;
	export function specialAbilityChargeContinuous(player: number, p2: number): void;
	export function specialAbilityChargeAbsolute(player: number, p1: number, p2: boolean): void;
	export function specialAbilityChargeNormalized(player: number, normalizedValue: number, p2: boolean): void;
	export function specialAbilityFillMeter(player: number, p1: boolean): void;
	export function specialAbilityDepleteMeter(player: number, p1: boolean): void;
	export function specialAbilityLock(playerModel: number): void;
	export function specialAbilityUnlock(playerModel: number): void;
	export function isSpecialAbilityUnlocked(playerModel: number): boolean;
	export function isSpecialAbilityActive(player: number): boolean;
	export function isSpecialAbilityMeterFull(player: number): boolean;
	export function enableSpecialAbility(player: number, toggle: boolean): void;
	export function isSpecialAbilityEnabled(player: number): boolean;
	export function setSpecialAbilityMultiplier(multiplier: number): void;
	export function _0xFFEE8FA29AB9A18E(player: number): void;
	export function _0x5FC472C501CCADB3(player: number): boolean;
	export function _0xF10B44FD479D69F3(player: number, p1: number): boolean;
	export function _0xDD2620B7B9D16FF1(player: number, p1: number): boolean;
	export function startPlayerTeleport(player: number, x: number, y: number, z: number, heading: number, p5: boolean, p6: boolean, p7: boolean): void;
	export function hasPlayerTeleportFinished(player: number): boolean;
	export function stopPlayerTeleport(): void;
	export function isPlayerTeleportActive(): boolean;
	export function getPlayerCurrentStealthNoise(player: number): number;
	export function setPlayerHealthRechargeMultiplier(player: number, regenRate: number): void;
	export function getPlayerHealthRechargeLimit(player: number): number;
	export function setPlayerHealthRechargeLimit(player: number, limit: number): void;
	export function _0xEFD79FA81DFBA9CB(p0: number, p1: number): void;
	export function setPlayerWeaponDamageModifier(player: number, modifier: number): void;
	export function setPlayerWeaponDefenseModifier(player: number, modifier: number): void;
	export function setPlayerWeaponDefenseModifier2(player: number, modifier: number): void;
	export function setPlayerMeleeWeaponDamageModifier(player: number, modifier: number, p2: boolean): void;
	export function setPlayerMeleeWeaponDefenseModifier(player: number, modifier: number): void;
	export function setPlayerVehicleDamageModifier(player: number, modifier: number): void;
	export function setPlayerVehicleDefenseModifier(player: number, modifier: number): void;
	export function _0x8D768602ADEF2245(player: number, p1: number): void;
	export function _0xD821056B9ACF8052(p0: number, p1: number): void;
	export function _0x31E90B8873A4CD3B(p0: number, p1: number): void;
	export function setPlayerParachuteTintIndex(player: number, tintIndex: number): void;
	export function getPlayerParachuteTintIndex(player: number, tintIndex: number): [void, number];
	export function setPlayerReserveParachuteTintIndex(player: number, index: number): void;
	export function getPlayerReserveParachuteTintIndex(player: number, index: number): [void, number];
	export function setPlayerParachutePackTintIndex(player: number, tintIndex: number): void;
	export function getPlayerParachutePackTintIndex(player: number, tintIndex: number): [void, number];
	export function setPlayerHasReserveParachute(player: number): void;
	export function getPlayerHasReserveParachute(player: number): boolean;
	export function setPlayerCanLeaveParachuteSmokeTrail(player: number, enabled: boolean): void;
	export function setPlayerParachuteSmokeTrailColor(player: number, r: number, g: number, b: number): void;
	export function getPlayerParachuteSmokeTrailColor(player: number, r: number, g: number, b: number): [void, number, number, number];
	export function setPlayerResetFlagPreferRearSeats(player: number, flags: number): void;
	export function setPlayerNoiseMultiplier(player: number, multiplier: number): void;
	export function setPlayerSneakingNoiseMultiplier(player: number, multiplier: number): void;
	export function canPedHearPlayer(player: number, ped: number): boolean;
	export function simulatePlayerInputGait(player: number, amount: number, gaitType: number, speed: number, p4: boolean, p5: boolean): void;
	export function resetPlayerInputGait(player: number): void;
	export function setAutoGiveParachuteWhenEnterPlane(player: number, toggle: boolean): void;
	export function setAutoGiveScubaGearWhenExitVehicle(player: number, toggle: boolean): void;
	export function setPlayerStealthPerceptionModifier(player: number, value: number): void;
	export function _0x690A61A6D13583F6(player: number): boolean;
	export function _0x9EDD76E87D5D51BA(player: number): void;
	export function setPlayerSimulateAiming(player: number, toggle: boolean): void;
	export function setPlayerClothPinFrames(player: number, toggle: boolean): void;
	export function setPlayerClothPackageIndex(index: number): void;
	export function setPlayerClothLockCounter(value: number): void;
	export function playerAttachVirtualBound(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number): void;
	export function playerDetachVirtualBound(): void;
	export function hasPlayerBeenSpottedInStolenVehicle(player: number): boolean;
	export function isPlayerBattleAware(player: number): boolean;
	export function _0xBC0753C9CA14B506(player: number, p1: number, p2: boolean): boolean;
	export function extendWorldBoundaryForPlayer(x: number, y: number, z: number): void;
	export function resetWorldBoundaryForPlayer(): void;
	export function isPlayerRidingTrain(player: number): boolean;
	export function hasPlayerLeftTheWorld(player: number): boolean;
	export function setPlayerLeavePedBehind(player: number, toggle: boolean): void;
	export function setPlayerParachuteVariationOverride(player: number, p1: number, p2: number, p3: number, p4: boolean): void;
	export function clearPlayerParachuteVariationOverride(player: number): void;
	export function setPlayerParachuteModelOverride(player: number, model: number): void;
	export function clearPlayerParachuteModelOverride(player: number): void;
	export function setPlayerParachutePackModelOverride(player: number, model: number): void;
	export function clearPlayerParachutePackModelOverride(player: number): void;
	export function disablePlayerVehicleRewards(player: number): void;
	export function _0x2F7CEB6520288061(p0: boolean): void;
	export function setPlayerBluetoothState(player: number, state: boolean): void;
	export function isPlayerBluetoothEnable(player: number): boolean;
	export function _0x5501B7A5CDB79D37(player: number): void;
	export function getPlayerFakeWantedLevel(player: number): number;
	export function _0x55FCC0C390620314(p0: number, p1: number, p2: number): void;
	export function _0x2382AB11450AE7BA(p0: number, p1: number): void;
	export function _0x6E4361FF3E8CD7CA(p0: number): number;
	export function _0x237440E46D918649(p0: number): void;
	export function _0xEE4EBDD2593BA844(p0: number, p1: number): void;
	export function _0x7BAE68775557AE0B(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): void;
	export function _0x7148E0F43D11F0D9(): void;
	export function _0x70A382ADEC069DD3(p0: number, p1: number, p2: number): void;
	export function _0x48621C9FCA3EBD28(p0: number): void;
	export function _0x81CBAE94390F9F89(): void;
	export function _0x13B350B8AD0EEE10(): void;
	export function _0x293220DA1B46CEBC(p0: number, p1: number, p2: number): void;
	export function _0x208784099002BC30(missionNameLabel: string, p1: number): void;
	export function stopRecordingThisFrame(): void;
	export function _0xF854439EFBB3B583(): void;
	export function disableRockstarEditorCameraChanges(): void;
	export function _0x66972397E0757E7A(p0: number, p1: number, p2: number): void;
	export function startRecording(mode: number): void;
	export function stopRecordingAndSaveClip(): void;
	export function stopRecordingAndDiscardClip(): void;
	export function saveRecordingClip(): boolean;
	export function isRecording(): boolean;
	export function _0xDF4B952F7D381B95(): number;
	export function _0x4282E08174868BE3(): number;
	export function _0x33D47E85B476ABCD(p0: boolean): boolean;
	export function _0x7E2BD3EF6C205F09(p0: string, p1: boolean): void;
	export function isInteriorRenderingDisabled(): boolean;
	export function _0x5AD3932DAEB1E5D3(): void;
	export function _0xE058175F8EAFE79A(p0: boolean): void;
	export function resetEditorValues(): void;
	export function activateRockstarEditor(): void;
	export function requestScript(scriptName: string): void;
	export function setScriptAsNoLongerNeeded(scriptName: string): void;
	export function hasScriptLoaded(scriptName: string): boolean;
	export function doesScriptExist(scriptName: string): boolean;
	export function requestScriptWithNameHash(scriptHash: number): void;
	export function setScriptWithNameHashAsNoLongerNeeded(scriptHash: number): void;
	export function hasScriptWithNameHashLoaded(scriptHash: number): boolean;
	export function doesScriptWithNameHashExist(scriptHash: number): boolean;
	export function terminateThread(threadId: number): void;
	export function isThreadActive(threadId: number): boolean;
	export function getNameOfThread(threadId: number): string;
	export function scriptThreadIteratorReset(): void;
	export function scriptThreadIteratorGetNextThreadId(): number;
	export function getIdOfThisThread(): number;
	export function terminateThisThread(): void;
	export function getNumberOfReferencesOfScriptWithNameHash(scriptHash: number): number;
	export function getThisScriptName(): string;
	export function getHashOfThisScriptName(): number;
	export function getNumberOfEvents(eventGroup: number): number;
	export function getEventExists(eventGroup: number, eventIndex: number): boolean;
	export function getEventAtIndex(eventGroup: number, eventIndex: number): number;
	export function getEventData(eventGroup: number, eventIndex: number, argStruct: number, argStructSize: number): [boolean, number];
	export function triggerScriptEvent(eventGroup: number, args: number, argCount: number, bit: number): [void, number];
	export function shutdownLoadingScreen(): void;
	export function setNoLoadingScreen(toggle: boolean): void;
	export function getNoLoadingScreen(): boolean;
	export function _0xB1577667C3708F9B(): void;
	export function _0x836B62713E0534CA(): boolean;
	export function _0x760910B49D2B98EA(): void;
	export function bgrStartContextHash(contextHash: number): void;
	export function bgrEndContextHash(contextHash: number): void;
	export function bgrStartContext(contextName: string): void;
	export function bgrEndContext(contextName: string): void;
	export function _0x0F6F1EBBC4E1D5E6(scriptIndex: number, p1: string): boolean;
	export function _0x22E21FBCFC88C149(scriptIndex: number, p1: string): number;
	export function _0x829CD22E043A2577(p0: number): number;
	export function startShapeTestLosProbe(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, flags: number, entity: number, p8: number): number;
	export function startShapeTestRay(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, flags: number, entity: number, p8: number): number;
	export function startShapeTestBoundingBox(entity: number, flags1: number, flags2: number): number;
	export function startShapeTestBox(x: number, y: number, z: number, x1: number, y2: number, z2: number, rotX: number, rotY: number, rotZ: number, p9: number, p10: number, entity: number, p12: number): number;
	export function startShapeTestBound(entity: number, flags1: number, flags2: number): number;
	export function startShapeTestCapsule(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, radius: number, flags: number, entity: number, p9: number): number;
	export function startShapeTestSweptSphere(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, radius: number, flags: number, entity: number, p9: number): number;
	export function startShapeTestSurroundingCoords(pVec1: vectorPtr, pVec2: vectorPtr, flag: number, entity: number, flag2: number): [number, vectorPtr, vectorPtr];
	export function getShapeTestResult(rayHandle: number, hit: boolean, endCoords: vectorPtr, surfaceNormal: vectorPtr, entityHit: number): [number, boolean, vectorPtr, vectorPtr, number];
	export function getShapeTestResultIncludingMaterial(rayHandle: number, hit: boolean, endCoords: vectorPtr, surfaceNormal: vectorPtr, materialHash: number, entityHit: number): [number, boolean, vectorPtr, vectorPtr, number, number];
	export function shapeTestResultEntity(entityHit: number): void;
	export function getTotalScInboxIds(): number;
	export function scInboxMessageInit(p0: number): number;
	export function isScInboxValid(p0: number): boolean;
	export function scInboxMessagePop(p0: number): boolean;
	export function scInboxMessageGetDataInt(p0: number, context: string, out: number): [boolean, number];
	export function scInboxMessageGetDataBool(p0: number, p1: string): boolean;
	export function scInboxMessageGetDataString(p0: number, context: string, out: string): boolean;
	export function scInboxMessageDoApply(p0: number): boolean;
	export function scInboxMessageGetString(p0: number): string;
	export function scInboxMessagePushGamerToEventRecipList(networkHandle: number): [void, number];
	export function scInboxMessageSendUgcStatUpdateEvent(data: number): [void, number];
	export function scInboxMessageGetUgcdata(p0: number, p1: number): [boolean, number];
	export function scInboxMessageSendBountyPresenceEvent(data: number): [boolean, number];
	export function scInboxMessageGetBountyData(index: number, outData: number): [boolean, number];
	export function scInboxGetEmails(offset: number, limit: number): void;
	export function _0x16DA8172459434AA(): number;
	export function _0x7DB18CA8CAD5B098(): number;
	export function _0x4737980E8A283806(p0: number, p1: number): [boolean, number];
	export function _0x44ACA259D67651DB(p0: number, p1: number): [void, number];
	export function scEmailMessagePushGamerToRecipList(networkHandle: number): [void, number];
	export function scEmailMessageClearRecipList(): void;
	export function _0x116FB94DC4B79F17(p0: string): void;
	export function _0x07DBD622D9533857(p0: number): number;
	export function setHandleRockstarMessageViaScript(toggle: boolean): void;
	export function isRockstarMessageReadyForScript(): boolean;
	export function rockstarMessageGetString(): string;
	export function _0x1F1E9682483697C7(p0: number, p1: number): boolean;
	export function _0xC4C4575F62534A24(): number;
	export function _0x287F1F75D2803595(p0: number, p1: number): [boolean, number];
	export function _0x487912FD248EFDDF(p0: number, p1: number): boolean;
	export function _0xC85A7127E7AD02AA(): number;
	export function _0xA770C8EEC6FB2AC5(): number;
	export function scGetIsProfileAttributeSet(name: string): boolean;
	export function _0x7FFCBFEE44ECFABF(): number;
	export function _0x2D874D4AE612A65F(): number;
	export function scProfanityCheckString(string: string, token: number): [boolean, number];
	export function scProfanityCheckUgcString(string: string, token: number): [boolean, number];
	export function scProfanityGetCheckIsValid(token: number): boolean;
	export function scProfanityGetCheckIsPending(token: number): boolean;
	export function scProfanityGetStringPassed(token: number): boolean;
	export function scProfanityGetStringStatus(token: number): number;
	export function _0xF6BAAAF762E1BF40(p0: string, p1: number): [boolean, number];
	export function _0xF22CA0FD74B80E7A(p0: number): boolean;
	export function _0x9237E334F6E43156(p0: number): number;
	export function _0x700569DBA175A77C(p0: number): number;
	export function _0x1D4446A62D35B0D0(p0: number, p1: number): number;
	export function _0x2E89990DDFF670C3(p0: number, p1: number): number;
	export function _0xD0EE05FE193646EA(p0: number, p1: number, p2: number): [boolean, number, number, number];
	export function _0x1989C6E6F67E76A8(p0: number, p1: number, p2: number): [boolean, number, number, number];
	export function _0x07C61676E5BB52CD(p0: number): number;
	export function _0x8147FFF6A718E1AD(p0: number): number;
	export function _0x0F73393BAC7E6730(p0: number, p1: number): [boolean, number, number];
	export function _0xD302E99EDF0449CF(p0: number): number;
	export function _0x5C4EBFFA98BDB41C(p0: number): number;
	export function _0xFF8F3A92B75ED67A(): number;
	export function _0x4ED9C8D6DA297639(): number;
	export function _0x710BCDA8071EDED1(): number;
	export function _0x50A8A36201DBF83E(): number;
	export function _0x9DE5D2F723575ED0(): number;
	export function _0xC2C97EA97711D1AE(): number;
	export function _0x450819D8CF90C416(): number;
	export function _0x4A7D6E727F941747(p0: number): [number, number];
	export function _0xE75A4A2E5E316D86(): number;
	export function _0x2570E26BE63964E3(): number;
	export function _0x1D12A56FC95BE92E(): number;
	export function _0x33DF47CC0642061B(): number;
	export function _0xA468E0BE12B12C70(): number;
	export function _0x8CC469AB4D349B7C(p0: number, p1: string, p2: number): [boolean, number];
	export function _0xC5A35C73B68F3C49(): number;
	export function _0x699E4A5C8C893A18(p0: number, p1: string, p2: number): [boolean, number];
	export function _0x19853B5B17D77BCA(p0: number, p1: number): [boolean, number];
	export function _0x6BFB12CE158E3DD4(p0: number): boolean;
	export function _0xFE4C1D0D3B9CC17E(p0: number, p1: number): boolean;
	export function _0xD8122C407663B995(): number;
	export function _0x3001BEF2FECA3680(): boolean;
	export function _0x92DA6E70EF249BD1(p0: string, p1: number): [boolean, number];
	export function _0x675721C9F644D161(): void;
	export function _0xE4F6E8D07A2F0F51(p0: number): number;
	export function _0x8A4416C0DB05FA66(p0: number): number;
	export function _0xEA95C0853A27888E(): void;
	export function scGetNickname(): string;
	export function _0x225798743970412B(p0: number): [boolean, number];
	export function scGetHasAchievementBeenPassed(achievement: number): boolean;
	export function statClearSlotForReload(statSlot: number): number;
	export function statLoad(p0: number): boolean;
	export function statSave(p0: number, p1: boolean, p2: number): boolean;
	export function _0x5688585E6D563CD8(p0: number): void;
	export function statLoadPending(p0: number): boolean;
	export function statSavePending(): boolean;
	export function statSavePendingOrRequested(): boolean;
	export function statDeleteSlot(p0: number): number;
	export function statSlotIsLoaded(p0: number): boolean;
	export function _0x7F2C4CDF2E82DF4C(p0: number): boolean;
	export function _0xE496A53BA5F50A56(p0: number): number;
	export function _0xF434A10BA01C37D0(toggle: boolean): void;
	export function _0x7E6946F68A38B74F(p0: number): boolean;
	export function _0xA8733668D1047B51(p0: number): void;
	export function _0xECB41AC6AB754401(): boolean;
	export function _0x9B4BD21D69B1E609(): void;
	export function _0xC0E0D686DDFC6EAE(): number;
	export function statSetInt(statName: number, value: number, save: boolean): boolean;
	export function statSetFloat(statName: number, value: number, save: boolean): boolean;
	export function statSetBool(statName: number, value: boolean, save: boolean): boolean;
	export function statSetGxtLabel(statName: number, value: string, save: boolean): boolean;
	export function statSetDate(statName: number, value: number, numFields: number, save: boolean): [boolean, number];
	export function statSetString(statName: number, value: string, save: boolean): boolean;
	export function statSetPos(statName: number, x: number, y: number, z: number, save: boolean): boolean;
	export function statSetMaskedInt(statName: number, p1: number, p2: number, p3: number, save: boolean): boolean;
	export function statSetUserId(statName: number, value: string, save: boolean): boolean;
	export function statSetCurrentPosixTime(statName: number, p1: boolean): boolean;
	export function statGetInt(statHash: number, outValue: number, p2: number): [boolean, number];
	export function statGetFloat(statHash: number, outValue: number, p2: number): [boolean, number];
	export function statGetBool(statHash: number, outValue: boolean, p2: number): [boolean, boolean];
	export function statGetDate(statHash: number, p1: number, p2: number, p3: number): [boolean, number];
	export function statGetString(statHash: number, p1: number): string;
	export function statGetPos(p0: number, p1: number, p2: number, p3: number, p4: number): [boolean, number, number, number];
	export function statGetMaskedInt(p0: number, p1: number, p2: number, p3: number, p4: number): [boolean, number];
	export function statGetUserId(p0: number): string;
	export function statGetLicensePlate(statName: number): string;
	export function statSetLicensePlate(statName: number, str: string): boolean;
	export function statIncrement(statName: number, value: number): void;
	export function _0x5A556B229A169402(): boolean;
	export function _0xB1D2BB1E1631F5B1(): boolean;
	export function _0xBED9F5693F34ED17(statName: number, p1: number, outValue: number): [boolean, number];
	export function _0x26D7399B9587FE89(p0: number): void;
	export function _0xA78B8FA58200DA56(p0: number): void;
	export function statGetNumberOfDays(statName: number): number;
	export function statGetNumberOfHours(statName: number): number;
	export function statGetNumberOfMinutes(statName: number): number;
	export function statGetNumberOfSeconds(statName: number): number;
	export function statSetProfileSettingValue(profileSetting: number, value: number): void;
	export function _0xF4D8E7AC2A27758C(p0: number): number;
	export function _0x94F12ABF9C79E339(p0: number): number;
	export function getPackedBoolStatKey(index: number, spStat: boolean, charStat: boolean, character: number): number;
	export function getPackedIntStatKey(index: number, spStat: boolean, charStat: boolean, character: number): number;
	export function getPackedTitleUpdateBoolStatKey(index: number, spStat: boolean, charStat: boolean, character: number): number;
	export function getPackedTitleUpdateIntStatKey(index: number, spStat: boolean, charStat: boolean, character: number): number;
	export function getNgstatBoolHash(index: number, spStat: boolean, charStat: boolean, character: number, section: string): number;
	export function getNgstatIntHash(index: number, spStat: boolean, charStat: boolean, character: number, section: string): number;
	export function statGetBoolMasked(statName: number, mask: number, p2: number): boolean;
	export function statSetBoolMasked(statName: number, value: boolean, mask: number, save: boolean): boolean;
	export function playstatsBackgroundScriptAction(action: string, value: number): void;
	export function playstatsNpcInvite(p0: number): [void, number];
	export function playstatsAwardXp(amount: number, type: number, category: number): void;
	export function playstatsRankUp(rank: number): void;
	export function playstatsStartOfflineMode(): void;
	export function _0xA071E0ED98F91286(p0: number, p1: number): void;
	export function _0xC5BE134EC7BA96A0(p0: number, p1: number, p2: number, p3: number, p4: number): void;
	export function playstatsMissionStarted(p0: number, p1: number, p2: number, p3: boolean): [void, number];
	export function playstatsMissionOver(p0: number, p1: number, p2: number, p3: boolean, p4: boolean, p5: boolean): [void, number];
	export function playstatsMissionCheckpoint(p0: number, p1: number, p2: number, p3: number): [void, number];
	export function playstatsRandomMissionDone(name: string, p1: number, p2: number, p3: number): void;
	export function playstatsRosBet(amount: number, act: number, player: number, cm: number): void;
	export function playstatsRaceCheckpoint(p0: number, p1: number, p2: number, p3: number, p4: number): void;
	export function _0x6DEE77AFF8C21BD1(playerAccountId: number, posixTime: number): [boolean, number, number];
	export function playstatsMatchStarted(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): void;
	export function playstatsShopItem(p0: number, p1: number, p2: number, p3: number, p4: number): void;
	export function playstatsCrateDrop(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number): void;
	export function playstatsCrateCreated(p0: number, p1: number, p2: number): void;
	export function playstatsHoldUp(p0: number, p1: number, p2: number, p3: number): void;
	export function playstatsImpExp(p0: number, p1: number, p2: number, p3: number): void;
	export function playstatsRaceToPoint(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number): void;
	export function playstatsAcquiredHiddenPackage(p0: number): void;
	export function playstatsWebsiteVisited(scaleformHash: number, p1: number): void;
	export function playstatsFriendActivity(p0: number, p1: number): void;
	export function playstatsOddjobDone(p0: number, p1: number, p2: number): void;
	export function playstatsPropChange(p0: number, p1: number, p2: number, p3: number): void;
	export function playstatsClothChange(p0: number, p1: number, p2: number, p3: number, p4: number): void;
	export function playstatsWeaponModeChange(weaponHash: number, componentHashTo: number, componentHashFrom: number): void;
	export function playstatsCheatApplied(cheat: string): void;
	export function _0xF8C54A461C3E11DC(p0: number, p1: number, p2: number, p3: number): [void, number, number, number, number];
	export function _0xF5BB8DAC426A52C0(p0: number, p1: number, p2: number, p3: number): [void, number, number, number, number];
	export function _0xA736CF7FB7C5BFF4(p0: number, p1: number, p2: number, p3: number): [void, number, number, number, number];
	export function _0x14E0B2D1AD1044E0(p0: number, p1: number, p2: number, p3: number): [void, number, number, number, number];
	export function playstatsQuickfixTool(element: number, item: string): void;
	export function playstatsIdleKick(time: number): void;
	export function _0xD1032E482629049E(p0: number): void;
	export function playstatsHeistSaveCheat(hash: number, p1: number): void;
	export function playstatsDirectorMode(p0: number): [void, number];
	export function playstatsAwardBadsport(id: number): void;
	export function playstatsPegasaircraft(modelHash: number): void;
	export function _0x6A60E43998228229(p0: number): void;
	export function _0xBFAFDB5FAAA5C5AB(p0: number): void;
	export function _0x8C9D11605E59D955(p0: number): void;
	export function _0x3DE3AA516FB126A4(p0: number): void;
	export function _0xBAA2F0490E146BE8(p0: number): void;
	export function _0x1A7CE7CD3E653485(p0: number): void;
	export function _0x419615486BBF1956(p0: number): void;
	export function _0x84DFC579C2FC214C(p0: number): void;
	export function _0x0A9C7F36E5D7B683(p0: number): void;
	export function _0x164C5FF663790845(p0: number): void;
	export function _0xEDBF6C9B0D2C65C8(p0: number): void;
	export function _0x6551B1F7F6CD46EA(p0: number): void;
	export function _0x2CD90358F67D0AA8(p0: number): void;
	export function playstatsPiMenuHideSettings(data: number): [void, number];
	export function leaderboardsGetNumberOfColumns(p0: number, p1: number): number;
	export function leaderboardsGetColumnId(p0: number, p1: number, p2: number): number;
	export function leaderboardsGetColumnType(p0: number, p1: number, p2: number): number;
	export function leaderboardsReadClearAll(): number;
	export function leaderboardsReadClear(p0: number, p1: number, p2: number): number;
	export function leaderboardsReadPending(p0: number, p1: number, p2: number): boolean;
	export function leaderboardsReadAnyPending(): boolean;
	export function leaderboardsReadSuccessful(p0: number, p1: number, p2: number): boolean;
	export function leaderboards2ReadFriendsByRow(p0: number, p1: number, p2: number, p3: boolean, p4: number, p5: number): [boolean, number, number];
	export function leaderboards2ReadByHandle(p0: number, p1: number): [boolean, number, number];
	export function leaderboards2ReadByRow(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): [boolean, number, number, number, number];
	export function leaderboards2ReadByRank(p0: number, p1: number, p2: number): [boolean, number];
	export function leaderboards2ReadByRadius(p0: number, p1: number, p2: number): [boolean, number, number];
	export function leaderboards2ReadByScoreInt(p0: number, p1: number, p2: number): [boolean, number];
	export function leaderboards2ReadByScoreFloat(p0: number, p1: number, p2: number): [boolean, number];
	export function _0xC38DC1E90D22547C(p0: number, p1: number, p2: number): [boolean, number, number, number];
	export function leaderboards2ReadByPlatform(p0: number, gamerHandleCsv: string, platformName: string): [boolean, number];
	export function _0xA0F93D5465B3094D(p0: number): [boolean, number];
	export function _0x71B008056E5692D6(): void;
	export function _0x34770B9CE0E03B91(p0: number, p1: number): [boolean, number];
	export function _0x88578F6EC36B4A3A(p0: number, p1: number): number;
	export function _0x38491439B6BA7F7D(p0: number, p1: number): number;
	export function leaderboards2WriteData(p0: number): [boolean, number];
	export function leaderboardsWriteAddColumn(p0: number, p1: number, p2: number): void;
	export function leaderboardsWriteAddColumnLong(p0: number, p1: number, p2: number): void;
	export function leaderboardsCacheDataRow(p0: number): [boolean, number];
	export function leaderboardsClearCacheData(): void;
	export function _0x8EC74CEB042E7CFF(p0: number): void;
	export function leaderboardsGetCacheExists(p0: number): boolean;
	export function leaderboardsGetCacheTime(p0: number): number;
	export function leaderboardsGetCacheNumberOfRows(p0: number): number;
	export function leaderboardsGetCacheDataRow(p0: number, p1: number, p2: number): [boolean, number];
	export function updateStatInt(statHash: number, value: number, p2: number): void;
	export function updateStatFloat(statHash: number, value: number, p2: number): void;
	export function _0x6483C25849031C4F(p0: number, p1: number, p2: number, p3: number): [void, number];
	export function _0x5EAD2BF6484852E4(): boolean;
	export function _0xC141B8917E0017EC(): void;
	export function _0xB475F27C6A994D65(): void;
	export function _0xF1A1803D3476F215(value: number): void;
	export function _0x38BAAA5DD4C9D19F(value: number): void;
	export function _0x55384438FC55AD8E(value: number): void;
	export function _0x723C1CE13FBFDB67(p0: number, p1: number): void;
	export function _0x0D01D20616FC73FB(p0: number, p1: number): void;
	export function _0x428EAF89E24F6C36(p0: number, p1: number): void;
	export function _0x047CBED6F6F8B63C(): void;
	export function leaderboards2WriteDataForEventType(p0: number, p1: number): [boolean, number, number];
	export function _0x6F361B8889A792A3(): void;
	export function _0xC847B43F369AC0B5(): void;
	export function statMigrateSave(platformName: string): boolean;
	export function _0x9A62EC95AE10E011(): number;
	export function _0x4C89FE2BDEB3F169(): number;
	export function _0xC6E0E2616A7576BB(): number;
	export function _0x5BD5F255321C4AAF(p0: number): number;
	export function _0xDEAAF77EB3687E97(p0: number, p1: number): [number, number];
	export function statSaveMigrationStatusStart(): boolean;
	export function statGetSaveMigrationStatus(data: number): [number, number];
	export function statSaveMigrationCancel(): boolean;
	export function statGetCancelSaveMigrationStatus(): number;
	export function statSaveMigrationConsumeContentUnlock(contentId: number, srcPlatform: string, srcGamerHandle: string): boolean;
	export function statGetSaveMigrationConsumeContentUnlockStatus(p0: number): [number, number];
	export function _0x98E2BC1CA26287C3(): void;
	export function _0x629526ABA383BCAA(): void;
	export function _0xBE3DB208333D9844(): number;
	export function _0x33D72899E24C3365(p0: number, p1: number): number;
	export function _0xA761D4AC6115623D(): number;
	export function _0xF11F01D98113536A(p0: number): number;
	export function _0x8B9CDBD6C566C38C(): number;
	export function _0xE8853FBCE7D8D0D6(): number;
	export function _0xA943FD1722E11EFD(): number;
	export function _0x84A810B375E69C0E(): number;
	export function _0x9EC8858184CD253A(): number;
	export function _0xBA9749CC94C1FD85(): number;
	export function _0x55A8BECAF28A4EB7(): number;
	export function _0x32CAC93C9DE73D32(): number;
	export function _0xAFF47709F1D5DCCE(): number;
	export function _0x6E0A5253375C4584(): number;
	export function _0x1A8EA222F9C67DBB(p0: number): number;
	export function _0xF9F2922717B819EC(): number;
	export function _0x0B8B7F74BF061C6D(): number;
	export function _0xB3DA2606774A8E2D(): boolean;
	export function setHasContentUnlocksFlags(value: number): void;
	export function setSaveMigrationTransactionId(transactionId: number): void;
	export function _0x6BC0ACD0673ACEBE(p0: number, p1: number, p2: number): void;
	export function _0x8D8ADB562F09A245(p0: number): void;
	export function _0xD1A1EE3B4FA8E760(p0: number): void;
	export function _0x88087EE1F28024AE(p0: number): void;
	export function _0xFCC228E07217FCAC(p0: number): void;
	export function _0x678F86D8FC040BDB(p0: number): void;
	export function _0xA6F54BB2FFCA35EA(p0: number): void;
	export function _0x5FF2C33B13A02A11(p0: number): void;
	export function _0x282B6739644F4347(p0: number): void;
	export function _0xF06A6F41CB445443(p0: number): void;
	export function _0x7B18DA61F6BAE9D5(p0: number): void;
	export function _0x06EAF70AE066441E(p0: number): void;
	export function _0x14EDA9EE27BD1626(p0: number): void;
	export function _0x930F504203F561C9(p0: number): void;
	export function _0xE3261D791EB44ACB(p0: number): void;
	export function _0x73001E34F85137F8(p0: number): void;
	export function _0x53CAE13E9B426993(p0: number): void;
	export function _0x7D36291161859389(p0: number): void;
	export function playstatsSpentPiCustomLoadout(amount: number): void;
	export function _0xD6781E42755531F7(p0: number): void;
	export function _0xC729991A9065376E(p0: number): void;
	export function _0x2605663BD4F23B5D(p0: number): void;
	export function _0x04D90BA8207ADA2D(p0: number): void;
	export function _0x60EEDC12AF66E846(p0: number): void;
	export function _0x3EBEAC6C3F81F6BD(p0: number): void;
	export function _0x96E6D5150DBF1C09(p0: number, p1: number, p2: number): void;
	export function _0xA3C53804BDB68ED2(p0: number, p1: number): void;
	export function _0x6BCCF9948492FD85(p0: number, p1: number, p2: number, p3: number, p4: number): void;
	export function hiredLimo(p0: number, p1: number): void;
	export function orderedBossVehicle(p0: number, p1: number, vehicleHash: number): void;
	export function _0xD1C9B92BDD3F151D(p0: number, p1: number, p2: number): void;
	export function _0x44919CC079BB60BF(p0: number): void;
	export function _0x7033EEFD9B28088E(p0: number): void;
	export function _0xAA525DFF66BB82F5(p0: number, p1: number, p2: number): void;
	export function _0x015B03EE1C43E6EC(p0: number): void;
	export function playstatsStuntPerformedEventAllowTrigger(): void;
	export function playstatsStuntPerformedEventDisallowTrigger(): void;
	export function _0xBF371CD2B64212FD(p0: number): void;
	export function _0x7D8BA05688AD64C7(p0: number): void;
	export function _0x0B565B0AAE56A0E8(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): void;
	export function _0x28ECB8AC2F607DB2(p0: number, p1: number, p2: number, p3: number, p4: number): void;
	export function playstatsChangeMcEmblem(p0: number, p1: number, p2: number, p3: number, p4: number): void;
	export function _0xCC25A4553DFBF9EA(p0: number, p1: number, p2: number, p3: number, p4: number): void;
	export function _0xF534D94DFA2EAD26(p0: number, p1: number, p2: number, p3: number, p4: number): void;
	export function _0xD558BEC0BBA7E8D2(p0: number, p1: number, p2: number, p3: number, p4: number): void;
	export function playstatsEarnedMcPoints(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): void;
	export function _0x03C2EEBB04B3FB72(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): void;
	export function _0x8989CBD7B4E82534(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): void;
	export function _0x27AA1C973CACFE63(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number): void;
	export function playstatsCopyRankIntoNewSlot(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): void;
	export function playstatsDupeDetection(data: number): [void, number];
	export function playstatsBanAlert(p0: number): void;
	export function playstatsGunrunMissionEnded(data: number): [void, number];
	export function _0xDAF80797FC534BEC(p0: number): void;
	export function _0x316DB59CD14C1774(p0: number): void;
	export function _0x2D7A9B577E72385E(p0: number): void;
	export function _0x830C3A44EB3F2CF9(p0: number): void;
	export function _0xB26F670685631727(p0: number): void;
	export function _0xC14BD9F5337219B2(p0: number): void;
	export function playstatsStoneHatchetEnd(data: number): [void, number];
	export function playstatsSmugMissionEnded(data: number): [void, number];
	export function playstatsH2FmprepEnd(data: number): [void, number];
	export function playstatsH2InstanceEnd(data: number, p1: number, p2: number, p3: number): [void, number];
	export function playstatsDarMissionEnd(data: number): [void, number];
	export function playstatsEnterSessionPack(data: number): [void, number];
	export function playstatsDroneUsage(p0: number, p1: number, p2: number): void;
	export function playstatsSpectatorWheelSpin(p0: number, p1: number, p2: number, p3: number): void;
	export function playstatsArenaWarSpectator(p0: number, p1: number, p2: number, p3: number, p4: number): void;
	export function playstatsArenaWarsEnded(data: number): [void, number];
	export function loadAllObjectsNow(): void;
	export function loadScene(x: number, y: number, z: number): void;
	export function networkUpdateLoadScene(): boolean;
	export function isNetworkLoadingScene(): boolean;
	export function setInteriorActive(interiorID: number, toggle: boolean): void;
	export function requestModel(model: number): void;
	export function requestMenuPedModel(model: number): void;
	export function hasModelLoaded(model: number): boolean;
	export function requestModelsInRoom(interior: number, roomName: string): void;
	export function setModelAsNoLongerNeeded(model: number): void;
	export function isModelInCdimage(model: number): boolean;
	export function isModelValid(model: number): boolean;
	export function isModelAPed(model: number): boolean;
	export function isModelAVehicle(model: number): boolean;
	export function requestCollisionAtCoord(x: number, y: number, z: number): void;
	export function requestCollisionForModel(model: number): void;
	export function hasCollisionForModelLoaded(model: number): boolean;
	export function requestAdditionalCollisionAtCoord(x: number, y: number, z: number): void;
	export function doesAnimDictExist(animDict: string): boolean;
	export function requestAnimDict(animDict: string): void;
	export function hasAnimDictLoaded(animDict: string): boolean;
	export function removeAnimDict(animDict: string): void;
	export function requestAnimSet(animSet: string): void;
	export function hasAnimSetLoaded(animSet: string): boolean;
	export function removeAnimSet(animSet: string): void;
	export function requestClipSet(clipSet: string): void;
	export function hasClipSetLoaded(clipSet: string): boolean;
	export function removeClipSet(clipSet: string): void;
	export function requestIpl(iplName: string): void;
	export function removeIpl(iplName: string): void;
	export function isIplActive(iplName: string): boolean;
	export function setStreaming(toggle: boolean): void;
	export function setGamePausesForStreaming(toggle: boolean): void;
	export function setReducePedModelBudget(toggle: boolean): void;
	export function setReduceVehicleModelBudget(toggle: boolean): void;
	export function setDitchPoliceModels(toggle: boolean): void;
	export function getNumberOfStreamingRequests(): number;
	export function requestPtfxAsset(): void;
	export function hasPtfxAssetLoaded(): boolean;
	export function removePtfxAsset(): void;
	export function requestNamedPtfxAsset(fxName: string): void;
	export function hasNamedPtfxAssetLoaded(fxName: string): boolean;
	export function removeNamedPtfxAsset(fxName: string): void;
	export function setVehiclePopulationBudget(p0: number): void;
	export function setPedPopulationBudget(p0: number): void;
	export function clearFocus(): void;
	export function setFocusArea(x: number, y: number, z: number, offsetX: number, offsetY: number, offsetZ: number): void;
	export function setFocusEntity(entity: number): void;
	export function isEntityFocus(entity: number): boolean;
	export function _0x0811381EF5062FEC(p0: number): void;
	export function setMapdatacullboxEnabled(name: string, toggle: boolean): void;
	export function _0x4E52E752C76E7E7A(p0: number): void;
	export function formatFocusHeading(x: number, y: number, z: number, rad: number, p4: number, p5: number): number;
	export function _0x1F3F018BC3AFA77C(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number): number;
	export function _0x0AD9710CEE2F590F(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): number;
	export function _0x1EE7D8DF4425F053(p0: number): void;
	export function _0x7D41E9D2D17C5B2D(p0: number): number;
	export function _0x07C313F94746702C(p0: number): number;
	export function _0xBC9823AB80A3DCAC(): number;
	export function newLoadSceneStart(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number): boolean;
	export function newLoadSceneStartSphere(x: number, y: number, z: number, radius: number, p4: number): boolean;
	export function newLoadSceneStop(): void;
	export function isNewLoadSceneActive(): boolean;
	export function isNewLoadSceneLoaded(): boolean;
	export function _0x71E7B2E657449AAD(): number;
	export function startPlayerSwitch(from: number, to: number, flags: number, switchType: number): void;
	export function stopPlayerSwitch(): void;
	export function isPlayerSwitchInProgress(): boolean;
	export function getPlayerSwitchType(): number;
	export function getIdealPlayerSwitchType(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): number;
	export function getPlayerSwitchState(): number;
	export function getPlayerShortSwitchState(): number;
	export function _0x5F2013F8BC24EE69(p0: number): void;
	export function _0x78C0D93253149435(): number;
	export function setPlayerSwitchOutro(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number): void;
	export function setPlayerSwitchEstablishingShot(name: string): void;
	export function _0x43D1680C6D19A8E9(): void;
	export function _0x74DE2E8739086740(): void;
	export function _0x8E2A065ABDAE6994(): void;
	export function _0xAD5FDF34B81BFE79(): void;
	export function isSwitchReadyForDescent(): boolean;
	export function enableSwitchPauseBeforeDescent(): void;
	export function disableSwitchOutroFx(): void;
	export function switchOutPlayer(ped: number, flags: number, unknown: number): void;
	export function switchInPlayer(ped: number): void;
	export function _0x933BBEEB8C61B5F4(): boolean;
	export function _0x08C2D6C52A3104BB(): number;
	export function _0x5B48A06DD0E792A5(): number;
	export function isSwitchSkippingDescent(): boolean;
	export function _0x1E9057A74FD73E23(): void;
	export function _0x0C15B0E443B2349D(): number;
	export function _0xA76359FC80B2438E(p0: number): void;
	export function _0xBED8CA5FF5E04113(p0: number, p1: number, p2: number, p3: number): void;
	export function _0x472397322E92A856(): void;
	export function _0x40AEFD1A244741F2(p0: boolean): void;
	export function _0x03F1A106BDA7DD3E(): void;
	export function _0x95A7DABDDBB78AE7(iplName1: string, iplName2: string): void;
	export function _0x63EB2B972A218CAC(): void;
	export function _0xFB199266061F820A(): boolean;
	export function _0xF4A0DADB70F57FA6(): void;
	export function _0x5068F488DDB54DD8(): number;
	export function prefetchSrl(srl: string): void;
	export function isSrlLoaded(): boolean;
	export function beginSrl(): void;
	export function endSrl(): void;
	export function setSrlTime(p0: number): void;
	export function _0xEF39EE20C537E98C(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): void;
	export function _0xBEB2D9A1D9A8F55A(p0: number, p1: number, p2: number, p3: number): void;
	export function _0x20C6C7E4EB082A7F(p0: boolean): void;
	export function _0xF8155A7F03DDFC8E(p0: number): void;
	export function setHdArea(x: number, y: number, z: number, radius: number): void;
	export function clearHdArea(): void;
	export function initCreatorBudget(): void;
	export function shutdownCreatorBudget(): void;
	export function addModelToCreatorBudget(modelHash: number): boolean;
	export function removeModelFromCreatorBudget(modelHash: number): void;
	export function getUsedCreatorModelMemoryPercentage(): number;
	export function taskPause(ped: number, ms: number): void;
	export function taskStandStill(ped: number, time: number): void;
	export function taskJump(ped: number, unused: boolean, p2: number, p3: number): void;
	export function taskCower(ped: number, duration: number): void;
	export function taskHandsUp(ped: number, duration: number, facingPed: number, p3: number, p4: boolean): void;
	export function updateTaskHandsUpDuration(ped: number, duration: number): void;
	export function taskOpenVehicleDoor(ped: number, vehicle: number, timeOut: number, doorIndex: number, speed: number): void;
	export function taskEnterVehicle(ped: number, vehicle: number, timeout: number, seat: number, speed: number, flag: number, p6: number): void;
	export function taskLeaveVehicle(ped: number, vehicle: number, flags: number): void;
	export function taskGetOffBoat(ped: number, boat: number): void;
	export function taskSkyDive(ped: number, p1: boolean): void;
	export function taskParachute(ped: number, p1: boolean, p2: boolean): void;
	export function taskParachuteToTarget(ped: number, x: number, y: number, z: number): void;
	export function setParachuteTaskTarget(ped: number, x: number, y: number, z: number): void;
	export function setParachuteTaskThrust(ped: number, thrust: number): void;
	export function taskRappelFromHeli(ped: number, p1: number): void;
	export function taskVehicleDriveToCoord(ped: number, vehicle: number, x: number, y: number, z: number, speed: number, p6: number, vehicleModel: number, drivingMode: number, stopRange: number, p10: number): void;
	export function taskVehicleDriveToCoordLongrange(ped: number, vehicle: number, x: number, y: number, z: number, speed: number, driveMode: number, stopRange: number): void;
	export function taskVehicleDriveWander(ped: number, vehicle: number, speed: number, drivingStyle: number): void;
	export function taskFollowToOffsetOfEntity(ped: number, entity: number, offsetX: number, offsetY: number, offsetZ: number, movementSpeed: number, timeout: number, stoppingRange: number, persistFollowing: boolean): void;
	export function taskGoStraightToCoord(ped: number, x: number, y: number, z: number, speed: number, timeout: number, targetHeading: number, distanceToSlide: number): void;
	export function taskGoStraightToCoordRelativeToEntity(entity1: number, entity2: number, p2: number, p3: number, p4: number, p5: number, p6: number): void;
	export function taskAchieveHeading(ped: number, heading: number, timeout: number): void;
	export function taskFlushRoute(): void;
	export function taskExtendRoute(x: number, y: number, z: number): void;
	export function taskFollowPointRoute(ped: number, speed: number, unknown: number): void;
	export function taskGoToEntity(entity: number, target: number, duration: number, distance: number, speed: number, p5: number, p6: number): void;
	export function taskSmartFleeCoord(ped: number, x: number, y: number, z: number, distance: number, time: number, p6: boolean, p7: boolean): void;
	export function taskSmartFleePed(ped: number, fleeTarget: number, distance: number, fleeTime: number, p4: boolean, p5: boolean): void;
	export function taskReactAndFleePed(ped: number, fleeTarget: number): void;
	export function taskShockingEventReact(ped: number, eventHandle: number): void;
	export function taskWanderInArea(ped: number, x: number, y: number, z: number, radius: number, minimalLength: number, timeBetweenWalks: number): void;
	export function taskWanderStandard(ped: number, p1: number, p2: number): void;
	export function taskVehiclePark(ped: number, vehicle: number, x: number, y: number, z: number, heading: number, mode: number, radius: number, keepEngineOn: boolean): void;
	export function taskStealthKill(killer: number, target: number, actionType: number, p3: number, p4: number): void;
	export function taskPlantBomb(ped: number, x: number, y: number, z: number, heading: number): void;
	export function taskFollowNavMeshToCoord(ped: number, x: number, y: number, z: number, speed: number, timeout: number, stoppingRange: number, persistFollowing: boolean, unk: number): void;
	export function taskFollowNavMeshToCoordAdvanced(ped: number, x: number, y: number, z: number, speed: number, timeout: number, unkFloat: number, unkInt: number, unkX: number, unkY: number, unkZ: number, unk_40000f: number): void;
	export function setPedPathCanUseClimbovers(ped: number, Toggle: boolean): void;
	export function setPedPathCanUseLadders(ped: number, Toggle: boolean): void;
	export function setPedPathCanDropFromHeight(ped: number, Toggle: boolean): void;
	export function _0x88E32DB8C1A4AA4B(ped: number, p1: number): void;
	export function setPedPathMayEnterWater(ped: number, mayEnterWater: boolean): void;
	export function setPedPathPreferToAvoidWater(ped: number, avoidWater: boolean): void;
	export function setPedPathAvoidFire(ped: number, avoidFire: boolean): void;
	export function setGlobalMinBirdFlightHeight(height: number): void;
	export function getNavmeshRouteDistanceRemaining(ped: number, p1: number, p2: number): [number, number, number];
	export function getNavmeshRouteResult(ped: number): number;
	export function _0x3E38E28A1D80DDF6(ped: number): boolean;
	export function taskGoToCoordAnyMeans(ped: number, x: number, y: number, z: number, speed: number, p5: number, p6: boolean, walkingStyle: number, p8: number): void;
	export function taskGoToCoordAnyMeansExtraParams(ped: number, x: number, y: number, z: number, speed: number, p5: number, p6: boolean, walkingStyle: number, p8: number, p9: number, p10: number, p11: number, p12: number): void;
	export function taskGoToCoordAnyMeansExtraParamsWithCruiseSpeed(ped: number, x: number, y: number, z: number, speed: number, p5: number, p6: boolean, walkingStyle: number, p8: number, p9: number, p10: number, p11: number, p12: number, p13: number): void;
	export function taskPlayAnim(ped: number, animDictionary: string, animationName: string, speed: number, speedMultiplier: number, duration: number, flag: number, playbackRate: number, lockX: boolean, lockY: boolean, lockZ: boolean): void;
	export function taskPlayAnimAdvanced(ped: number, animDict: string, animName: string, posX: number, posY: number, posZ: number, rotX: number, rotY: number, rotZ: number, speed: number, speedMultiplier: number, duration: number, flag: number, animTime: number, p14: number, p15: number): void;
	export function stopAnimTask(ped: number, animDictionary: string, animationName: string, p3: number): void;
	export function taskScriptedAnimation(ped: number, p1: number, p2: number, p3: number, p4: number, p5: number): [void, number, number, number];
	export function playEntityScriptedAnim(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): [void, number, number, number];
	export function stopAnimPlayback(ped: number, p1: number, p2: boolean): void;
	export function setAnimWeight(p0: number, p1: number, p2: number, p3: number, p4: boolean): void;
	export function setAnimRate(p0: number, p1: number, p2: number, p3: boolean): void;
	export function setAnimLooped(p0: number, p1: boolean, p2: number, p3: boolean): void;
	export function taskPlayPhoneGestureAnimation(ped: number, animDict: string, animation: string, boneMaskType: string, p4: number, p5: number, p6: boolean, p7: boolean): void;
	export function taskStopPhoneGestureAnimation(ped: number, p1: number): void;
	export function isPlayingPhoneGestureAnim(ped: number): boolean;
	export function getPhoneGestureAnimCurrentTime(ped: number): number;
	export function getPhoneGestureAnimTotalTime(ped: number): number;
	export function taskVehiclePlayAnim(vehicle: number, animation_set: string, animation_name: string): void;
	export function taskLookAtCoord(entity: number, x: number, y: number, z: number, duration: number, p5: number, p6: number): void;
	export function taskLookAtEntity(ped: number, lookAt: number, duration: number, unknown1: number, unknown2: number): void;
	export function taskClearLookAt(ped: number): void;
	export function openSequenceTask(taskSequenceId: number): [void, number];
	export function closeSequenceTask(taskSequenceId: number): void;
	export function taskPerformSequence(ped: number, taskSequenceId: number): void;
	export function taskPerformSequenceLocally(ped: number, taskSequenceId: number): void;
	export function clearSequenceTask(taskSequenceId: number): [void, number];
	export function setSequenceToRepeat(taskSequenceId: number, repeat: boolean): void;
	export function getSequenceProgress(ped: number): number;
	export function getIsTaskActive(ped: number, taskIndex: number): boolean;
	export function getScriptTaskStatus(targetPed: number, taskHash: number): number;
	export function getActiveVehicleMissionType(vehicle: number): number;
	export function taskLeaveAnyVehicle(ped: number, p1: number, p2: number): void;
	export function taskAimGunScripted(ped: number, scriptTask: number, p2: boolean, p3: boolean): void;
	export function taskAimGunScriptedWithTarget(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: boolean, p7: boolean): void;
	export function updateTaskAimGunScriptedTarget(p0: number, p1: number, p2: number, p3: number, p4: number, p5: boolean): void;
	export function getClipSetForScriptedGunTask(p0: number): string;
	export function taskAimGunAtEntity(ped: number, entity: number, duration: number, p3: boolean): void;
	export function taskTurnPedToFaceEntity(ped: number, entity: number, duration: number): void;
	export function taskAimGunAtCoord(ped: number, x: number, y: number, z: number, time: number, p5: boolean, p6: boolean): void;
	export function taskShootAtCoord(ped: number, x: number, y: number, z: number, duration: number, firingPattern: number): void;
	export function taskShuffleToNextVehicleSeat(ped: number, vehicle: number, p2: number): void;
	export function clearPedTasks(ped: number): void;
	export function clearPedSecondaryTask(ped: number): void;
	export function taskEveryoneLeaveVehicle(vehicle: number): void;
	export function taskGotoEntityOffset(ped: number, p1: number, p2: number, x: number, y: number, z: number, duration: number): void;
	export function taskGotoEntityOffsetXy(p0: number, oed: number, duration: number, p3: number, p4: number, p5: number, p6: number, p7: boolean): void;
	export function taskTurnPedToFaceCoord(ped: number, x: number, y: number, z: number, duration: number): void;
	export function taskVehicleTempAction(driver: number, vehicle: number, action: number, time: number): void;
	export function taskVehicleMission(p0: number, p1: number, veh: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: boolean): void;
	export function taskVehicleMissionPedTarget(ped: number, vehicle: number, pedTarget: number, mode: number, maxSpeed: number, drivingStyle: number, minDistance: number, p7: number, p8: boolean): void;
	export function taskVehicleMissionCoorsTarget(ped: number, vehicle: number, x: number, y: number, z: number, p5: number, p6: number, p7: number, p8: number, p9: number, p10: boolean): void;
	export function taskVehicleEscort(ped: number, vehicle: number, targetVehicle: number, mode: number, speed: number, drivingStyle: number, minDistance: number, p7: number, noRoadsDistance: number): void;
	export function taskVehicleFollow(driver: number, vehicle: number, targetEntity: number, speed: number, drivingStyle: number, minDistance: number): void;
	export function taskVehicleChase(driver: number, targetEnt: number): void;
	export function taskVehicleHeliProtect(pilot: number, vehicle: number, entityToFollow: number, targetSpeed: number, p4: number, radius: number, altitude: number, p7: number): void;
	export function setTaskVehicleChaseBehaviorFlag(ped: number, flag: number, set: boolean): void;
	export function setTaskVehicleChaseIdealPursuitDistance(ped: number, distance: number): void;
	export function taskHeliChase(pilot: number, entityToFollow: number, x: number, y: number, z: number): void;
	export function taskPlaneChase(pilot: number, entityToFollow: number, x: number, y: number, z: number): void;
	export function taskPlaneLand(pilot: number, plane: number, runwayStartX: number, runwayStartY: number, runwayStartZ: number, runwayEndX: number, runwayEndY: number, runwayEndZ: number): void;
	export function _0xDBBC7A2432524127(vehicle: number): void;
	export function _0x53DDC75BC3AC0A90(vehicle: number): void;
	export function taskPlaneGotoPreciseVtol(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number): void;
	export function taskHeliMission(pilot: number, aircraft: number, targetVehicle: number, targetPed: number, destinationX: number, destinationY: number, destinationZ: number, missionFlag: number, maxSpeed: number, landingRadius: number, targetHeading: number, unk1: number, unk2: number, unk3: number, landingFlags: number): void;
	export function taskHeliEscortHeli(pilot: number, heli1: number, heli2: number, p3: number, p4: number, p5: number): void;
	export function taskPlaneMission(pilot: number, aircraft: number, targetVehicle: number, targetPed: number, destinationX: number, destinationY: number, destinationZ: number, missionFlag: number, angularDrag: number, unk: number, targetHeading: number, maxZ: number, minZ: number, p13: number): void;
	export function taskPlaneTaxi(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): void;
	export function taskBoatMission(pedDriver: number, boat: number, p2: number, p3: number, x: number, y: number, z: number, p7: number, maxSpeed: number, drivingStyle: number, p10: number, p11: number): void;
	export function taskDriveBy(driverPed: number, targetPed: number, targetVehicle: number, targetX: number, targetY: number, targetZ: number, distanceToShoot: number, pedAccuracy: number, p8: boolean, firingPattern: number): void;
	export function setDrivebyTaskTarget(shootingPed: number, targetPed: number, targetVehicle: number, x: number, y: number, z: number): void;
	export function clearDrivebyTaskUnderneathDrivingTask(ped: number): void;
	export function isDrivebyTaskUnderneathDrivingTask(ped: number): boolean;
	export function controlMountedWeapon(ped: number): boolean;
	export function setMountedWeaponTarget(shootingPed: number, targetPed: number, targetVehicle: number, x: number, y: number, z: number, p6: number, p7: number): void;
	export function isMountedWeaponTaskUnderneathDrivingTask(ped: number): boolean;
	export function taskUseMobilePhone(ped: number, p1: number, p2: number): void;
	export function taskUseMobilePhoneTimed(ped: number, duration: number): void;
	export function taskChatToPed(ped: number, target: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number): void;
	export function taskWarpPedIntoVehicle(ped: number, vehicle: number, seat: number): void;
	export function taskShootAtEntity(entity: number, target: number, duration: number, firingPattern: number): void;
	export function taskClimb(ped: number, unused: boolean): void;
	export function taskClimbLadder(ped: number, p1: number): void;
	export function clearPedTasksImmediately(ped: number): void;
	export function taskPerformSequenceFromProgress(p0: number, p1: number, p2: number, p3: number): void;
	export function setNextDesiredMoveState(p0: number): void;
	export function setPedDesiredMoveBlendRatio(ped: number, p1: number): void;
	export function getPedDesiredMoveBlendRatio(ped: number): number;
	export function taskGotoEntityAiming(ped: number, target: number, distanceToStopAt: number, StartAimingDist: number): void;
	export function taskSetDecisionMaker(ped: number, p1: number): void;
	export function taskSetSphereDefensiveArea(p0: number, p1: number, p2: number, p3: number, p4: number): void;
	export function taskClearDefensiveArea(p0: number): void;
	export function taskPedSlideToCoord(ped: number, x: number, y: number, z: number, heading: number, p5: number): void;
	export function taskPedSlideToCoordHdgRate(ped: number, x: number, y: number, z: number, heading: number, p5: number, p6: number): void;
	export function addCoverPoint(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: boolean): number;
	export function removeCoverPoint(coverpoint: number): void;
	export function doesScriptedCoverPointExistAtCoords(x: number, y: number, z: number): boolean;
	export function getScriptedCoverPointCoords(coverpoint: number): Vector3;
	export function taskCombatPed(ped: number, targetPed: number, p2: number, p3: number): void;
	export function taskCombatPedTimed(p0: number, ped: number, p2: number, p3: number): void;
	export function taskSeekCoverFromPos(ped: number, x: number, y: number, z: number, duration: number, p5: boolean): void;
	export function taskSeekCoverFromPed(ped: number, target: number, duration: number, p3: boolean): void;
	export function taskSeekCoverToCoverPoint(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: boolean): void;
	export function taskSeekCoverToCoords(ped: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p7: number, p8: boolean): void;
	export function taskPutPedDirectlyIntoCover(ped: number, x: number, y: number, z: number, timeout: number, p5: boolean, p6: number, p7: boolean, p8: boolean, p9: number, p10: boolean): void;
	export function taskExitCover(p0: number, p1: number, p2: number, p3: number, p4: number): void;
	export function taskPutPedDirectlyIntoMelee(ped: number, meleeTarget: number, p2: number, p3: number, p4: number, p5: boolean): void;
	export function taskToggleDuck(p0: boolean, p1: boolean): void;
	export function taskGuardCurrentPosition(p0: number, p1: number, p2: number, p3: boolean): void;
	export function taskGuardAssignedDefensiveArea(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): void;
	export function taskGuardSphereDefensiveArea(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, p10: number): void;
	export function taskStandGuard(ped: number, x: number, y: number, z: number, heading: number, scenarioName: string): void;
	export function setDriveTaskCruiseSpeed(driver: number, cruiseSpeed: number): void;
	export function setDriveTaskMaxCruiseSpeed(p0: number, p1: number): void;
	export function setDriveTaskDrivingStyle(ped: number, drivingStyle: number): void;
	export function addCoverBlockingArea(playerX: number, playerY: number, playerZ: number, radiusX: number, radiusY: number, radiusZ: number, p6: boolean, p7: boolean, p8: boolean, p9: boolean): void;
	export function removeAllCoverBlockingAreas(): void;
	export function _0xFA83CA6776038F64(x: number, y: number, z: number): void;
	export function _0x1F351CF1C6475734(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number): void;
	export function taskStartScenarioInPlace(ped: number, scenarioName: string, unkDelay: number, playEnterAnim: boolean): void;
	export function taskStartScenarioAtPosition(ped: number, scenarioName: string, x: number, y: number, z: number, heading: number, duration: number, sittingScenario: boolean, teleport: boolean): void;
	export function taskUseNearestScenarioToCoord(ped: number, x: number, y: number, z: number, distance: number, duration: number): void;
	export function taskUseNearestScenarioToCoordWarp(ped: number, x: number, y: number, z: number, radius: number, p5: number): void;
	export function taskUseNearestScenarioChainToCoord(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): void;
	export function taskUseNearestScenarioChainToCoordWarp(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): void;
	export function doesScenarioExistInArea(x: number, y: number, z: number, radius: number, b: boolean): boolean;
	export function doesScenarioOfTypeExistInArea(p0: number, p1: number, p2: number, p3: number, p4: number, p5: boolean): [boolean, number];
	export function isScenarioOccupied(p0: number, p1: number, p2: number, p3: number, p4: boolean): boolean;
	export function pedHasUseScenarioTask(ped: number): boolean;
	export function playAnimOnRunningScenario(ped: number, animDict: string, animName: string): void;
	export function doesScenarioGroupExist(scenarioGroup: string): boolean;
	export function isScenarioGroupEnabled(scenarioGroup: string): boolean;
	export function setScenarioGroupEnabled(scenarioGroup: string, p1: boolean): void;
	export function resetScenarioGroupsEnabled(): void;
	export function setExclusiveScenarioGroup(scenarioGroup: string): void;
	export function resetExclusiveScenarioGroup(): void;
	export function isScenarioTypeEnabled(scenarioType: string): boolean;
	export function setScenarioTypeEnabled(scenarioType: string, toggle: boolean): void;
	export function resetScenarioTypesEnabled(): void;
	export function isPedActiveInScenario(ped: number): boolean;
	export function _0x621C6E4729388E41(ped: number): boolean;
	export function setPedCanPlayAmbientIdles(ped: number, p1: boolean, p2: boolean): void;
	export function taskCombatHatedTargetsInArea(ped: number, x: number, y: number, z: number, radius: number, p5: number): void;
	export function taskCombatHatedTargetsAroundPed(ped: number, radius: number, p2: number): void;
	export function taskCombatHatedTargetsAroundPedTimed(p0: number, p1: number, p2: number, p3: number): void;
	export function taskThrowProjectile(ped: number, x: number, y: number, z: number, p4: number, p5: number): void;
	export function taskSwapWeapon(ped: number, p1: boolean): void;
	export function taskReloadWeapon(ped: number, unused: boolean): void;
	export function isPedGettingUp(ped: number): boolean;
	export function taskWrithe(ped: number, target: number, time: number, p3: number, p4: number, p5: number): void;
	export function isPedInWrithe(ped: number): boolean;
	export function openPatrolRoute(patrolRoute: string): void;
	export function closePatrolRoute(): void;
	export function addPatrolRouteNode(p0: number, p1: string, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p8: number): void;
	export function addPatrolRouteLink(p0: number, p1: number): void;
	export function createPatrolRoute(): void;
	export function deletePatrolRoute(patrolRoute: string): void;
	export function taskPatrol(ped: number, p1: string, p2: number, p3: boolean, p4: boolean): void;
	export function taskStayInCover(ped: number): void;
	export function addVehicleSubtaskAttackCoord(ped: number, x: number, y: number, z: number): void;
	export function addVehicleSubtaskAttackPed(ped: number, ped2: number): void;
	export function taskVehicleShootAtPed(ped: number, target: number, p2: number): void;
	export function taskVehicleAimAtPed(ped: number, target: number): void;
	export function taskVehicleShootAtCoord(ped: number, x: number, y: number, z: number, p4: number): void;
	export function taskVehicleAimAtCoord(ped: number, x: number, y: number, z: number): void;
	export function taskVehicleGotoNavmesh(ped: number, vehicle: number, x: number, y: number, z: number, speed: number, behaviorFlag: number, stoppingRange: number): void;
	export function taskGoToCoordWhileAimingAtCoord(ped: number, x: number, y: number, z: number, aimAtX: number, aimAtY: number, aimAtZ: number, moveSpeed: number, p8: boolean, p9: number, p10: number, p11: boolean, flags: number, p13: boolean, firingPattern: number): void;
	export function taskGoToCoordWhileAimingAtEntity(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: boolean, p7: number, p8: number, p9: boolean, p10: number, p11: boolean, p12: number, p13: number): void;
	export function taskGoToCoordAndAimAtHatedEntitiesNearCoord(pedHandle: number, goToLocationX: number, goToLocationY: number, goToLocationZ: number, focusLocationX: number, focusLocationY: number, focusLocationZ: number, speed: number, shootAtEnemies: boolean, distanceToStopAt: number, noRoadsDistance: number, unkTrue: boolean, unkFlag: number, aimingFlag: number, firingPattern: number): void;
	export function taskGoToEntityWhileAimingAtCoord(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: boolean, p7: number, p8: number, p9: boolean, p10: boolean, p11: number): void;
	export function taskGoToEntityWhileAimingAtEntity(ped: number, entityToWalkTo: number, entityToAimAt: number, speed: number, shootatEntity: boolean, p5: number, p6: number, p7: boolean, p8: boolean, firingPattern: number): void;
	export function setHighFallTask(ped: number, p1: number, p2: number, p3: number): void;
	export function requestWaypointRecording(name: string): void;
	export function getIsWaypointRecordingLoaded(name: string): boolean;
	export function removeWaypointRecording(name: string): void;
	export function waypointRecordingGetNumPoints(name: string, points: number): [boolean, number];
	export function waypointRecordingGetCoord(name: string, point: number, coord: vectorPtr): [boolean, vectorPtr];
	export function waypointRecordingGetSpeedAtPoint(name: string, point: number): number;
	export function waypointRecordingGetClosestWaypoint(name: string, x: number, y: number, z: number, point: number): [boolean, number];
	export function taskFollowWaypointRecording(p0: number, p1: number, p2: number, p3: number, p4: number): void;
	export function isWaypointPlaybackGoingOnForPed(p0: number): boolean;
	export function getPedWaypointProgress(ped: number): number;
	export function getPedWaypointDistance(p0: number): number;
	export function setPedWaypointRouteOffset(p0: number, p1: number, p2: number, p3: number): number;
	export function getWaypointDistanceAlongRoute(p0: string, p1: number): number;
	export function waypointPlaybackGetIsPaused(p0: number): boolean;
	export function waypointPlaybackPause(p0: number, p1: boolean, p2: boolean): void;
	export function waypointPlaybackResume(p0: number, p1: boolean, p2: number, p3: number): void;
	export function waypointPlaybackOverrideSpeed(p0: number, p1: number, p2: boolean): void;
	export function waypointPlaybackUseDefaultSpeed(p0: number): void;
	export function useWaypointRecordingAsAssistedMovementRoute(p0: number, p1: boolean, p2: number, p3: number): [void, number];
	export function waypointPlaybackStartAimingAtPed(p0: number, p1: number, p2: boolean): void;
	export function waypointPlaybackStartAimingAtCoord(p0: number, p1: number, p2: number, p3: number, p4: boolean): void;
	export function waypointPlaybackStartShootingAtPed(p0: number, p1: number, p2: boolean, p3: number): void;
	export function waypointPlaybackStartShootingAtCoord(p0: number, p1: number, p2: number, p3: number, p4: boolean, p5: number): void;
	export function waypointPlaybackStopAimingOrShooting(p0: number): void;
	export function assistedMovementRequestRoute(route: string): void;
	export function assistedMovementRemoveRoute(route: string): void;
	export function assistedMovementIsRouteLoaded(route: string): boolean;
	export function assistedMovementSetRouteProperties(route: string, props: number): void;
	export function assistedMovementOverrideLoadDistanceThisFrame(dist: number): void;
	export function taskVehicleFollowWaypointRecording(ped: number, vehicle: number, WPRecording: string, p3: number, p4: number, p5: number, p6: number, p7: number, p8: boolean, p9: number): void;
	export function isWaypointPlaybackGoingOnForVehicle(vehicle: number): boolean;
	export function getVehicleWaypointProgress(vehicle: number): number;
	export function getVehicleWaypointTargetPoint(vehicle: number): number;
	export function vehicleWaypointPlaybackPause(vehicle: number): void;
	export function vehicleWaypointPlaybackResume(vehicle: number): void;
	export function vehicleWaypointPlaybackUseDefaultSpeed(vehicle: number): void;
	export function vehicleWaypointPlaybackOverrideSpeed(vehicle: number, speed: number): void;
	export function taskSetBlockingOfNonTemporaryEvents(ped: number, toggle: boolean): void;
	export function taskForceMotionState(ped: number, state: number, p2: boolean): void;
	export function taskMoveNetworkByName(ped: number, task: string, multiplier: number, p3: boolean, animDict: string, flags: number): void;
	export function taskMoveNetworkAdvancedByName(ped: number, p1: string, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, p10: boolean, animDict: string, flags: number): void;
	export function taskMoveNetworkScripted(ped: number, p1: string, data: number, p3: number, p4: boolean, animDict: string, flags: number): [void, number];
	export function isTaskMoveNetworkActive(ped: number): boolean;
	export function isTaskMoveNetworkReadyForTransition(ped: number): boolean;
	export function requestTaskMoveNetworkStateTransition(ped: number, name: string): boolean;
	export function _0xAB13A5565480B6D9(ped: number, p1: string): number;
	export function getTaskMoveNetworkState(ped: number): string;
	export function _0x8423541E8B3A1589(p0: number, p1: number, p2: number): void;
	export function setTaskMoveNetworkSignalFloat(ped: number, signalName: string, value: number): void;
	export function setTaskMoveNetworkSignalFloat2(ped: number, signalName: string, value: number): void;
	export function _0x8634CEF2522D987B(ped: number, p1: string, value: number): void;
	export function setTaskMoveNetworkSignalBool(ped: number, signalName: string, value: boolean): void;
	export function getTaskMoveNetworkSignalFloat(ped: number, signalName: string): number;
	export function getTaskMoveNetworkSignalBool(ped: number, signalName: string): boolean;
	export function getTaskMoveNetworkEvent(ped: number, eventName: string): boolean;
	export function isMoveBlendRatioStill(ped: number): boolean;
	export function isMoveBlendRatioWalking(ped: number): boolean;
	export function isMoveBlendRatioRunning(ped: number): boolean;
	export function isMoveBlendRatioSprinting(ped: number): boolean;
	export function isPedStill(ped: number): boolean;
	export function isPedWalking(ped: number): boolean;
	export function isPedRunning(ped: number): boolean;
	export function isPedSprinting(ped: number): boolean;
	export function isPedStrafing(ped: number): boolean;
	export function taskSynchronizedScene(ped: number, scene: number, animDictionary: string, animationName: string, speed: number, speedMultiplier: number, duration: number, flag: number, playbackRate: number, p9: number): void;
	export function taskAgitatedAction(ped: number, ped2: number): void;
	export function taskSweepAimEntity(ped: number, anim: string, p2: string, p3: string, p4: string, p5: number, vehicle: number, p7: number, p8: number): void;
	export function updateTaskSweepAimEntity(ped: number, entity: number): void;
	export function taskSweepAimPosition(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, p10: number): [void, number, number, number, number];
	export function updateTaskSweepAimPosition(p0: number, p1: number, p2: number, p3: number): void;
	export function taskArrestPed(ped: number, target: number): void;
	export function isPedRunningArrestTask(ped: number): boolean;
	export function isPedBeingArrested(ped: number): boolean;
	export function uncuffPed(ped: number): void;
	export function isPedCuffed(ped: number): boolean;
	export function createVehicle(modelHash: number, x: number, y: number, z: number, heading: number, isNetwork: boolean, thisScriptCheck: boolean, p7: boolean): number;
	export function deleteVehicle(vehicle: number): [void, number];
	export function _0x7D6F9A3EF26136A0(vehicle: number, toggle: boolean, p2: boolean): void;
	export function setVehicleCanBeLockedOn(vehicle: number, canBeLockedOn: boolean, unk: boolean): void;
	export function setVehicleAllowNoPassengersLockon(veh: number, toggle: boolean): void;
	export function _0xE6B0E8CFC3633BF0(vehicle: number): number;
	export function _0x6EAAEFC76ACC311F(p0: number): number;
	export function _0x407DC5E97DB1A4D3(p0: number, p1: number): void;
	export function isVehicleModel(vehicle: number, model: number): boolean;
	export function doesScriptVehicleGeneratorExist(vehicleGenerator: number): boolean;
	export function createScriptVehicleGenerator(x: number, y: number, z: number, heading: number, p4: number, p5: number, modelHash: number, p7: number, p8: number, p9: number, p10: number, p11: boolean, p12: boolean, p13: boolean, p14: boolean, p15: boolean, p16: number): number;
	export function deleteScriptVehicleGenerator(vehicleGenerator: number): void;
	export function setScriptVehicleGenerator(vehicleGenerator: number, enabled: boolean): void;
	export function setAllVehicleGeneratorsActiveInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p6: boolean, p7: boolean): void;
	export function setAllVehicleGeneratorsActive(): void;
	export function setAllLowPriorityVehicleGeneratorsActive(active: boolean): void;
	export function _0x9A75585FB2E54FAD(x: number, y: number, z: number, p3: number): void;
	export function _0x0A436B8643716D14(): void;
	export function setVehicleOnGroundProperly(vehicle: number, p1: number): boolean;
	export function _0xE023E8AC4EF7C117(p0: number, p1: boolean, p2: boolean, p3: boolean): number;
	export function isVehicleStuckOnRoof(vehicle: number): boolean;
	export function addVehicleUpsidedownCheck(vehicle: number): void;
	export function removeVehicleUpsidedownCheck(vehicle: number): void;
	export function isVehicleStopped(vehicle: number): boolean;
	export function getVehicleNumberOfPassengers(vehicle: number): number;
	export function getVehicleMaxNumberOfPassengers(vehicle: number): number;
	export function getVehicleModelNumberOfSeats(modelHash: number): number;
	export function isSeatWarpOnly(vehicle: number, seatIndex: number): boolean;
	export function isTurretSeat(vehicle: number, seatIndex: number): boolean;
	export function doesVehicleAllowRappel(vehicle: number): boolean;
	export function setVehicleDensityMultiplierThisFrame(multiplier: number): void;
	export function setRandomVehicleDensityMultiplierThisFrame(multiplier: number): void;
	export function setParkedVehicleDensityMultiplierThisFrame(multiplier: number): void;
	export function unkSetDisableRandomTrains(toggle: boolean): void;
	export function setAmbientVehicleRangeMultiplierThisFrame(value: number): void;
	export function setFarDrawVehicles(toggle: boolean): void;
	export function setNumberOfParkedVehicles(value: number): void;
	export function setVehicleDoorsLocked(vehicle: number, doorLockStatus: number): void;
	export function setVehicleDoorDestroyType(vehicle: number, doorIndex: number, destroyType: number): void;
	export function setDisableVehicleSirenSound(vehicle: number, toggle: boolean): void;
	export function setVehicleDoorsLockedForPlayer(vehicle: number, player: number, toggle: boolean): void;
	export function getVehicleDoorsLockedForPlayer(vehicle: number, player: number): boolean;
	export function setVehicleDoorsLockedForAllPlayers(vehicle: number, toggle: boolean): void;
	export function setVehicleDoorsLockedForNonScriptPlayers(vehicle: number, toggle: boolean): void;
	export function setVehicleDoorsLockedForTeam(vehicle: number, team: number, toggle: boolean): void;
	export function setVehicleDoorsLockedForUnk(vehicle: number, toggle: boolean): void;
	export function _0x76D26A22750E849E(vehicle: number): void;
	export function explodeVehicle(vehicle: number, isAudible: boolean, isInvisible: boolean): void;
	export function setVehicleOutOfControl(vehicle: number, killDriver: boolean, explodeOnImpact: boolean): void;
	export function setVehicleTimedExplosion(vehicle: number, ped: number, toggle: boolean): void;
	export function addVehiclePhoneExplosiveDevice(vehicle: number): void;
	export function clearVehiclePhoneExplosiveDevice(): void;
	export function hasVehiclePhoneExplosiveDevice(): boolean;
	export function detonateVehiclePhoneExplosiveDevice(): void;
	export function setTaxiLights(vehicle: number, state: boolean): void;
	export function isTaxiLightOn(vehicle: number): boolean;
	export function isVehicleInGarageArea(garageName: string, vehicle: number): boolean;
	export function setVehicleColours(vehicle: number, colorPrimary: number, colorSecondary: number): void;
	export function setVehicleFullbeam(vehicle: number, toggle: boolean): void;
	export function setVehicleIsRacing(vehicle: number, toggle: boolean): void;
	export function setVehicleCustomPrimaryColour(vehicle: number, r: number, g: number, b: number): void;
	export function getVehicleCustomPrimaryColour(vehicle: number, r: number, g: number, b: number): [void, number, number, number];
	export function clearVehicleCustomPrimaryColour(vehicle: number): void;
	export function getIsVehiclePrimaryColourCustom(vehicle: number): boolean;
	export function setVehicleCustomSecondaryColour(vehicle: number, r: number, g: number, b: number): void;
	export function getVehicleCustomSecondaryColour(vehicle: number, r: number, g: number, b: number): [void, number, number, number];
	export function clearVehicleCustomSecondaryColour(vehicle: number): void;
	export function getIsVehicleSecondaryColourCustom(vehicle: number): boolean;
	export function setVehicleEnveffScale(vehicle: number, fade: number): void;
	export function getVehicleEnveffScale(vehicle: number): number;
	export function setCanResprayVehicle(vehicle: number, state: boolean): void;
	export function _0xAB31EF4DE6800CE9(p0: number, p1: number): void;
	export function _0x1B212B26DD3C04DF(vehicle: number, toggle: boolean): void;
	export function _0x33506883545AC0DF(vehicle: number, p1: boolean): void;
	export function jitterVehicle(vehicle: number, p1: boolean, yaw: number, pitch: number, roll: number): void;
	export function _0xED5EDE9E676643C9(p0: number, p1: number): void;
	export function setBoatAnchor(vehicle: number, toggle: boolean): void;
	export function getBoatAnchor(vehicle: number): boolean;
	export function _0x24F4121D07579880(p0: number): number;
	export function _0xE3EBAAE484798530(vehicle: number, p1: boolean): void;
	export function _0xB28B1FE5BFADD7F5(vehicle: number, p1: boolean): void;
	export function _0xE842A9398079BD82(vehicle: number, p1: number): void;
	export function _0xB0AD1238A709B1A2(vehicle: number): boolean;
	export function _0x8F719973E1445BA2(vehicle: number, toggle: boolean): void;
	export function _0xBD32E46AA95C1DD2(p0: number): void;
	export function setVehicleSiren(vehicle: number, toggle: boolean): void;
	export function isVehicleSirenOn(vehicle: number): boolean;
	export function isVehicleSirenAudioOn(vehicle: number): boolean;
	export function setVehicleStrong(vehicle: number, toggle: boolean): void;
	export function removeVehicleStuckCheck(vehicle: number): void;
	export function getVehicleColours(vehicle: number, colorPrimary: number, colorSecondary: number): [void, number, number];
	export function isVehicleSeatFree(vehicle: number, seatIndex: number, p2: boolean): boolean;
	export function getPedInVehicleSeat(vehicle: number, index: number, p2: number): number;
	export function getLastPedInVehicleSeat(vehicle: number, seatIndex: number): number;
	export function getVehicleLightsState(vehicle: number, lightsOn: boolean, highbeamsOn: boolean): [boolean, boolean, boolean];
	export function isVehicleTyreBurst(vehicle: number, wheelID: number, completely: boolean): boolean;
	export function setVehicleForwardSpeed(vehicle: number, speed: number): void;
	export function _0x6501129C9E0FFA05(p0: number, p1: number): void;
	export function bringVehicleToHalt(vehicle: number, distance: number, duration: number, unknown: boolean): void;
	export function _0xDCE97BDF8A0EABC8(p0: number, p1: number): void;
	export function _0x9849DE24FCF23CCC(p0: number, p1: number): void;
	export function _0x7C06330BFDDA182E(p0: number): void;
	export function _0xC69BB1D832A710EF(p0: number): number;
	export function setForkliftForkHeight(vehicle: number, height: number): void;
	export function isVehicleNearEntity(vehicle: number, entity: number): boolean;
	export function _0x62CA17B74C435651(vehicle: number): boolean;
	export function findVehicleCarryingThisEntity(entity: number): number;
	export function _0x89D630CF5EA96D23(vehicle: number, entity: number): boolean;
	export function _0x6A98C2ECF57FA5D4(vehicle: number, entity: number): void;
	export function _0x7C0043FDFF6436BC(x: number): void;
	export function _0x8AA9180DE2FEDD45(vehicle: number, p1: boolean): void;
	export function _0x0A6A279F3AA4FD70(vehicle: number, p1: boolean): void;
	export function _0x634148744F385576(vehicle: number): boolean;
	export function _0x107A473D7A6647A9(p0: number): void;
	export function _0xE6F13851780394DA(vehicle: number, p1: number): void;
	export function setCarBootOpen(vehicle: number): void;
	export function setVehicleTyreBurst(vehicle: number, index: number, onRim: boolean, p3: number): void;
	export function setVehicleDoorsShut(vehicle: number, closeInstantly: boolean): void;
	export function setVehicleTyresCanBurst(vehicle: number, toggle: boolean): void;
	export function getVehicleTyresCanBurst(vehicle: number): boolean;
	export function setVehicleWheelsCanBreak(vehicle: number, enabled: boolean): void;
	export function setVehicleDoorOpen(vehicle: number, doorIndex: number, loose: boolean, openInstantly: boolean): void;
	export function _0x3B458DDB57038F08(p0: number, p1: number, p2: number): void;
	export function _0xA247F9EF01D8082E(p0: number): void;
	export function removeVehicleWindow(vehicle: number, windowIndex: number): void;
	export function rollDownWindows(vehicle: number): void;
	export function rollDownWindow(vehicle: number, windowIndex: number): void;
	export function rollUpWindow(vehicle: number, windowIndex: number): void;
	export function smashVehicleWindow(vehicle: number, index: number): void;
	export function fixVehicleWindow(vehicle: number, index: number): void;
	export function detachVehicleWindscreen(vehicle: number): void;
	export function ejectJb700Roof(vehicle: number, x: number, y: number, z: number): void;
	export function setVehicleLights(vehicle: number, state: number): void;
	export function _0xC45C27EF50F36ADC(vehicle: number, p1: boolean): void;
	export function setVehicleLightsMode(vehicle: number, p1: number): void;
	export function setVehicleAlarm(vehicle: number, state: boolean): void;
	export function startVehicleAlarm(vehicle: number): void;
	export function isVehicleAlarmActivated(vehicle: number): boolean;
	export function setVehicleInteriorlight(vehicle: number, toggle: boolean): void;
	export function _0x8821196D91FA2DE5(p0: number, p1: number): void;
	export function setVehicleLightMultiplier(vehicle: number, multiplier: number): void;
	export function attachVehicleToTrailer(vehicle: number, trailer: number, radius: number): void;
	export function _0x16B5E274BDE402F8(vehicle: number, trailer: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, p10: number, p11: number): void;
	export function _0x374706271354CB18(vehicle: number, p1: number, p2: number): void;
	export function detachVehicleFromTrailer(vehicle: number): void;
	export function isVehicleAttachedToTrailer(vehicle: number): boolean;
	export function _0x2A8F319B392E7B3F(vehicle: number, p1: number): void;
	export function _0x95CF53B3D687F9FA(vehicle: number): void;
	export function _0x878C75C09FBDB942(p0: number): void;
	export function setVehicleTyreFixed(vehicle: number, tyreIndex: number): void;
	export function setVehicleNumberPlateText(vehicle: number, plateText: string): void;
	export function getVehicleNumberPlateText(vehicle: number): string;
	export function getNumberOfVehicleNumberPlates(): number;
	export function setVehicleNumberPlateTextIndex(vehicle: number, plateIndex: number): void;
	export function getVehicleNumberPlateTextIndex(vehicle: number): number;
	export function setRandomTrains(toggle: boolean): void;
	export function createMissionTrain(variation: number, x: number, y: number, z: number, direction: boolean): number;
	export function switchTrainTrack(intersectionId: number, state: boolean): void;
	export function setTrainTrackSpawnFrequency(trackIndex: number, frequency: number): void;
	export function deleteAllTrains(): void;
	export function setTrainSpeed(train: number, speed: number): void;
	export function setTrainCruiseSpeed(train: number, speed: number): void;
	export function setRandomBoats(toggle: boolean): void;
	export function setGarbageTrucks(toggle: boolean): void;
	export function doesVehicleHaveStuckVehicleCheck(vehicle: number): boolean;
	export function getVehicleRecordingId(p0: number, p1: string): number;
	export function requestVehicleRecording(i: number, name: string): void;
	export function hasVehicleRecordingBeenLoaded(p0: number, p1: number): [boolean, number];
	export function removeVehicleRecording(p0: number, p1: number): [void, number];
	export function getPositionOfVehicleRecordingIdAtTime(id: number, time: number): Vector3;
	export function getPositionOfVehicleRecordingAtTime(p0: number, p1: number, p2: string): Vector3;
	export function getRotationOfVehicleRecordingIdAtTime(id: number, time: number): Vector3;
	export function getRotationOfVehicleRecordingAtTime(p0: number, p1: number, p2: number): [Vector3, number];
	export function getTotalDurationOfVehicleRecordingId(p0: number): number;
	export function getTotalDurationOfVehicleRecording(p0: number, p1: number): number;
	export function getPositionInRecording(p0: number): number;
	export function getTimePositionInRecording(p0: number): number;
	export function startPlaybackRecordedVehicle(vehicle: number, p1: number, playback: string, p3: boolean): void;
	export function startPlaybackRecordedVehicleWithFlags(vehicle: number, p1: number, playback: string, p3: number, p4: number, p5: number): void;
	export function _0x1F2E4E06DEA8992B(vehicle: number, p1: boolean): void;
	export function stopPlaybackRecordedVehicle(vehicle: number): void;
	export function pausePlaybackRecordedVehicle(vehicle: number): void;
	export function unpausePlaybackRecordedVehicle(vehicle: number): void;
	export function isPlaybackGoingOnForVehicle(vehicle: number): boolean;
	export function isPlaybackUsingAiGoingOnForVehicle(vehicle: number): boolean;
	export function getCurrentPlaybackForVehicle(vehicle: number): number;
	export function skipToEndAndStopPlaybackRecordedVehicle(vehicle: number): void;
	export function setPlaybackSpeed(vehicle: number, speed: number): void;
	export function startPlaybackRecordedVehicleUsingAi(p0: number, p1: number, p2: number, p3: number, p4: number): [void, number];
	export function skipTimeInPlaybackRecordedVehicle(p0: number, p1: number): void;
	export function setPlaybackToUseAi(vehicle: number, flag: number): void;
	export function setPlaybackToUseAiTryToRevertBackLater(p0: number, p1: number, p2: number, p3: boolean): void;
	export function _0x5845066D8A1EA7F7(vehicle: number, x: number, y: number, z: number, p4: number): void;
	export function _0x796A877E459B99EA(p0: number, p1: number, p2: number, p3: number): void;
	export function _0xFAF2A78061FD9EF4(p0: number, p1: number, p2: number, p3: number): void;
	export function _0x063AE2B2CC273588(p0: number, p1: boolean): void;
	export function explodeVehicleInCutscene(vehicle: number, p1: boolean): void;
	export function addVehicleStuckCheckWithWarp(p0: number, p1: number, p2: number, p3: boolean, p4: boolean, p5: boolean, p6: number): void;
	export function setVehicleModelIsSuppressed(model: number, suppressed: boolean): void;
	export function getRandomVehicleInSphere(x: number, y: number, z: number, radius: number, modelHash: number, flags: number): number;
	export function getRandomVehicleFrontBumperInSphere(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): number;
	export function getRandomVehicleBackBumperInSphere(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): number;
	export function getClosestVehicle(x: number, y: number, z: number, radius: number, modelHash: number, flags: number): number;
	export function getTrainCarriage(train: number, trailerNumber: number): number;
	export function deleteMissionTrain(train: number): [void, number];
	export function setMissionTrainAsNoLongerNeeded(train: number, p1: boolean): [void, number];
	export function setMissionTrainCoords(train: number, x: number, y: number, z: number): void;
	export function isThisModelABoat(model: number): boolean;
	export function isThisModelAJetski(model: number): boolean;
	export function isThisModelAPlane(model: number): boolean;
	export function isThisModelAHeli(model: number): boolean;
	export function isThisModelACar(model: number): boolean;
	export function isThisModelATrain(model: number): boolean;
	export function isThisModelABike(model: number): boolean;
	export function isThisModelABicycle(model: number): boolean;
	export function isThisModelAQuadbike(model: number): boolean;
	export function isThisModelAnAmphibiousCar(model: number): boolean;
	export function isThisModelAnAmphibiousQuadbike(model: number): boolean;
	export function setHeliBladesFullSpeed(vehicle: number): void;
	export function setHeliBladesSpeed(vehicle: number, speed: number): void;
	export function _0x99CAD8E7AFDB60FA(vehicle: number, p1: number, p2: number): void;
	export function setVehicleCanBeTargetted(vehicle: number, state: boolean): void;
	export function _0xDBC631F109350B8C(vehicle: number, p1: boolean): void;
	export function setVehicleCanBeVisiblyDamaged(vehicle: number, state: boolean): void;
	export function _0x1AA8A837D2169D94(vehicle: number, p1: boolean): void;
	export function _0x2311DD7159F00582(vehicle: number, p1: boolean): void;
	export function _0x065D03A9D6B2C6B5(p0: number, p1: number): void;
	export function getVehicleDirtLevel(vehicle: number): number;
	export function setVehicleDirtLevel(vehicle: number, dirtLevel: number): void;
	export function isVehicleDamaged(vehicle: number): boolean;
	export function isVehicleDoorFullyOpen(vehicle: number, doorIndex: number): boolean;
	export function setVehicleEngineOn(vehicle: number, value: boolean, instantly: boolean, noAutoTurnOn: boolean): void;
	export function setVehicleUndriveable(vehicle: number, toggle: boolean): void;
	export function setVehicleProvidesCover(vehicle: number, toggle: boolean): void;
	export function setVehicleDoorControl(vehicle: number, doorIndex: number, speed: number, angle: number): void;
	export function setVehicleDoorLatched(vehicle: number, doorIndex: number, p2: boolean, p3: boolean, p4: boolean): void;
	export function getVehicleDoorAngleRatio(vehicle: number, door: number): number;
	export function getPedUsingVehicleDoor(vehicle: number, doorIndex: number): number;
	export function setVehicleDoorShut(vehicle: number, doorIndex: number, closeInstantly: boolean): void;
	export function setVehicleDoorBroken(vehicle: number, doorIndex: number, deleteDoor: boolean): void;
	export function setVehicleCanBreak(vehicle: number, toggle: boolean): void;
	export function doesVehicleHaveRoof(vehicle: number): boolean;
	export function _0xC4B3347BD68BD609(p0: number): void;
	export function _0xD3301660A57C9272(p0: number): void;
	export function _0xB9562064627FF9DB(p0: number, p1: number): void;
	export function isBigVehicle(vehicle: number): boolean;
	export function getNumberOfVehicleColours(vehicle: number): number;
	export function setVehicleColourCombination(vehicle: number, colorCombination: number): void;
	export function getVehicleColourCombination(vehicle: number): number;
	export function setVehicleXenonLightsColor(vehicle: number, colorIndex: number): void;
	export function getVehicleXenonLightsColor(vehicle: number): number;
	export function setVehicleIsConsideredByPlayer(vehicle: number, toggle: boolean): void;
	export function _0xBE5C1255A1830FF5(vehicle: number, toggle: boolean): void;
	export function _0x9BECD4B9FEF3F8A6(vehicle: number, p1: boolean): void;
	export function _0x88BC673CA9E0AE99(vehicle: number, p1: boolean): void;
	export function _0xE851E480B814D4BA(vehicle: number, p1: boolean): void;
	export function getRandomVehicleModelInMemory(p0: boolean, modelHash: number, successIndicator: number): [void, number, number];
	export function getVehicleDoorLockStatus(vehicle: number): number;
	export function _0xCA4AC3EAAE46EC7B(p0: number, p1: number): number;
	export function isVehicleDoorDamaged(veh: number, doorID: number): boolean;
	export function setVehicleDoorCanBreak(vehicle: number, doorIndex: number, isBreakable: boolean): void;
	export function isVehicleBumperBouncing(vehicle: number, frontBumper: boolean): boolean;
	export function isVehicleBumperBrokenOff(vehicle: number, front: boolean): boolean;
	export function isCopVehicleInArea3d(x1: number, x2: number, y1: number, y2: number, z1: number, z2: number): boolean;
	export function isVehicleOnAllWheels(vehicle: number): boolean;
	export function _0x5873C14A52D74236(p0: number): number;
	export function getVehicleLayoutHash(vehicle: number): number;
	export function _0xA01BC64DD4BFBBAC(vehicle: number, p1: number): number;
	export function setRenderTrainAsDerailed(train: number, toggle: boolean): void;
	export function setVehicleExtraColours(vehicle: number, pearlescentColor: number, wheelColor: number): void;
	export function getVehicleExtraColours(vehicle: number, pearlescentColor: number, wheelColor: number): [void, number, number];
	export function setVehicleInteriorColor(vehicle: number, color: number): void;
	export function getVehicleInteriorColor(vehicle: number, color: number): [void, number];
	export function setVehicleDashboardColor(vehicle: number, color: number): void;
	export function getVehicleDashboardColor(vehicle: number, color: number): [void, number];
	export function stopAllGarageActivity(): void;
	export function setVehicleFixed(vehicle: number): void;
	export function setVehicleDeformationFixed(vehicle: number): void;
	export function _0x206BC5DC9D1AC70A(vehicle: number, toggle: boolean): void;
	export function _0x51BB2D88D31A914B(vehicle: number, p1: boolean): void;
	export function _0x192547247864DFDD(vehicle: number, p1: boolean): void;
	export function setDisableVehiclePetrolTankFires(vehicle: number, toggle: boolean): void;
	export function setDisableVehiclePetrolTankDamage(vehicle: number, toggle: boolean): void;
	export function _0x91A0BD635321F145(vehicle: number, p1: boolean): void;
	export function _0xC50CE861B55EAB8B(vehicle: number, p1: boolean): void;
	export function _0x6EBFB22D646FFC18(vehicle: number, p1: boolean): void;
	export function _0x25367DE49D64CF16(vehicle: number, p1: boolean): void;
	export function removeVehiclesFromGeneratorsInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, unk: number): void;
	export function setVehicleSteerBias(vehicle: number, value: number): void;
	export function isVehicleExtraTurnedOn(vehicle: number, extraId: number): boolean;
	export function setVehicleExtra(vehicle: number, extraId: number, disable: boolean): void;
	export function doesExtraExist(vehicle: number, extraId: number): boolean;
	export function _0x534E36D4DB9ECC5D(p0: number, p1: number): number;
	export function setConvertibleRoof(vehicle: number, p1: boolean): void;
	export function lowerConvertibleRoof(vehicle: number, instantlyLower: boolean): void;
	export function raiseConvertibleRoof(vehicle: number, instantlyRaise: boolean): void;
	export function getConvertibleRoofState(vehicle: number): number;
	export function isVehicleAConvertible(vehicle: number, p1: boolean): boolean;
	export function transformVehicleToSubmarine(vehicle: number, noAnimation: boolean): void;
	export function transformSubmarineToVehicle(vehicle: number, noAnimation: boolean): void;
	export function getIsSubmarineVehicleTransformed(vehicle: number): boolean;
	export function isVehicleStoppedAtTrafficLights(vehicle: number): boolean;
	export function setVehicleDamage(vehicle: number, xOffset: number, yOffset: number, zOffset: number, damage: number, radius: number, p6: boolean): void;
	export function _0x35BB21DE06784373(p0: number, p1: number): void;
	export function getVehicleEngineHealth(vehicle: number): number;
	export function setVehicleEngineHealth(vehicle: number, health: number): void;
	export function _0x2A86A0475B6A1434(p0: number, p1: number): void;
	export function getVehiclePetrolTankHealth(vehicle: number): number;
	export function setVehiclePetrolTankHealth(vehicle: number, health: number): void;
	export function isVehicleStuckTimerUp(vehicle: number, p1: number, p2: number): boolean;
	export function resetVehicleStuckTimer(vehicle: number, nullAttributes: number): void;
	export function isVehicleDriveable(vehicle: number, isOnFireCheck: boolean): boolean;
	export function setVehicleHasBeenOwnedByPlayer(vehicle: number, owned: boolean): void;
	export function setVehicleNeedsToBeHotwired(vehicle: number, toggle: boolean): void;
	export function _0x9F3F689B814F2599(vehicle: number, p1: boolean): void;
	export function _0x4E74E62E0A97E901(vehicle: number, p1: boolean): void;
	export function startVehicleHorn(vehicle: number, duration: number, mode: number, forever: boolean): void;
	export function setVehicleSilent(vehicle: number, toggle: boolean): void;
	export function setVehicleHasStrongAxles(vehicle: number, toggle: boolean): void;
	export function getDisplayNameFromVehicleModel(modelHash: number): string;
	export function getVehicleDeformationAtPos(vehicle: number, offsetX: number, offsetY: number, offsetZ: number): Vector3;
	export function setVehicleLivery(vehicle: number, livery: number): void;
	export function getVehicleLivery(trailers2: number): number;
	export function getVehicleLiveryCount(vehicle: number): number;
	export function setVehicleRoofLivery(vehicle: number, livery: number): void;
	export function getVehicleRoofLivery(vehicle: number): number;
	export function getVehicleRoofLiveryCount(vehicle: number): number;
	export function isVehicleWindowIntact(vehicle: number, windowIndex: number): boolean;
	export function areAllVehicleWindowsIntact(vehicle: number): boolean;
	export function areAnyVehicleSeatsFree(vehicle: number): boolean;
	export function resetVehicleWheels(vehicle: number, toggle: boolean): void;
	export function isHeliPartBroken(vehicle: number, p1: boolean, p2: boolean, p3: boolean): boolean;
	export function getHeliMainRotorHealth(vehicle: number): number;
	export function getHeliTailRotorHealth(vehicle: number): number;
	export function getHeliEngineHealth(vehicle: number): number;
	export function _0x4056EA1105F5ABD7(p0: number, p1: number): void;
	export function _0xFE205F38AAA58E5B(p0: number, p1: number): void;
	export function _0x3EC8BF18AA453FE9(vehicle: number, p1: boolean): void;
	export function setVehicleNameDebug(vehicle: number, name: string): void;
	export function setVehicleExplodesOnHighExplosionDamage(vehicle: number, toggle: boolean): void;
	export function _0xD565F438137F0E10(p0: number, p1: number): void;
	export function _0x3441CAD2F2231923(vehicle: number, p1: boolean): void;
	export function setVehicleDisableTowing(vehicle: number, toggle: boolean): void;
	export function _0xE43701C36CAFF1A4(p0: number): number;
	export function controlLandingGear(vehicle: number, state: number): void;
	export function getLandingGearState(vehicle: number): number;
	export function isAnyVehicleNearPoint(x: number, y: number, z: number, radius: number): boolean;
	export function requestVehicleHighDetailModel(vehicle: number): void;
	export function removeVehicleHighDetailModel(vehicle: number): void;
	export function isVehicleHighDetail(vehicle: number): boolean;
	export function requestVehicleAsset(vehicleHash: number, vehicleAsset: number): void;
	export function hasVehicleAssetLoaded(vehicleAsset: number): boolean;
	export function removeVehicleAsset(vehicleAsset: number): void;
	export function setVehicleTowTruckArmPosition(vehicle: number, position: number): void;
	export function attachVehicleToTowTruck(towTruck: number, vehicle: number, rear: boolean, hookOffsetX: number, hookOffsetY: number, hookOffsetZ: number): void;
	export function detachVehicleFromTowTruck(towTruck: number, vehicle: number): void;
	export function detachVehicleFromAnyTowTruck(vehicle: number): boolean;
	export function isVehicleAttachedToTowTruck(towTruck: number, vehicle: number): boolean;
	export function getEntityAttachedToTowTruck(towTruck: number): number;
	export function setVehicleAutomaticallyAttaches(vehicle: number, p1: boolean, p2: number): number;
	export function setVehicleBulldozerArmPosition(vehicle: number, position: number, p2: boolean): void;
	export function setVehicleTankTurretPosition(vehicle: number, position: number, p2: boolean): void;
	export function _0x0581730AB9380412(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): void;
	export function _0x737E398138550FFF(p0: number, p1: number): void;
	export function _0x1093408B4B9D1146(p0: number, p1: number): void;
	export function _0x32CAEDF24A583345(p0: number): void;
	export function setVehicleDesiredVerticalFlightPhase(vehicle: number, angleRatio: number): void;
	export function setVehicleVerticalFlightPhase(vehicle: number, angle: number): void;
	export function getPlaneHoverModePercentage(plane: number): number;
	export function _0xCE2B43770B655F8F(p0: number, p1: number): void;
	export function _0xA4822F1CF23F4810(outVec: vectorPtr, p1: number, outVec1: vectorPtr, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number): [boolean, vectorPtr, vectorPtr];
	export function setVehicleBurnout(vehicle: number, toggle: boolean): void;
	export function isVehicleInBurnout(vehicle: number): boolean;
	export function setVehicleReduceGrip(vehicle: number, toggle: boolean): void;
	export function _0x6DEE944E1EE90CFB(p0: number, p1: number): void;
	export function setVehicleIndicatorLights(vehicle: number, turnSignal: number, toggle: boolean): void;
	export function setVehicleBrakeLights(vehicle: number, toggle: boolean): void;
	export function setVehicleHandbrake(vehicle: number, toggle: boolean): void;
	export function setVehicleBrake(vehicle: number, toggle: boolean): void;
	export function _0x48ADC8A773564670(): void;
	export function _0x91D6DD290888CBAB(): boolean;
	export function _0x51DB102F4A3BA5E0(toggle: boolean): void;
	export function _0xA4A9A4C40E615885(p0: number): void;
	export function getVehicleTrailerVehicle(vehicle: number, trailer: number): [boolean, number];
	export function _0xCAC66558B944DA67(vehicle: number, toggle: boolean): void;
	export function setVehicleRudderBroken(vehicle: number, toggle: boolean): void;
	export function setConvertibleRoofLatchState(vehicle: number, state: boolean): void;
	export function getVehicleEstimatedMaxSpeed(vehicle: number): number;
	export function getVehicleMaxBraking(vehicle: number): number;
	export function getVehicleMaxTraction(vehicle: number): number;
	export function getVehicleAcceleration(vehicle: number): number;
	export function getVehicleModelMaxSpeed(modelHash: number): number;
	export function getVehicleModelMaxBraking(modelHash: number): number;
	export function getVehicleModelMaxBrakingMaxMods(modelHash: number): number;
	export function getVehicleModelMaxTraction(modelHash: number): number;
	export function getVehicleModelAcceleration(modelHash: number): number;
	export function getVehicleModelDownForce(modelHash: number): number;
	export function getVehicleModelMaxKnots(modelHash: number): number;
	export function getVehicleModelMoveResistance(modelHash: number): number;
	export function getVehicleClassMaxSpeed(vehicleClass: number): number;
	export function getVehicleClassMaxTraction(vehicleClass: number): number;
	export function getVehicleClassMaxAgility(vehicleClass: number): number;
	export function getVehicleClassMaxAcceleration(vehicleClass: number): number;
	export function getVehicleClassMaxBraking(vehicleClass: number): number;
	export function addSpeedZoneForCoord(x: number, y: number, z: number, radius: number, speed: number, p5: boolean): number;
	export function removeSpeedZone(speedzone: number): boolean;
	export function openBombBayDoors(vehicle: number): void;
	export function closeBombBayDoors(vehicle: number): void;
	export function areBombBayDoorsOpen(aircraft: number): boolean;
	export function isVehicleSearchlightOn(vehicle: number): boolean;
	export function setVehicleSearchlight(heli: number, toggle: boolean, canBeUsedByAI: boolean): void;
	export function _0x639431E895B9AA57(ped: number, vehicle: number, p2: boolean, p3: boolean, p4: boolean): boolean;
	export function getEntryPositionOfDoor(vehicle: number, doorIndex: number): Vector3;
	export function canShuffleSeat(vehicle: number, p1: number): boolean;
	export function getNumModKits(vehicle: number): number;
	export function setVehicleModKit(vehicle: number, modKit: number): void;
	export function getVehicleModKit(vehicle: number): number;
	export function getVehicleModKitType(vehicle: number): number;
	export function getVehicleWheelType(vehicle: number): number;
	export function setVehicleWheelType(vehicle: number, WheelType: number): void;
	export function getNumModColors(p0: number, p1: boolean): number;
	export function setVehicleModColor1(vehicle: number, paintType: number, color: number, p3: number): void;
	export function setVehicleModColor2(vehicle: number, paintType: number, color: number): void;
	export function getVehicleModColor1(vehicle: number, paintType: number, color: number, p3: number): [void, number, number, number];
	export function getVehicleModColor2(vehicle: number, paintType: number, color: number): [void, number, number];
	export function getVehicleModColor1Name(vehicle: number, p1: boolean): string;
	export function getVehicleModColor2Name(vehicle: number): string;
	export function isVehicleModLoadDone(vehicle: number): boolean;
	export function setVehicleMod(vehicle: number, modType: number, modIndex: number, customTires: boolean): void;
	export function getVehicleMod(vehicle: number, modType: number): number;
	export function getVehicleModVariation(vehicle: number, modType: number): boolean;
	export function getNumVehicleMods(vehicle: number, modType: number): number;
	export function removeVehicleMod(vehicle: number, modType: number): void;
	export function toggleVehicleMod(vehicle: number, modType: number, toggle: boolean): void;
	export function isToggleModOn(vehicle: number, modType: number): boolean;
	export function getModTextLabel(vehicle: number, modType: number, modValue: number): string;
	export function getModSlotName(vehicle: number, modType: number): string;
	export function getLiveryName(vehicle: number, liveryIndex: number): string;
	export function getVehicleModModifierValue(vehicle: number, modType: number, modIndex: number): number;
	export function getVehicleModIdentifierHash(vehicle: number, modType: number, modIndex: number): number;
	export function preloadVehicleMod(p0: number, modType: number, p2: number): void;
	export function hasPreloadModsFinished(p0: number): boolean;
	export function releasePreloadMods(vehicle: number): void;
	export function setVehicleTyreSmokeColor(vehicle: number, r: number, g: number, b: number): void;
	export function getVehicleTyreSmokeColor(vehicle: number, r: number, g: number, b: number): [void, number, number, number];
	export function setVehicleWindowTint(vehicle: number, tint: number): void;
	export function getVehicleWindowTint(vehicle: number): number;
	export function getNumVehicleWindowTints(): number;
	export function getVehicleColor(vehicle: number, r: number, g: number, b: number): [void, number, number, number];
	export function _0xEEBFC7A7EFDC35B4(vehicle: number): number;
	export function getVehicleCauseOfDestruction(vehicle: number): number;
	export function _0x5EE5632F47AE9695(vehicle: number, health: number): void;
	export function getIsLeftVehicleHeadlightDamaged(vehicle: number): boolean;
	export function getIsRightVehicleHeadlightDamaged(vehicle: number): boolean;
	export function isVehicleEngineOnFire(vehicle: number): boolean;
	export function setVehicleEnginePowerMultiplier(vehicle: number, value: number): void;
	export function setVehicleMaxSpeed(vehicle: number, speed: number): void;
	export function _0x1CF38D529D7441D9(vehicle: number, toggle: boolean): void;
	export function _0x1F9FB66F3A3842D2(vehicle: number, p1: boolean): void;
	export function _0x59C3757B3B7408E8(p0: number, p1: number, p2: number): void;
	export function addVehicleCombatAvoidanceArea(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): number;
	export function removeVehicleCombatAvoidanceArea(p0: number): void;
	export function isAnyPassengerRappelingFromVehicle(vehicle: number): boolean;
	export function setVehicleEngineTorqueMultiplier(vehicle: number, value: number): void;
	export function _0x0AD9E8F87FF7C16F(p0: number, p1: boolean): void;
	export function setVehicleIsWanted(vehicle: number, state: boolean): void;
	export function _0xF488C566413B4232(p0: number, p1: number): void;
	export function _0xC1F981A6F74F0C23(p0: number, p1: boolean): void;
	export function _0x0F3B4D4E43177236(p0: number, p1: boolean): void;
	export function _0x6636C535F6CC2725(vehicle: number): number;
	export function disablePlaneAileron(vehicle: number, p1: boolean, p2: boolean): void;
	export function getIsVehicleEngineRunning(vehicle: number): boolean;
	export function _0x1D97D1E3A70A649F(vehicle: number, p1: boolean): void;
	export function setBikeLeanAngle(vehicle: number, x: number, y: number): void;
	export function _0xAB04325045427AAE(vehicle: number, p1: boolean): void;
	export function _0xCFD778E7904C255E(vehicle: number): void;
	export function setLastDrivenVehicle(vehicle: number): void;
	export function getLastDrivenVehicle(): number;
	export function clearLastDrivenVehicle(): void;
	export function setVehicleHasBeenDrivenFlag(vehicle: number, toggle: boolean): void;
	export function setTaskVehicleGotoPlaneMinHeightAboveTerrain(plane: number, height: number): void;
	export function setVehicleLodMultiplier(vehicle: number, multiplier: number): void;
	export function _0x428BACCDF5E26EAD(vehicle: number, p1: boolean): void;
	export function _0x42A4BEB35D372407(p0: number): number;
	export function _0x2C8CBFE1EA5FC631(p0: number): number;
	export function _0x4D9D109F63FEE1D4(p0: number, p1: boolean): void;
	export function _0x279D50DE5652D935(vehicle: number, toggle: boolean): void;
	export function _0xE44A982368A4AF23(vehicle: number, vehicle2: number): void;
	export function _0xF25E02CB9C5818F8(): void;
	export function _0xBC3CCA5844452B06(p0: number): void;
	export function setVehicleShootAtTarget(driver: number, entity: number, xTarget: number, yTarget: number, zTarget: number): void;
	export function getVehicleLockOnTarget(vehicle: number, entity: number): [boolean, number];
	export function setForceHdVehicle(vehicle: number, toggle: boolean): void;
	export function _0x182F266C2D9E2BEB(vehicle: number, p1: number): void;
	export function getVehiclePlateType(vehicle: number): number;
	export function trackVehicleVisibility(vehicle: number): void;
	export function isVehicleVisible(vehicle: number): boolean;
	export function setVehicleGravity(vehicle: number, toggle: boolean): void;
	export function _0xE6C0C80B8C867537(p0: boolean): void;
	export function _0xF051D9BFB6BA39C0(p0: number): void;
	export function _0x36492C2F0D134C56(vehicle: number): number;
	export function _0x48C633E94A8142A7(vehicle: number): boolean;
	export function setVehicleInactiveDuringPlayback(vehicle: number, toggle: boolean): void;
	export function _0xDFFCEF48E511DB48(p0: number, p1: boolean): void;
	export function isVehicleSprayable(vehicle: number): boolean;
	export function setVehicleEngineCanDegrade(vehicle: number, toggle: boolean): void;
	export function _0xF0E4BA16D1DB546C(vehicle: number, p1: number, p2: number): void;
	export function _0xF87D9F2301F7D206(vehicle: number): void;
	export function isPlaneLandingGearIntact(plane: number): boolean;
	export function arePlanePropellersIntact(plane: number): boolean;
	export function _0x4C815EB175086F84(p0: number, p1: number): number;
	export function setVehicleCanDeformWheels(vehicle: number, toggle: boolean): void;
	export function isVehicleStolen(vehicle: number): boolean;
	export function setVehicleIsStolen(vehicle: number, isStolen: boolean): void;
	export function setPlaneTurbulenceMultiplier(vehicle: number, value: number): void;
	export function arePlaneWingsIntact(plane: number): boolean;
	export function _0xB264C4D2F2B0A78B(vehicle: number): void;
	export function detachVehicleFromCargobob(vehicle: number, cargobob: number): void;
	export function detachVehicleFromAnyCargobob(vehicle: number): boolean;
	export function _0xAF03011701811146(p0: number, p1: number): number;
	export function isVehicleAttachedToCargobob(cargobob: number, vehicleAttached: number): boolean;
	export function getVehicleAttachedToCargobob(cargobob: number): number;
	export function _0x99093F60746708CA(p0: number): number;
	export function attachVehicleToCargobob(vehicle: number, cargobob: number, p2: number, x: number, y: number, z: number): void;
	export function _0xA1DD82F3CCF9A01E(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): void;
	export function _0x571FEB383F629926(cargobob: number, p1: boolean): void;
	export function _0x1F34B0626C594380(p0: number, p1: number): void;
	export function _0x2C1D8B3B19E517CC(p0: number, p1: number): number;
	export function getCargobobHookPosition(cargobob: number): Vector3;
	export function doesCargobobHavePickUpRope(cargobob: number): boolean;
	export function createPickUpRopeForCargobob(cargobob: number, state: number): void;
	export function removePickUpRopeForCargobob(cargobob: number): void;
	export function setCargobobHookPosition(p0: number, p1: number, p2: number, state: number): void;
	export function _0xC0ED6438E6D39BA8(p0: number, p1: number, p2: number): void;
	export function _0xCF1182F682F65307(p0: number, p1: number): void;
	export function _0x0D5F65A8F4EBDAB5(p0: number, p1: number): void;
	export function doesCargobobHavePickupMagnet(cargobob: number): boolean;
	export function setCargobobPickupMagnetActive(cargobob: number, isActive: boolean): void;
	export function setCargobobPickupMagnetStrength(cargobob: number, strength: number): void;
	export function _0xA17BAD153B51547E(cargobob: number, p1: number): void;
	export function _0x66979ACF5102FD2F(cargobob: number, p1: number): void;
	export function _0x6D8EAC07506291FB(cargobob: number, p1: number): void;
	export function _0xED8286F71A819BAA(cargobob: number, p1: number): void;
	export function _0x685D5561680D088B(vehicle: number, p1: number): void;
	export function _0xE301BD63E9E13CF0(vehicle: number, cargobob: number): void;
	export function _0x9BDDC73CC6A115D4(vehicle: number, p1: boolean, p2: boolean): void;
	export function _0x56EB5E94318D3FB6(vehicle: number, p1: boolean): void;
	export function doesVehicleHaveWeapons(vehicle: number): boolean;
	export function _0x2C4A1590ABF43E8B(vehicle: number, p1: boolean): void;
	export function disableVehicleWeapon(disabled: boolean, weaponHash: number, vehicle: number, owner: number): void;
	export function _0x563B65A643ED072E(p0: number, p1: number, p2: number): number;
	export function _0xE05DD0E9707003A3(p0: number, p1: boolean): void;
	export function _0x21115BCD6E44656A(p0: number, p1: boolean): void;
	export function getVehicleClass(vehicle: number): number;
	export function getVehicleClassFromName(modelHash: number): number;
	export function setPlayersLastVehicle(vehicle: number): void;
	export function setVehicleCanBeUsedByFleeingPeds(vehicle: number, toggle: boolean): void;
	export function _0xE5810AC70602F2F5(vehicle: number, p1: number): void;
	export function setVehicleDropsMoneyWhenBlownUp(vehicle: number, toggle: boolean): void;
	export function setVehicleJetEngineOn(vehicle: number, toggle: boolean): void;
	export function _0x6A973569BA094650(p0: number, p1: number): void;
	export function setVehicleHandlingHashForAi(vehicle: number, hash: number): void;
	export function setVehicleExtendedRemovalRange(vehicle: number, range: number): void;
	export function _0x9007A2F21DC108D4(p0: number, p1: number): void;
	export function setHelicopterRollPitchYawMult(helicopter: number, multiplier: number): void;
	export function setVehicleFrictionOverride(vehicle: number, friction: number): void;
	export function setVehicleWheelsCanBreakOffWhenBlowUp(vehicle: number, toggle: boolean): void;
	export function _0xF78F94D60248C737(vehicle: number, p1: boolean): boolean;
	export function setVehicleCeilingHeight(vehicle: number, height: number): void;
	export function _0x5E569EC46EC21CAE(vehicle: number, toggle: boolean): void;
	export function _0x6D6AF961B72728AE(vehicle: number): void;
	export function doesVehicleExistWithDecorator(decorator: string): boolean;
	export function setVehicleExclusiveDriver(vehicle: number, toggle: boolean): void;
	export function setVehicleExclusiveDriver2(vehicle: number, ped: number, index: number): void;
	export function _0xB09D25E77C33EB3F(p0: number, p1: number, p2: number): number;
	export function _0x500873A45724C863(vehicle: number, p1: number): void;
	export function _0xB055A34527CB8FD7(vehicle: number, p1: boolean): void;
	export function _0x1087BC8EC540DAEB(p0: number, p1: number): void;
	export function _0xB68CFAF83A02768D(p0: number, p1: number): void;
	export function _0x0205F5365292D2EB(p0: number, p1: number): void;
	export function _0xCF9159024555488C(p0: number): void;
	export function setDistantCarsEnabled(toggle: boolean): void;
	export function setVehicleNeonLightsColour(vehicle: number, r: number, g: number, b: number): void;
	export function _0xB93B2867F7B479D1(p0: number, p1: number): void;
	export function getVehicleNeonLightsColour(vehicle: number, r: number, g: number, b: number): [void, number, number, number];
	export function setVehicleNeonLightEnabled(vehicle: number, index: number, toggle: boolean): void;
	export function isVehicleNeonLightEnabled(vehicle: number, index: number): boolean;
	export function _0x35E0654F4BAD7971(p0: boolean): void;
	export function disableVehicleNeonLights(vehicle: number, toggle: boolean): void;
	export function _0xB088E9A47AE6EDD5(vehicle: number, p1: boolean): void;
	export function requestVehicleDashboardScaleformMovie(vehicle: number): void;
	export function getVehicleBodyHealth(vehicle: number): number;
	export function setVehicleBodyHealth(vehicle: number, value: number): void;
	export function _0xDF7E3EEB29642C38(vehicle: number, out1: vectorPtr, out2: vectorPtr): [void, vectorPtr, vectorPtr];
	export function getVehicleSuspensionHeight(vehicle: number): number;
	export function setCarHighSpeedBumpSeverityMultiplier(multiplier: number): void;
	export function getNumberOfVehicleDoors(vehicle: number): number;
	export function _0x28B18377EB6E25F6(p0: number, p1: number): void;
	export function _0xA7DCDF4DED40A8F4(vehicle: number, p1: boolean): void;
	export function getVehicleBodyHealth2(vehicle: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): number;
	export function _0xD4C4642CB7F50B5D(vehicle: number): boolean;
	export function _0xC361AA040D6637A8(vehicle: number, p1: boolean): void;
	export function setVehicleKersAllowed(vehicle: number, toggle: boolean): void;
	export function getVehicleHasKers(vehicle: number): boolean;
	export function _0xE16142B94664DEFD(vehicle: number, p1: boolean): void;
	export function _0x26D99D5A82FD18E8(p0: number): void;
	export function _0x84EA99C62CB3EF0C(p0: number, p1: number, p2: number): void;
	export function _0x1201E8A3290A3B98(p0: number, p1: number): void;
	export function _0x8EA86DF356801C7D(p0: number, p1: number): void;
	export function _0xC24075310A8B9CD1(p0: number, p1: number, p2: number, p3: number, p4: number): void;
	export function _0x5BA68A0840D546AC(p0: number, p1: number): number;
	export function _0x4419966C9936071A(vehicle: number): void;
	export function _0x870B8B7A766615C8(p0: number, p1: number, p2: number): void;
	export function _0x8533CAFDE1F0F336(p0: number): number;
	export function _0x4E20D2A627011E8E(vehicle: number, p1: number): number;
	export function setVehicleUnkDamageMultiplier(vehicle: number, multiplier: number): void;
	export function _0xD4196117AF7BB974(p0: number, p1: number): number;
	export function _0xBB2333BB87DDD87F(p0: number, p1: number): void;
	export function _0x73561D4425A021A2(p0: number, p1: number): void;
	export function _0x5B91B229243351A8(p0: number, p1: number): void;
	export function _0x7BBE7FF626A591FE(p0: number): void;
	export function _0x65B080555EA48149(p0: number): void;
	export function _0x428AD3E26C8D9EB0(vehicle: number, x: number, y: number, z: number, p4: number): void;
	export function _0xE2F53F172B45EDE1(): void;
	export function _0xBA91D045575699AD(vehicle: number): boolean;
	export function _0x80E3357FDEF45C21(p0: number, p1: number): void;
	export function _0xEFC13B1CE30D755D(p0: number, p1: number): void;
	export function getIsDoorValid(vehicle: number, doorIndex: number): boolean;
	export function setVehicleRocketBoostRefillTime(vehicle: number, seconds: number): void;
	export function getHasRocketBoost(vehicle: number): boolean;
	export function isVehicleRocketBoostActive(vehicle: number): boolean;
	export function setVehicleRocketBoostActive(vehicle: number, active: boolean): void;
	export function getHasRetractableWheels(vehicle: number): boolean;
	export function getIsWheelsLoweredStateActive(vehicle: number): boolean;
	export function raiseRetractableWheels(vehicle: number): void;
	export function lowerRetractableWheels(vehicle: number): void;
	export function getCanVehicleJump(vehicle: number): boolean;
	export function setUseHigherVehicleJumpForce(vehicle: number, toggle: boolean): void;
	export function _0xB2E0C0D6922D31F2(vehicle: number, toggle: boolean): void;
	export function setVehicleWeaponCapacity(vehicle: number, weaponIndex: number, capacity: number): void;
	export function getVehicleWeaponCapacity(vehicle: number, weaponIndex: number): number;
	export function getVehicleHasParachute(vehicle: number): boolean;
	export function getVehicleCanActivateParachute(vehicle: number): boolean;
	export function setVehicleParachuteActive(vehicle: number, active: boolean): void;
	export function _0x3DE51E9C80B116CF(p0: number): number;
	export function setVehicleReceivesRampDamage(vehicle: number, toggle: boolean): void;
	export function _0x1BBAC99C0BC53656(p0: number, p1: number): void;
	export function _0x756AE6E962168A04(p0: number, p1: number): void;
	export function _0x9D30687C57BAA0BB(p0: number): void;
	export function _0x86B4B6212CB8B627(p0: number, p1: number): void;
	export function _0x41290B40FA63E6DA(p0: number): void;
	export function setVehicleParachuteModel(vehicle: number, modelHash: number): void;
	export function setVehicleParachuteTextureVariatiion(vehicle: number, textureVariation: number): void;
	export function _0x0419B167EE128F33(p0: number, p1: number): number;
	export function _0xF3B0E0AED097A3F5(p0: number, p1: number): number;
	export function _0xD3E51C0AB8C26EEE(p0: number, p1: number): number;
	export function getAllVehicles(vehsStruct: number): [number, number];
	export function _0x72BECCF4B829522E(p0: number, p1: number): void;
	export function _0x66E3AAFACE2D1EB8(p0: number, p1: number, p2: number): void;
	export function _0x1312DDD8385AEE4E(p0: number, p1: number): void;
	export function _0xEDBC8405B3895CC9(p0: number, p1: number): void;
	export function _0x26E13D440E7F6064(vehicle: number, value: number): void;
	export function _0x2FA2494B47FDD009(p0: number, p1: number): void;
	export function setVehicleRocketBoostPercentage(vehicle: number, percentage: number): void;
	export function _0x544996C0081ABDEB(p0: number, p1: number): void;
	export function _0x78CEEE41F49F421F(p0: number, p1: number): void;
	export function _0xAF60E6A2936F982A(p0: number, p1: number): void;
	export function _0x430A7631A84C9BE7(p0: number): void;
	export function _0x75627043C6AA90AD(p0: number): void;
	export function _0x8235F1BEAD557629(p0: number, p1: number): void;
	export function _0x9640E30A7F395E4B(p0: number, p1: number, p2: number, p3: number, p4: number): void;
	export function _0x0BBB9A7A8FFE931B(p0: number, p1: number, p2: number): void;
	export function _0x94A68DA412C4007D(p0: number, p1: number): void;
	export function setVehicleBombCount(vehicle: number, bombCount: number): void;
	export function getVehicleBombCount(vehicle: number): number;
	export function setVehicleCountermeasureCount(vehicle: number, counterMeasureCount: number): void;
	export function getVehicleCountermeasureCount(vehicle: number): number;
	export function _0x0A3F820A9A9A9AC5(p0: number, p1: number, p2: number, p3: number): void;
	export function _0x51F30DB60626A20E(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number): number;
	export function _0x97841634EF7DF1D6(p0: number, p1: number): void;
	export function setVehicleHoverTransformRatio(vehicle: number, ratio: number): void;
	export function setVehicleHoverTransformPercentage(vehicle: number, percentage: number): void;
	export function _0xF1211889DF15A763(p0: number, p1: number): void;
	export function setVehicleHoverTransformActive(vehicle: number, toggle: boolean): void;
	export function _0x3A9128352EAC9E85(p0: number): number;
	export function _0x8DC9675797123522(p0: number): number;
	export function _0xB251E0B33E58B424(p0: number, p1: number, p2: number): void;
	export function _0xAEF12960FA943792(p0: number): number;
	export function _0xAA653AE61924B0A0(p0: number, p1: number): void;
	export function _0xC60060EB0D8AC7B1(p0: number, p1: number, p2: number): void;
	export function setSpecialflightWingRatio(vehicle: number, ratio: number): void;
	export function _0xE615BB7A7752C76A(p0: number, p1: number): void;
	export function _0x887FA38787DE8C72(p0: number): void;
	export function setUnkFloat0x104ForSubmarineVehicleTask(vehicle: number, value: number): void;
	export function setUnkBool0x102ForSubmarineVehicleTask(vehicle: number, value: boolean): void;
	export function _0x36DE109527A2C0C4(toggle: boolean): void;
	export function _0x82E0AC411E41A5B4(toggle: boolean): void;
	export function _0x99A05839C46CE316(toggle: boolean): void;
	export function getIsVehicleShuntBoostActive(vehicle: number): boolean;
	export function _0xE8718FAF591FD224(vehicle: number): boolean;
	export function getLastRammedVehicle(vehicle: number): number;
	export function setDisableVehicleUnk(toggle: boolean): void;
	export function setVehicleNitroEnabled(vehicle: number, toggle: boolean): void;
	export function _0x2970EAA18FD5E42F(vehicle: number, toggle: boolean): void;
	export function setDisableVehicleUnk2(toggle: boolean): void;
	export function _0x5BBCF35BF6E456F7(toggle: boolean): void;
	export function getDoesVehicleHaveTombstone(vehicle: number): boolean;
	export function hideVehicleTombstone(vehicle: number, toggle: boolean): void;
	export function getIsVehicleEmpDisabled(vehicle: number): boolean;
	export function _0x8F0D5BA1C2CC91D7(toggle: boolean): void;
	export function getWaterHeight(x: number, y: number, z: number, height: number): [boolean, number];
	export function getWaterHeightNoWaves(x: number, y: number, z: number, height: number): [boolean, number];
	export function testProbeAgainstWater(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, result: vectorPtr): [boolean, vectorPtr];
	export function testProbeAgainstAllWater(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number): boolean;
	export function testVerticalProbeAgainstAllWater(x: number, y: number, z: number, p3: number, height: number): [boolean, number];
	export function modifyWater(x: number, y: number, radius: number, height: number): void;
	export function addCurrentRise(x: number, y: number, z: number, radius: number, unk: number): number;
	export function removeCurrentRise(p0: number): void;
	export function setDeepOceanScaler(intensity: number): void;
	export function getDeepOceanScaler(): number;
	export function _0x547237AA71AB44DE(p0: number): void;
	export function resetDeepOceanScaler(): void;
	export function enableLaserSightRendering(toggle: boolean): void;
	export function getWeaponComponentTypeModel(componentHash: number): number;
	export function getWeapontypeModel(weaponHash: number): number;
	export function getWeapontypeSlot(weaponHash: number): number;
	export function getWeapontypeGroup(weaponHash: number): number;
	export function getWeaponComponentVariantExtraComponentCount(componentHash: number): number;
	export function getWeaponComponentVariantExtraComponentModel(componentHash: number, extraComponentIndex: number): number;
	export function setCurrentPedWeapon(ped: number, weaponHash: number, equipNow: boolean): void;
	export function getCurrentPedWeapon(ped: number, weaponHash: number, p2: boolean): [boolean, number];
	export function getCurrentPedWeaponEntityIndex(ped: number): number;
	export function getBestPedWeapon(ped: number, p1: boolean): number;
	export function setCurrentPedVehicleWeapon(ped: number, weaponHash: number): boolean;
	export function getCurrentPedVehicleWeapon(ped: number, weaponHash: number): [boolean, number];
	export function isPedArmed(ped: number, p1: number): boolean;
	export function isWeaponValid(weaponHash: number): boolean;
	export function hasPedGotWeapon(ped: number, weaponHash: number, p2: boolean): boolean;
	export function isPedWeaponReadyToShoot(ped: number): boolean;
	export function getPedWeapontypeInSlot(ped: number, weaponSlot: number): number;
	export function getAmmoInPedWeapon(ped: number, weaponhash: number): number;
	export function addAmmoToPed(ped: number, weaponHash: number, ammo: number): void;
	export function setPedAmmo(ped: number, weaponHash: number, ammo: number, p3: boolean): void;
	export function setPedInfiniteAmmo(ped: number, toggle: boolean, weaponHash: number): void;
	export function setPedInfiniteAmmoClip(ped: number, toggle: boolean): void;
	export function giveWeaponToPed(ped: number, weaponHash: number, ammoCount: number, isHidden: boolean, equipNow: boolean): void;
	export function giveDelayedWeaponToPed(ped: number, weaponHash: number, ammoCount: number, equipNow: boolean): void;
	export function removeAllPedWeapons(ped: number, p1: boolean): void;
	export function removeWeaponFromPed(ped: number, weaponHash: number): void;
	export function hidePedWeaponForScriptedCutscene(ped: number, toggle: boolean): void;
	export function setPedCurrentWeaponVisible(ped: number, visible: boolean, deselectWeapon: boolean, p3: boolean, p4: boolean): void;
	export function setPedDropsWeaponsWhenDead(ped: number, toggle: boolean): void;
	export function hasPedBeenDamagedByWeapon(ped: number, weaponHash: number, weaponType: number): boolean;
	export function clearPedLastWeaponDamage(ped: number): void;
	export function hasEntityBeenDamagedByWeapon(entity: number, weaponHash: number, weaponType: number): boolean;
	export function clearEntityLastWeaponDamage(entity: number): void;
	export function setPedDropsWeapon(ped: number): void;
	export function setPedDropsInventoryWeapon(ped: number, weaponHash: number, xOffset: number, yOffset: number, zOffset: number, ammoCount: number): void;
	export function getMaxAmmoInClip(ped: number, weaponHash: number, p2: boolean): number;
	export function getAmmoInClip(ped: number, weaponHash: number, ammo: number): [boolean, number];
	export function setAmmoInClip(ped: number, weaponHash: number, ammo: number): boolean;
	export function getMaxAmmo(ped: number, weaponHash: number, ammo: number): [boolean, number];
	export function getMaxAmmo2(ped: number, weaponHash: number, ammo: number): [boolean, number];
	export function addPedAmmo(ped: number, weaponHash: number, ammo: number): void;
	export function setPedAmmoByType(ped: number, ammoType: number, ammo: number): void;
	export function getPedAmmoByType(ped: number, ammoType: number): number;
	export function setPedAmmoToDrop(ped: number, p1: number): void;
	export function _0xE620FD3512A04F18(p0: number): void;
	export function getPedAmmoTypeFromWeapon(ped: number, weaponHash: number): number;
	export function getPedAmmoTypeFromWeapon2(ped: number, weaponHash: number): number;
	export function getPedLastWeaponImpactCoord(ped: number, coords: vectorPtr): [boolean, vectorPtr];
	export function setPedGadget(ped: number, gadgetHash: number, p2: boolean): void;
	export function getIsPedGadgetEquipped(ped: number, gadgetHash: number): boolean;
	export function getSelectedPedWeapon(ped: number): number;
	export function explodeProjectiles(ped: number, weaponHash: number, p2: boolean): void;
	export function removeAllProjectilesOfType(weaponHash: number, p1: boolean): void;
	export function getLockonDistanceOfCurrentPedWeapon(ped: number): number;
	export function getMaxRangeOfCurrentPedWeapon(ped: number): number;
	export function hasVehicleGotProjectileAttached(driver: number, vehicle: number, weaponHash: number, p3: number): boolean;
	export function giveWeaponComponentToPed(ped: number, weaponHash: number, componentHash: number): void;
	export function removeWeaponComponentFromPed(ped: number, weaponHash: number, componentHash: number): void;
	export function hasPedGotWeaponComponent(ped: number, weaponHash: number, componentHash: number): boolean;
	export function isPedWeaponComponentActive(ped: number, weaponHash: number, componentHash: number): boolean;
	export function pedSkipNextReloading(ped: number): boolean;
	export function makePedReload(ped: number): boolean;
	export function requestWeaponAsset(weaponHash: number, p1: number, p2: number): void;
	export function hasWeaponAssetLoaded(weaponHash: number): boolean;
	export function removeWeaponAsset(weaponHash: number): void;
	export function createWeaponObject(weaponHash: number, ammoCount: number, x: number, y: number, z: number, showWorldModel: boolean, heading: number, p7: number, p8: number, p9: number): number;
	export function giveWeaponComponentToWeaponObject(weaponObject: number, addonHash: number): void;
	export function removeWeaponComponentFromWeaponObject(p0: number, p1: number): void;
	export function hasWeaponGotWeaponComponent(weapon: number, addonHash: number): boolean;
	export function giveWeaponObjectToPed(weaponObject: number, ped: number): void;
	export function doesWeaponTakeWeaponComponent(weaponHash: number, componentHash: number): boolean;
	export function getWeaponObjectFromPed(ped: number, p1: boolean): number;
	export function giveLoadoutToPed(ped: number, loadoutHash: number): void;
	export function setPedWeaponTintIndex(ped: number, weaponHash: number, tintIndex: number): void;
	export function getPedWeaponTintIndex(ped: number, weaponHash: number): number;
	export function setWeaponObjectTintIndex(weapon: number, tintIndex: number): void;
	export function getWeaponObjectTintIndex(weapon: number): number;
	export function getWeaponTintCount(weaponHash: number): number;
	export function setPedWeaponLiveryColor(ped: number, weaponHash: number, camoComponentHash: number, colorIndex: number): void;
	export function getPedWeaponLiveryColor(ped: number, weaponHash: number, camoComponentHash: number): number;
	export function setWeaponObjectLiveryColor(weaponObject: number, camoComponentHash: number, colorIndex: number): void;
	export function getWeaponObjectLiveryColor(weaponObject: number, camoComponentHash: number): number;
	export function _0xA2C9AC24B4061285(ped: number, weaponHash: number): number;
	export function _0x977CA98939E82E4B(weaponObject: number, p1: number): void;
	export function getWeaponHudStats(weaponHash: number, outData: number): [boolean, number];
	export function getWeaponComponentHudStats(componentHash: number, outData: number): [boolean, number];
	export function getWeaponDamage(weaponHash: number, componentHash: number): number;
	export function getWeaponClipSize(weaponHash: number): number;
	export function _0x065D2AACAD8CF7A4(p0: number): number;
	export function setPedChanceOfFiringBlanks(ped: number, xBias: number, yBias: number): void;
	export function setPedShootOrdnanceWeapon(ped: number, p1: number): number;
	export function requestWeaponHighDetailModel(weaponObject: number): void;
	export function setWeaponDamageModifier(weaponHash: number, damageAmount: number): void;
	export function isPedCurrentWeaponSilenced(ped: number): boolean;
	export function isFlashLightOn(ped: number): boolean;
	export function setFlashLightFadeDistance(distance: number): number;
	export function setWeaponAnimationOverride(ped: number, animStyle: number): void;
	export function getWeaponDamageType(weaponHash: number): number;
	export function _0xE4DCEC7FD5B739A5(ped: number): void;
	export function canUseWeaponOnParachute(weaponHash: number): boolean;
	export function createAirDefenseSphere(p0: number, p1: number, p2: number, radius: number, p4: number, p5: number, p6: number, weaponHash: number): number;
	export function createAirDefenseArea(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, weaponHash: number): number;
	export function removeAirDefenseZone(zoneId: number): boolean;
	export function removeAllAirDefenseZones(): void;
	export function setPlayerAirDefenseZoneFlag(player: number, zoneId: number, enable: boolean): void;
	export function isAirDefenseZoneInsideSphere(x: number, y: number, z: number, radius: number, zoneId: number): boolean;
	export function fireAirDefenseWeapon(zoneId: number, x: number, y: number, z: number): void;
	export function doesAirDefenseZoneExist(zoneId: number): boolean;
	export function setCanPedEquipWeapon(ped: number, weaponHash: number, toggle: boolean): void;
	export function setCanPedEquipAllWeapons(ped: number, toggle: boolean): void;
	export function getZoneAtCoords(x: number, y: number, z: number): number;
	export function getZoneFromNameId(zoneName: string): number;
	export function getZonePopschedule(zoneId: number): number;
	export function getNameOfZone(x: number, y: number, z: number): string;
	export function setZoneEnabled(zoneId: number, toggle: boolean): void;
	export function getZoneScumminess(zoneId: number): number;
	export function overridePopscheduleVehicleModel(scheduleId: number, vehicleHash: number): void;
	export function clearPopscheduleOverrideVehicleModel(scheduleId: number): void;
	export function getHashOfMapAreaAtCoords(x: number, y: number, z: number): number;
}
